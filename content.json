{"meta":{"title":"desirepaths 的博客","subtitle":"个人随笔","description":"个人目标：随性而为!","author":"desirepaths","url":"http://desirepaths.github.io"},"pages":[{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2020-03-11T02:09:24.879Z","comments":true,"path":"friends/index.html","permalink":"http://desirepaths.github.io/friends/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","updated":"2020-03-11T02:11:31.536Z","comments":true,"path":"categories/index.html","permalink":"http://desirepaths.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","updated":"2020-03-11T02:11:55.025Z","comments":true,"path":"tags/index.html","permalink":"http://desirepaths.github.io/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2020-03-11T02:12:12.471Z","comments":true,"path":"about/index.html","permalink":"http://desirepaths.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Excel 导入 Json 文件数据","slug":"Excel-learn","date":"2020-02-23T09:46:19.000Z","updated":"2020-03-11T03:16:40.863Z","comments":true,"path":"2020/02/23/Excel-learn/","link":"","permalink":"http://desirepaths.github.io/2020/02/23/Excel-learn/","excerpt":"用 Excel 导入 Json 文件的数据， 并把 Key 和 value 的数据分成不同的列去显示.","text":"用 Excel 导入 Json 文件的数据， 并把 Key 和 value 的数据分成不同的列去显示. 1.从 JSON 文件中导入数据到 Excel(Mac excel 2016)2.从 Excel 中导出数据到 JSON 文件. 1.从 JSON 文件中导入数据到 Excel(Mac excel 2016)1.目标: 1.源 json 文件 12345678910111213&#123; &quot;product.rlm1&quot;: &quot;RLM 1&quot;, &quot;product.zeroturn&quot;: &quot;Zeroturn&quot;, &quot;product.battery&quot;: &quot;Batteries&quot;, &quot;product.rlm2&quot;: &quot;RLM 2&quot;, &quot;search&quot;: &quot;Search&quot;, &quot;set&quot;: &quot;Set&quot;, &quot;update-now&quot;: &quot;Update now&quot;, &quot;enable&quot;: &quot;Enable&quot;, &quot;disable&quot;: &quot;Disable&quot;, &quot;length-unit-m&quot;: &quot;m&quot;&#125; 2.导入 json 数据后,目标 Excel 文件的样子(Key 跟 value 分开不同的列) 2.步骤: 1.在 Excel 中选择 Data -&gt; Get External Data -&gt; Import Text File 2.选择 Delimited 3.根据自己的需求去选择不同的配置，我这里选择了 Common,Space, 自添加了 colon :. 4.选择 Do not import column(Skip) 5.选择 new sheet, 及可以在新的 Tab 中看到 json 的 key -&gt; value 已经成功被导入. 3.注意： 1.JSON 文件的 value 值中不要有 双引号(“”), 否则 Excel 中解析出来会错误. 2.如果有双引号，请把它变为单引号 (‘’), 这样输出的 Excel 文件就会正常了. 2.从 Excel 中导出数据到 JSON 文件. 1.参考: CSV -&gt; JSON 1.把 xlsx 格式转换为 CSV 格式 1.File -&gt; Save as ... -&gt; 选择 CSV 格式，然后保存. 2.进入网站 http://www.convertcsv.com/csv-to-json.htm , 在 Step1 处选择 刚刚生成的 CSV 文件. 3.Step2:选择 Skip # of lines:0, Tab 为选中的状态. 4.Step3 的选择如图所示, Step4 输入自己的 JSON 模板，然后点击 Convert CSV to Json via template 5.Step5,直接点击 Download result 即可，无需做其它的操作. 6.因为我们生成的 json 文件会包括空字符键值对: &quot;&quot;:&quot;&quot;, 所以我们把它全部替换成空格即可. 7.用 JSON 对比工具，可以看到生成的文件与目标文件现在完全一致了.","categories":[{"name":"Office","slug":"Office","permalink":"http://desirepaths.github.io/categories/Office/"}],"tags":[{"name":"Office","slug":"Office","permalink":"http://desirepaths.github.io/tags/Office/"}]},{"title":"Angular 多语言框架 ngx-translate 的使用","slug":"Angular_ngx-translate使用方法","date":"2020-02-03T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2020/02/03/Angular_ngx-translate使用方法/","link":"","permalink":"http://desirepaths.github.io/2020/02/03/Angular_ngx-translate使用方法/","excerpt":"记录 Angular ngx-translate 多语言框架的使用方法","text":"记录 Angular ngx-translate 多语言框架的使用方法 1.参考2.小工具3.翻译4.错误处理5.多语言的页面实现6.复数形式的处理 1.参考 1.ngx-translate/core 2.How to translate your Angular 7 app with ngx-translate 3.Internationalize Your Angular App with ngx-translate 4.safely use translate.instant() #517 5.safely use translate.instant() 2.小工具 1.BabelEdit(要收费) -&gt; ‘BabelEdit is the translation editor for your ngx-translate project.’ 2.poedit(免费)(不能编辑 json 文件) -&gt; Powerful and intuitive translation editor 3.在线多语言 json 编辑工具 4.ngx-translate-extract -&gt; 可以把在 Html 和 Typescript 文件上用到的 翻译 自动转换到 xx.json 文件中. 5.localize-router -&gt; 语言改变时 URL 也会跟着变化. 3.翻译 1.翻译文件为: 1234567891011// en.json&#123; &quot;welcomeMessage&quot;: &quot;Thanks for joining, &#123;&#123; firstName &#125;&#125;! It&apos;s great to have you!&quot;, &quot;loginPrompt&quot;: &quot;Please login&quot;, &quot;login&quot;: &#123; &quot;username&quot;: &quot;Enter your user name&quot;, &quot;password&quot;: &quot;Password here&quot; &#125;, &quot;buttonTx&quot;: &quot;click this button&quot;&#125; 1.在 html 中的翻译 123456789101112&lt;button (click)=&quot;buttonClickAction()&quot; &gt;&#123;&#123;buttonText&#125;&#125;&lt;/button&gt;&lt;!-- 元素 文字的翻译 --&gt;&lt;p&gt;&#123;&#123; &apos;welcomeMessage&apos; | translate:user &#125;&#125;&lt;/p&gt;&lt;!-- 元素 的属性 --&gt;&lt;input title=&quot;&#123;&#123; &apos;login.password&apos; | translate &#125;&#125;&quot; type=&quot;password&quot; placeholder=&quot;&#123;&#123; &apos;login.password&apos; | translate &#125;&#125;&quot;&gt;&lt;hr&gt;&lt;br&gt;&lt;!-- &apos;元素 文字的翻译&apos; 的另外两种做法 --&gt;&lt;label translate=&apos;login.username&apos;&gt;&lt;/label&gt;&lt;p translate [translateParams]=&quot;&#123; firstName: user.firstName &#125;&quot;&gt;welcomeMessage&lt;/p&gt; 2.在代码中的翻译 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#123;Component, OnInit&#125; from &apos;@angular/core&apos;;import &#123;TranslateService&#125; from &apos;@ngx-translate/core&apos;;@Component(&#123; selector: &apos;app-root&apos;, templateUrl: &apos;./app.component.html&apos;, styleUrls: [&apos;./app.component.css&apos;]&#125;)export class AppComponent implements OnInit&#123; user: &#123; firstName: string, lastName: string &#125;; welcome: string; loginPrompt: string; usernameLabel: string; passwordLabel: string; buttonText = &quot;点击666&quot;; constructor(private translate: TranslateService) &#123; console.log(&apos;constructor&apos;); translate.addLangs([&apos;en&apos;, &apos;klingon&apos;]) translate.setDefaultLang(&apos;en&apos;); translate.use(&apos;en&apos;); &#125; ngOnInit() &#123; this.user = &#123;firstName: &quot;Tian1&quot;, lastName: &quot;Zeng1&quot;&#125;; // synchronous. Also interpolate the &apos;firstName&apos; parameter with a value // 这里只会分别得到 &apos;welcomeMessage&apos;,&apos;loginPrompt&apos;,&apos;buttonTx&apos;, 不会得到真正翻译的结果. this.welcome = this.translate.instant(&apos;welcomeMessage&apos;, &#123;firstName: this.user.firstName&#125;); this.loginPrompt = this.translate.instant(&apos;loginPrompt&apos;); this.buttonText = this.translate.instant(&apos;buttonTx&apos;); // asynchronous - gets translations then completes. // 这里可以顺利得到结果 this.translate.get([&apos;login.username&apos;, &apos;login.password&apos;, &apos;buttonTx&apos;]) .subscribe(translations =&gt; &#123; this.buttonText = translations[&apos;buttonTx&apos;]; this.usernameLabel = translations[&apos;login.username&apos;]; this.passwordLabel = translations[&apos;login.password&apos;]; &#125;); &#125; buttonClickAction() &#123; this.user = &#123;firstName: &quot;Tian2&quot;, lastName: &quot;Zeng2&quot;&#125;; // 这里可以得到想要的翻译结果 this.welcome = this.translate.instant(&apos;welcomeMessage&apos;, &#123;firstName: this.user.firstName&#125;); this.loginPrompt = this.translate.instant(&apos;loginPrompt&apos;); &#125;&#125; 效果显示: 4.错误处理1.翻译文件中没有这个翻译 key 的情况. 1.Html: 翻译的文本只会显示这个 key. 2.Typescript: 翻译的文本为: undefine2.翻译文件没有的情况. 会报 GET http://localhost:4200/assets/i18n/cn.json 404 (Not Found) 错误. 3.this.translate.instant 一直返回 key 的问题. 1.原因: 这是因为 翻译文件还没有加载完毕，所以用 同步的方法 translate.instant 不能获取到 value. 2.解决方法 1: 用 异步方法 get 去实现 123translate.get(&quot;lessons_title&quot;).subscribe((result: string) =&gt; &#123; lesson.title = result; &#125;); 2.在项目加载时就加载全部的翻译文本,具体做法是在 AppModule 中添加以下代码: 12345678910111213141516171819202122232425262728293031@NgModule(&#123; providers: [ &#123; provide: APP_INITIALIZER, useFactory: appInitializerFactory, deps: [TranslateService, Injector], multi: true &#125;], bootstrap: [AppComponent]&#125;)export function appInitializerFactory(translate: TranslateService, injector: Injector) &#123; return () =&gt; new Promise&lt;any&gt;((resolve: any) =&gt; &#123; const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null)); locationInitialized.then(() =&gt; &#123; translate.addLangs([&apos;en&apos;, &apos;de&apos;, &apos;zh&apos;]) translate.setDefaultLang(&apos;en&apos;); const browerLang = translate.getBrowserLang(); const langToSet = browerLang.match(/en|de|zh/)? browerLang: &apos;en&apos;; translate.use(langToSet).subscribe(() =&gt; &#123; console.info(`Successfully initialized &apos;$&#123;langToSet&#125;&apos; language.&apos;`); &#125;, err =&gt; &#123; console.error(`Problem with &apos;$&#123;langToSet&#125;&apos; language initialization.&apos;`); &#125;, () =&gt; &#123; resolve(null); &#125;); &#125;); &#125;);&#125; 5.多语言切换的实现1.下拉选择框切换语言 1.代码如下所示 12345678910111213141516171819202122232425// AppComponent currentLang : string; constructor(private translate: TranslateService) &#123; translate.addLangs([&apos;en&apos;, &apos;de&apos;]) translate.setDefaultLang(&apos;en&apos;); this.currentLang = &quot;en&quot;; &#125; ngOnInit() &#123; this.translate.onLangChange.subscribe((event: LangChangeEvent) =&gt; &#123; console.log(&apos;onLangChange event:&apos;+ event.lang); this.currentLang = event.lang; &#125;); this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) =&gt; &#123; console.log(&apos;onTranslationChange event:&apos;+ event.translations); &#125;); this.translate.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) =&gt; &#123; console.log(&apos;onDefaultLangChange event:&apos;+ event.lang); &#125;); &#125; languageChangeEvent(lang: string) &#123; console.log(&quot;lang select:&quot;+lang); this.translate.use(lang); &#125; 123456// Html file&lt;h3&gt;当前的语言为: &#123;&#123;currentLang&#125;&#125;&lt;/h3&gt;&lt;select (change)=&quot;languageChangeEvent($event.target.value)&quot; &gt; &lt;option *ngFor=&quot;let lang of this.translate.getLangs()&quot; [value]=&quot;lang&quot;&gt;&#123;&#123;lang&#125;&#125;&lt;/option&gt;&lt;/select&gt; 效果显示: 2.但是如果程序有很多个 Module, 在子 Module 下设置 translate.use(lang) 的话其它的 module 会得不到响应，有个暴力的方法就是重新刷新整个页面就可以解决这个问题: 1234567891011121314151617181920212223this.currentSelectLang = currentLang;this.translate.use(currentLang);// window.location.pathname: &apos;/en/dashboard/mower&apos; , &apos;/&apos;// window.location.href: &apos;http://localhost:4200/en/dashboard/mower&apos; , &apos;http://localhost:4200/&apos;var currentPathName = window.location.pathname;// 1.Check pathname contain en\\zh\\frconst urlLang = this.getLangFromPath(currentPathName);const urlHasLang = !urlLang.match(/en|zh|fr/) ;if( !urlHasLang ) &#123; // 2.If contain, then replace the old language to new language currentPathName = currentPathName.replace(urlLang,currentLang);&#125; else &#123; // 3.Else , add the new language to the path name currentPathName = `/$&#123;currentLang&#125;$&#123;currentPathName&#125;`;&#125;this.route.navigate([currentPathName]) .then(() =&gt; &#123; window.location.reload();&#125;); 2.URL 切换语言1.this.translate.currentLang 不生效 !!!* 需要设置 `translate.use(&apos;en&apos;);` 后， `this.translate.currentLang ` 才生效. 2.所实现的效果有:* 1.访问 http://localhost:4200/de/login 会显示德语. * 2.下拉选择了语言后， URL 会变化，如从 login 页面的 en 选择了 de 后, URL 从 http://localhost:4200/login 变为 http://localhost:4200/de/login . 3.实现步骤: 1.在 AppModule 添加一个 providers,如下面代码所示(逻辑就是为一开始加载程序时，就拿到 URL 上的所显示的语言,然后跟据这个语言去设置程序的语言): 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 providers: [ &#123; provide: APP_INITIALIZER, useFactory: appInitializerFactory, deps: [TranslateService, Injector], multi: true &#125; ], export function appInitializerFactory(translate: TranslateService, injector: Injector) &#123; return () =&gt; new Promise&lt;any&gt;((resolve: any) =&gt; &#123; const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null)); locationInitialized.then(() =&gt; &#123; translate.addLangs([&apos;en&apos;,&apos;zh&apos;]); // Set defaultLang to en translate.setDefaultLang(&apos;en&apos;); const pathName = window.location.pathname; const urlLang = getLangFromPath(pathName); // Get default browser language // const browserLang = translate.getBrowserLang(); const langToSet = urlLang.match(/en|zh/)? urlLang: &apos;en&apos;; translate.use(langToSet).subscribe(() =&gt; &#123; console.info(`Successfully initialized &apos;$&#123;langToSet&#125;&apos; language.&apos;`); &#125;, err =&gt; &#123; console.error(`Problem with &apos;$&#123;langToSet&#125;&apos; language initialization.&apos;`); &#125;, () =&gt; &#123; resolve(null); &#125;); &#125;); &#125;);&#125;/** * * @param pathName, &apos;/&apos; or &apos;/zh&apos; or &apos;/zh/tools/mower/rlm1-repair-tool&apos; */function getLangFromPath(pathName: string): string &#123; const slashIndex = pathName.indexOf(&quot;/&quot;,1); if (slashIndex == -1) &#123; return pathName.substring(1, pathName.length) &#125; return pathName.substring(1, slashIndex);&#125; 3.跟随浏览器的语言去改变 Web APP 的语言12345678constructor(private translate: TranslateService, private router: Router) &#123; translate.addLangs([&apos;en&apos;, &apos;de&apos;, &apos;zh&apos;]) translate.setDefaultLang(&apos;en&apos;); const browerCurLang = translate.getBrowserCultureLang(); const browerLang = translate.getBrowserLang(); translate.use(browerLang.match(/en|de|zh/)? browerLang: &apos;en&apos;); &#125; 6.复数形式的处理","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"学习 Shell Script","slug":"ShellScript_Learn","date":"2020-02-02T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2020/02/02/ShellScript_Learn/","link":"","permalink":"http://desirepaths.github.io/2020/02/02/ShellScript_Learn/","excerpt":"学习 Shell script .","text":"学习 Shell script . 1.参考2.导入其它的 Script 文件.3.Demo 1.参考 1.Linux Tutorial 2.Bash Scripting Tutorial 3.A shell script which turns your Mac into an awesome web development machine 2.导入其它的 Script 文件.123456#!/bin/sh#[How best to include other scripts?](https://stackoverflow.com/questions/192292/how-best-to-include-other-scripts)my_dir=&quot;$(dirname &quot;$0&quot;)&quot;&quot;$my_dir/other_script.sh&quot; 3.Demo 1.打印 Bash 的版本号 12$ echo $BASH_VERSION3.2.57(1)-release 2.只读属性 1readonly var 1.Demo 1检查 file 是否存在 12345678910111213141516171819usage() &#123; echo &quot;You need to provide an argumennt:&quot; echo &quot;usage: $0 file_name&quot;&#125;is_file_exist() &#123; local file=&quot;$1&quot; [[ -f &quot;$file&quot; ]] &amp;&amp; return 0 || return 1&#125;## 如果是 0， 即没有参数输入的情况，就执行后面的 usage.[[ $# -eq 0 ]] &amp;&amp; usage## 如果返回 0 ， 就代表找到了 file.if ( is_file_exist &quot;$1&quot; )then echo &quot;File found&quot;else echo &quot;File not found&quot;fi 2.方法的返回值 方法的返回值会保存在 $? 中，而且 $? 一旦获取过一次后，就会自动变为 0. 0.参考: Returning from a function 1.用 $? 1234567891011function test_return() &#123; sum=$(($1 + $2)) return $sum&#125;echo &quot;(before)test_return:$?&quot;test_return 1 2echo &quot;test_return:$?&quot;test_return 3 4echo &quot;test_return:$?&quot; 2.返回 string 123456789101112131415161718192021222324domain=&quot;CyberCiti.BIz&quot;out=&quot;&quot;################################################################### Purpose: Converts a string to lower case# Arguments:# $@ -&gt; String to convert to lower case##################################################################function to_lower()&#123; local str=&quot;$@&quot; local output output=$(tr &apos;[A-Z]&apos; &apos;[a-z]&apos;&lt;&lt;&lt;&quot;$&#123;str&#125;&quot;) echo $output&#125;# invoke the to_lower()to_lower &quot;This Is a TEST&quot;# invoke to_lower() and store its result to $out variableout=$(to_lower $&#123;domain&#125;)# Display back the result from $outecho &quot;Domain name : $out&quot; 1.PID 相关.1.打印 pid1#echo &quot;pid is $$&quot; 2.kill pid 所在的程序.1$ kill -9 pid 2.Debug 的方法* 1.在运行的时候添加 bash -x 命令, 如1$ bash -x ./file_name * 2.在文件的头部添加 -x, 如1#!/bin/bash -x * 3.或者在文件的中部位置添加 set -x , set +x 如:1234567echo &quot;1&quot;set -xecho &quot;2&quot;echo &quot;3&quot;echo &quot;4&quot;set +xecho &quot;5&quot; 3.与或操作命令符 What is the purpose of “&amp;&amp;” in a shell command? 1234567891011121314151617# command_1 &amp;&amp; command_2: execute command_2 only when command_1 is executed successfully.# command_1 || command_2: execute command_2 only when command_1 is not successful executed.$ false || echo &quot;Oops, fail&quot;Oops, fail$ true || echo &quot;Will not be printed&quot;$ $ true &amp;&amp; echo &quot;Things went well&quot;Things went well$ false &amp;&amp; echo &quot;Will not be printed&quot;$$ false ; echo &quot;This will always run&quot;This will always run 4.判断用户是否是 root1234567# Purpose: Determine if current user is root or notis_root_user()&#123; # root user has user id (UID) zero. [ $(id -u) -eq 0 ] &amp;&amp; return $TRUE || return $FALSE&#125;is_root_user &amp;&amp; echo &quot;You can run this script.&quot; || echo &quot;You need to run this script as a root user.&quot; 5.判断 True of False 1.参考:How does bash test ‘false’? 123456789declare -r TRUE=truedeclare -r FALSE=falseif [ $TRUE = true ]then echo &quot;TRUE&quot;else echo &quot;FALSE&quot;fi 1.-eq 是判断 数字类型的, = 判断 string 类型 12345678910declare -r five=05declare -r siz=06if [[ $five -eq 5 ]]; then echo &quot;equal&quot;; else echo &quot;nope&quot;; fi# print: equalif [[ $five -eq 6 ]]; then echo &quot;equal&quot;; else echo &quot;nope&quot;; fi# print: nopeif [[ $five = 5 ]]; then echo &quot;equal&quot;; else echo &quot;nope&quot;; fi# print: nopeif [[ $five = 6 ]]; then echo &quot;equal&quot;; else echo &quot;nope&quot;; fi# print: nope 2.while 判断 1234567flag=1while ((flag))do read x [ &quot;$x&quot; == &quot;true&quot; ] &amp;&amp; flag=0 echo &quot;$&#123;x&#125; : $&#123;flag&#125;&quot;done 3.数字 1234567891011declare -r TRUE=0declare -r FALSE=1condition=$TRUEif [[ $condition -eq $TRUE ]]then echo &quot;true&quot;else echo &quot;false&quot;fi","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"Powershell 的用法","slug":"Power-shell-usage","date":"2019-12-29T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/12/29/Power-shell-usage/","link":"","permalink":"http://desirepaths.github.io/2019/12/29/Power-shell-usage/","excerpt":"记录 Mac 上 Powershell 的安装及使用","text":"记录 Mac 上 Powershell 的安装及使用 1.参考2.Mac 安装 Powershell3.Powershell 使用 1.参考 1.Installing PowerShell Core on macOS 2.Multiple foreground colors in PowerShell in one command 3.Run PowerShell 脚本 2.Mac 安装 Powershell123456// install PowerShell from brew.brew cask install powershell// 进入 Powershellpwsh// 退出 Powershellexit 3.Powershell 使用 1.输出 1Write-Host &quot;Blue&quot; -ForegroundColor Blue 2.退出 1exit 0 3.方法 123456789101112131415// 无参function listAllExchange &#123;&#125;listAllExchange// 一个参数function customEchoRed($message) &#123; Write-Host $message -ForegroundColor Red&#125;customEchoRed(&quot;abc&quot;)// 多个参数function executeCommand($message, $rabbit_mq_command)&#123;&#125;executeCommand &quot;List all exchanges&quot; &quot;rabbitmqadmin list exchanges&quot;","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"RabbitMQ 安装及使用","slug":"Rabbitmq_install_usage","date":"2019-12-26T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/12/26/Rabbitmq_install_usage/","link":"","permalink":"http://desirepaths.github.io/2019/12/26/Rabbitmq_install_usage/","excerpt":"RabbitMQ 的使用方法","text":"RabbitMQ 的使用方法 1.参考2.Mac 安装过程3.使用4.命令行创建 exchange, queue, binding 1.参考 0.RabbitMQ 1.Github rabbitmq/rabbitmq-tutorials 2.rabbitmqctl(8) 3.How do I create or add a user to rabbitmq? 2.Mac 安装过程 1.更新 brew 1brew update 2.安装 RabbitMQ server 123brew install rabbitmq// 可能要等待很久，建议 brew 换成国内的源.// 如果 vpn 不稳定，建议不要使用 vpn. 3.添加 rabbitmq/sbin 路径到 PATH 中 123456$cd ~$vi .bash_profile// 添加下面的一行到 .bash_profile 中.export PATH=$PATH:/usr/local/opt/rabbitmq/sbin$ echo $PATH/usr/local/opt/rabbitmq/sbin 4.安装完成后，如果需要查看管理台，需要下面命令去开启 1$rabbitmq-plugins enable rabbitmq_management 3.使用 1.Server 端开启， terminal 输入 : rabbitmq-server 2.客户端开启: 运行程序. 4.命令行创建 exchange, queue, binding 1.有 命令行 和 rest api 两种方法.我们这里讲解 命令行的用法2.如果是 Windows 系统的话，需要安装 python , 而且要在命令的前面添加 python rabbitmqadmin ... 这样， rabbitmqadmin 从 localhost:15672 上下载，然后放置到当前运行的目录下面. 1.参考 1.How to create an exchange using rabbitmqctl 2.Management Command Line Tool 3.Management Command Line Tool 2.主要的命令有 0.帮助 12$$:RPCClient glb_gz$ rabbitmqadmin --help$$:RPCClient glb_gz$ rabbitmqadmin help subcommands 1.定义及列出所有的 exchanges 1234567891011121314151617$$:RPCClient glb_gz$ rabbitmqadmin declare exchange name=custom-exchange type=fanoutexchange declared$$:RPCClient glb_gz$ rabbitmqadmin list exchanges+--------------------+---------+| name | type |+--------------------+---------+| | direct || amq.direct | direct || amq.fanout | fanout || amq.headers | headers || amq.match | headers || amq.rabbitmq.trace | topic || amq.topic | topic || custom-exchange | fanout || my-new-exchange | fanout || test | fanout |+--------------------+---------+ 2.定义及列出所有的 queues 1234567891011$$:RPCClient glb_gz$ rabbitmqadmin declare queue name=custom-queue durable=falsequeue declared$$:RPCClient glb_gz$ rabbitmqadmin list queues+--------------+----------+| name | messages |+--------------+----------+| custom-queue | 0 || my-new-queue | 0 || task_queue | 0 || test | 0 |+--------------+----------+ 3.绑定 exchange 与 binding ,并且显示 123456789101112$$:~ glb_gz$ rabbitmqadmin declare binding source=custom-exchange destination=custom-queuebinding declared$$:~ glb_gz$ rabbitmqadmin list bindings+-----------------+--------------+--------------+| source | destination | routing_key |+-----------------+--------------+--------------+| | custom-queue | custom-queue || | my-new-queue | my-new-queue || | task_queue | task_queue || | test | test || custom-exchange | custom-queue | |+-----------------+--------------+--------------+ 4.发布与接收 message 12345678$$:~ glb_gz$ rabbitmqadmin publish exchange=custom-exchange routing_key=&quot;&quot; payload=&quot;test 123&quot;Message published$$:~ glb_gz$ rabbitmqadmin get queue=custom-queue ackmode=ack_requeue_false+--------------+----------+---------------+----------+---------------+------------------+------------+-------------+| routing_key | exchange | message_count | payload | payload_bytes | payload_encoding | properties | redelivered |+--------------+----------+---------------+----------+---------------+------------------+------------+-------------+| custom-queue | | 2 | test 123 | 8 | string | | False |+--------------+----------+---------------+----------+---------------+------------------+------------+-------------+ 5.显示概况 123456$$:~ glb_gz$ rabbitmqadmin show overview+------------------+----------------------------+-----------------------+----------------------+| rabbitmq_version | cluster_name | queue_totals.messages | object_totals.queues |+------------------+----------------------------+-----------------------+----------------------+| 3.8.2 | rabbit@$$ | 2 | 4 |+------------------+----------------------------+-----------------------+----------------------+ 3.连接远程 rabbitmq server 去完成上面的命令 因为默认的 guest 用户不能远程访问，所以需要创建一个新的用户去完成这个操作 0.创建用户 12345678// 添加用户rabbitmqctl add_user glb_user xxx// 设置权限rabbitmqctl set_permissions -p / glb_user &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;// 设置标签rabbitmqctl set_user_tags tian administrator// 查看rabbitmqctl list_users 1.运行 rabbitmqadmin --help 可以看到远程连接的命令 123456789101112131415161718192021222324$$ rabbitmqadmin --helpUsage===== rabbitmqadmin [options] subcommandOptions=======--help, -h show this help message and exit--config=CONFIG, -c CONFIG configuration file [default: ~/.rabbitmqadmin.conf]--node=NODE, -N NODE node described in the configuration file [default: &apos;default&apos; only if configuration file is specified]--host=HOST, -H HOST connect to host HOST [default: localhost]--port=PORT, -P PORT connect to port PORT [default: 15672]--path-prefix=PATH_PREFIX use specific URI path prefix for the RabbitMQ HTTP API. /api and operation path will be appended to it. (default: blank string) [default: ]--vhost=VHOST, -V VHOST connect to vhost VHOST [default: all vhosts for list, &apos;/&apos; for declare]--username=USERNAME, -u USERNAME connect using username USERNAME [default: guest]--password=PASSWORD, -p PASSWORD 2.例子 123456789// 需要远程计算机 192.168.1.2 先关闭防火墙 !!!rabbitmqadmin -H 192.168.1.2 -u glb_user -p xxx list vhosts// 发布消息rabbitmqadmin -H 192.168.1.2 -u glb_user -p xxx publish exchange=log_direct routing_key=&quot;rule_engine&quot; payload=&quot;log rule engine, from mac 1&quot;// 取得消息rabbitmqadmin -H 192.168.1.2 -u glb_user -p xxx get queue=log_rule_engine_queue ackmode=ack_requeue_false// No messagerabbitmqadmin -H 192.168.1.2 -u glb_user -p xxx get queue=log_message_parser_queue ackmode=ack_requeue_false","categories":[{"name":"data","slug":"data","permalink":"http://desirepaths.github.io/categories/data/"}],"tags":[{"name":"data","slug":"data","permalink":"http://desirepaths.github.io/tags/data/"}]},{"title":"Protocol Buffer 的学习过程","slug":"ProtocolBuffer_Learn","date":"2019-12-23T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/12/23/ProtocolBuffer_Learn/","link":"","permalink":"http://desirepaths.github.io/2019/12/23/ProtocolBuffer_Learn/","excerpt":"记录 protocol 的用法.","text":"记录 protocol 的用法. 1.参考2.protocol buffer 定义及数据的保存形式3.C#例子 1.参考 0.Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data. 1.Mac下ProtocolBuffer的安装和编译 2.Protocol Buffer Basics: C# 3.Protocol Buffer Basics: Java 4.Android Protobuf Tutorial with example app 2.protocol buffer 定义及数据的保存形式 1.proto 文件的定义 123456789syntax = &quot;proto3&quot;;package tutorial;message Person &#123; string name = 1; int32 id = 2; string email = 3; string phone = 4;&#125; 2.数据的显示 12345678Person.Builder person = Person.newBuilder(); person.setEmail(&quot;wyzjtian@163.com&quot;); person.setId(11); person.setName(&quot;Tian&quot;); person.setPhone(&quot;12345678&quot;); // 真实的数据为: 10,4,84,105,97,110,16,11,26,16,119,121,122,106,116,105,97,110,64,49,54,51,46,99,111,109,34,8,49,50,51,52,53,54,55,56, byte[] data = person.build().toByteArray(); 3.C#例子 1.新建一个 proto 文件, 并且写入所需要的协议. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// See README.txt for information and build instructions.//// Note: START and END tags are used in comments to define sections used in// tutorials. They are not part of the syntax for Protocol Buffers.//// To get an in-depth walkthrough of this file and the related examples, see:// https://developers.google.com/protocol-buffers/docs/tutorials// [START declaration]syntax = &quot;proto3&quot;;package tutorial;//import &quot;google/protobuf/timestamp.proto&quot;;// [END declaration]// [START java_declaration]option java_package = &quot;com.example.tutorial&quot;;option java_outer_classname = &quot;AddressBookProtos&quot;;// [END java_declaration]// [START csharp_declaration]option csharp_namespace = &quot;Google.Protobuf.Examples.AddressBook&quot;;// [END csharp_declaration]// [START messages]message Person &#123; string name = 1; int32 id = 2; // Unique ID number for this person. string email = 3; enum PhoneType &#123; MOBILE = 0; HOME = 1; WORK = 2; &#125; message PhoneNumber &#123; string number = 1; PhoneType type = 2; &#125; repeated PhoneNumber phones = 4; //google.protobuf.Timestamp last_updated = 5;&#125;// Our address book file is just one of these.message AddressBook &#123; repeated Person people = 1;&#125;// [END messages] 2.编译 proto 文件，得出一个 cs 文件(需要先安装一个 protoc 编译器). 1protoc --csharp_out=. ./addressbook.proto 3.在项目中导入 Google.Protobuf nuget 包, 这个包是对 proto 生成文件的解析. 4.在项目中应用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465using System;using System.IO;using Google.Protobuf;using Google.Protobuf.Examples.AddressBook;namespace ProtocolBufferTest&#123; class Program &#123; static void Main(string[] args) &#123; Console.WriteLine(&quot;Start!&quot;); AddressBook addressBook; string addressBookFile = &quot;addressbook.data&quot;; // Get the Address book if (File.Exists(addressBookFile)) &#123; using (Stream file = File.OpenRead(addressBookFile)) &#123; addressBook = AddressBook.Parser.ParseFrom(file); &#125; &#125; else &#123; Console.WriteLine(&quot;&#123;0&#125;: File not found. Creating a new file.&quot;, addressBookFile); addressBook = new AddressBook(); &#125; Person person = new Person(); person.Name = &quot;Tian&quot;; person.Id = 1; person.Email = &quot;Abc@123.com&quot;; // Add an address addressBook.People.Add(person); // Write the new address book back to disk. using (Stream output = File.OpenWrite(addressBookFile)) &#123; addressBook.WriteTo(output); &#125; // Read the existing address book. using (Stream stream = File.OpenRead(addressBookFile)) &#123; AddressBook addressBookRead = AddressBook.Parser.ParseFrom(stream); Print(addressBookRead); &#125; &#125; private static void Print(AddressBook addressBook) &#123; foreach (Person person in addressBook.People) &#123; Console.WriteLine(person.Id); Console.WriteLine(person.Name); Console.WriteLine(person.Email); &#125; &#125; &#125;&#125;","categories":[{"name":"data","slug":"data","permalink":"http://desirepaths.github.io/categories/data/"}],"tags":[{"name":"data","slug":"data","permalink":"http://desirepaths.github.io/tags/data/"}]},{"title":"Homebrew 的源配置","slug":"HomeBrew_setup","date":"2019-12-22T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/12/22/HomeBrew_setup/","link":"","permalink":"http://desirepaths.github.io/2019/12/22/HomeBrew_setup/","excerpt":"记录 Mac 下设置 Homebrew 源的过程.","text":"记录 Mac 下设置 Homebrew 源的过程. 1.参考 1.(Homebrew有比较快的源（mirror）吗？ - 剑微寒的回答 - 知乎 2.Mac HomeBrew国内镜像安装方法 3.替换及重置Homebrew默认源 2.替换源过程 1.替换 brew.git 12345678910111213141516// 清理 代理$:homebrew-core glb_gz$ noproxyclear proxy donecd &quot;$(brew --repo)&quot;$:Homebrew glb_gz$ pwd/usr/local/Homebrew// 替换前$:Homebrew glb_gz$ git remote get-url originhttps://github.com/Homebrew/brew// 替换$:Homebrew glb_gz$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git// 替换后$:Homebrew glb_gz$ git remote get-url originhttps://mirrors.ustc.edu.cn/brew.git$:homebrew-core glb_gz$ brew updateAlready up-to-date. 2.替换 homebrew-core.git 123456789101112131415// 清理 代理$:homebrew-core glb_gz$ noproxyclear proxy done$:Homebrew glb_gz$ cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;$:homebrew-core glb_gz$ pwd/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core// 替换前$:homebrew-core glb_gz$ git remote get-url origin https://github.com/Homebrew/homebrew-core//替换后$:homebrew-core glb_gz$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git$:homebrew-core glb_gz$ git remote get-url origin https://mirrors.ustc.edu.cn/homebrew-core.git$:homebrew-core glb_gz$ brew updateAlready up-to-date.","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"Windows BLE 开发","slug":"Windows_BLE_Develop","date":"2019-12-02T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/12/02/Windows_BLE_Develop/","link":"","permalink":"http://desirepaths.github.io/2019/12/02/Windows_BLE_Develop/","excerpt":"记录 Windows 平台开发 BLE Application 的过程","text":"记录 Windows 平台开发 BLE Application 的过程 1.Windows BLE 开发资料.2.USB BLE 扩展3.检查 PC 是否支持蓝牙4.硬件要求5.开发步骤6.问题 1.Windows BLE 开发资料. 1.Windows-universal-samples/Samples/BluetoothLE/ 4.Windows 8.1 低功耗蓝牙开发 5.Bluetooth GATT Client 6.How to register for BLE notifcations from a WPF app running on Windows 10 Creators Update? 7.nRF Connect for Desktop 8.NordicSemiconductor/pc-nrfconnect-ble 9.BluetoothLEExplorer 1.Windows Download 2.Windows microsoft/BluetoothLEExplorer source code 2.USB BLE 台式机没有蓝牙硬件，可以买个 USB BLE 芯片去扩展这个功能. 1. 奥睿科（ORICO）USB蓝牙适配器4.0接收器兼容4.1/4.2/5.0电脑手机耳机音频发射器 黑色-次日达 3.检查 PC 是否支持蓝牙 1.How to check if your PC supports Bluetooth 4.0 2.How to check Bluetooth Adapter version in Windows 10 4.硬件要求 1.Windows 10 1.Windows 8.1 只支持 Client,为了扩展的需要，最好是用 Windows 10 2.电脑带有 BLE 的支持 1.去 “设备管理器”-&gt;蓝牙，查看下面的列表，如果里面有“Microsoft Bluetooth LE 枚举器”, 就代表是支持的. 1.如果没有看到 Microsoft Bluetooth LE 枚举器, 去“设置”-&gt;“更改电脑设置”-&gt;“电脑和设备”-&gt;“蓝牙”中，把蓝牙打开. 如果也没有，就证明电脑的硬件不支持 BLE 或 需要去更新系统和蓝牙驱动. 5.开发步骤1.检查蓝牙的状态: 1.Universal Windows Platform (UWP) 程序 123456789101112131415Windows.Devices.Bluetooth.BluetoothAdapter adapter = await Windows.Devices.Bluetooth.BluetoothAdapter.GetDefaultAsync(); if(adapter == null) &#123; MessageDialog msg = new MessageDialog(&quot;Error getting access to Bluetooth adapter. Do you have a have bluetooth enabled?&quot;, &quot;Error&quot;); await msg.ShowAsync(); IsPeripheralRoleSupported = false; IsCentralRoleSupported = false; &#125; else &#123; IsPeripheralRoleSupported = adapter.IsPeripheralRoleSupported; IsCentralRoleSupported = adapter.IsCentralRoleSupported; &#125; 2.Windows Forms WPF 程序 123456789/** * [How to check if bluetooth is enabled on a device](https://stackoverflow.com/a/48794678) * **/ public bool GetBluetoothIsEnable() &#123; SelectQuery sq = new SelectQuery(&quot;SELECT DeviceId FROM Win32_PnPEntity WHERE service=&apos;BthLEEnum&apos;&quot;); ManagementObjectSearcher searcher = new ManagementObjectSearcher(sq); return searcher.Get().Count &gt; 0; &#125; 2.开始扫描:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455if (ApiInformation.IsApiContractPresent(&quot;Windows.Foundation.UniversalApiContract&quot;, 5)) &#123; string[] requestedProperties = &#123; &quot;System.Devices.GlyphIcon&quot;, &quot;System.Devices.Aep.Category&quot;, &quot;System.Devices.Aep.ContainerId&quot;, &quot;System.Devices.Aep.DeviceAddress&quot;, &quot;System.Devices.Aep.IsConnected&quot;, &quot;System.Devices.Aep.IsPaired&quot;, &quot;System.Devices.Aep.IsPresent&quot;, &quot;System.Devices.Aep.ProtocolId&quot;, &quot;System.Devices.Aep.Bluetooth.Le.IsConnectable&quot;, &quot;System.Devices.Aep.SignalStrength&quot;, &quot;System.Devices.Aep.Bluetooth.LastSeenTime&quot;, &quot;System.Devices.Aep.Bluetooth.Le.IsConnectable&quot;, &#125;; // BT_Code: Currently Bluetooth APIs don&apos;t provide a selector to get ALL devices that are both paired and non-paired. deviceWatcher = DeviceInformation.CreateWatcher( BTLEDeviceWatcherAQSString, requestedProperties, DeviceInformationKind.AssociationEndpoint); &#125; else &#123; string[] requestedProperties = &#123; &quot;System.Devices.GlyphIcon&quot;, &quot;System.Devices.Aep.Category&quot;, &quot;System.Devices.Aep.ContainerId&quot;, &quot;System.Devices.Aep.DeviceAddress&quot;, &quot;System.Devices.Aep.IsConnected&quot;, &quot;System.Devices.Aep.IsPaired&quot;, &quot;System.Devices.Aep.IsPresent&quot;, &quot;System.Devices.Aep.ProtocolId&quot;, &quot;System.Devices.Aep.Bluetooth.Le.IsConnectable&quot;, &quot;System.Devices.Aep.SignalStrength&quot;, &#125;; // BT_Code: Currently Bluetooth APIs don&apos;t provide a selector to get ALL devices that are both paired and non-paired. deviceWatcher = DeviceInformation.CreateWatcher( BTLEDeviceWatcherAQSString, requestedProperties, DeviceInformationKind.AssociationEndpoint); &#125; // Register event handlers before starting the watcher. deviceWatcher.Added += DeviceWatcher_Added; deviceWatcher.Updated += DeviceWatcher_Updated; deviceWatcher.Removed += DeviceWatcher_Removed; deviceWatcher.EnumerationCompleted += DeviceWatcher_EnumerationCompleted; deviceWatcher.Stopped += DeviceWatcher_Stopped; deviceWatcher.Start(); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950private void DeviceWatcher_Added(DeviceWatcher sender, DeviceInformation deviceInfo) &#123; try &#123; // Protect against race condition if the task runs after the app stopped the deviceWatcher. if (sender == deviceWatcher) &#123; &#125; &#125; catch (Exception ex) &#123; Debug.WriteLine(&quot;DeviceWatcher_Added: &quot; + ex.Message); &#125; &#125; private void DeviceWatcher_Updated(DeviceWatcher sender, DeviceInformationUpdate deviceInfoUpdate) &#123; if (sender == deviceWatcher) &#123; // Debug.WriteLine(String.Format(&quot;Updated &#123;0&#125;&#123;1&#125;&quot;, deviceInfoUpdate.Id, &quot;&quot;)); &#125; &#125; private void DeviceWatcher_Removed(DeviceWatcher sender, DeviceInformationUpdate deviceInfoUpdate) &#123; if (sender == deviceWatcher) &#123; // Debug.WriteLine(String.Format(&quot;DeviceWatcher_Removed &#123;0&#125;&#123;1&#125;&quot;, deviceInfoUpdate.Id, &quot;&quot;)); &#125; &#125; private void DeviceWatcher_EnumerationCompleted(DeviceWatcher sender, object e) &#123; if (sender == deviceWatcher) &#123; Debug.WriteLine(String.Format(&quot;DeviceWatcher_EnumerationCompleted&quot;)); &#125; &#125; private void DeviceWatcher_Stopped(DeviceWatcher sender, object e) &#123; if (sender == deviceWatcher) &#123; Debug.WriteLine(String.Format(&quot;DeviceWatcher_Stopped&quot;)); &#125; &#125; 3.连接4.查看 Services5.查看 Characteristics and set notifications6.Write data to Specific Characteristics 6.问题 1.在 References 里不见了 Windows 的 Tab 1.解决方法: 1.How to call Windows.Devices.Bluetooth in WPF app RRS feed 2.在 csproj 处添加 &lt;TargetPlatformVersion&gt;10.0&lt;/TargetPlatformVersion&gt; 2.出现 未能使用“通用身份验证”连接到设备“127.0.0.1” 问题, 详细如下: 1.未能使用“通用身份验证”连接到设备“127.0.0.1”。请验证项目调试设置中指定了正确的远程身份验证模式。COMException - 由于目标计算机积极拒绝，无法连接。 2.解决方法, 因为是在本地计算机运行，所以要选择 CPU 架构为 X86 or X64 3.出现项目点击运行,老是跳过的问题 1.解决方法:右键 Visual Studio 2019, 以管理员方式运行.","categories":[{"name":"BLE","slug":"BLE","permalink":"http://desirepaths.github.io/categories/BLE/"}],"tags":[{"name":"BLE","slug":"BLE","permalink":"http://desirepaths.github.io/tags/BLE/"}]},{"title":"电脑与 手机 通过 USB 进行数据传输","slug":"PC-Phone-data-transfer","date":"2019-11-27T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/11/27/PC-Phone-data-transfer/","link":"","permalink":"http://desirepaths.github.io/2019/11/27/PC-Phone-data-transfer/","excerpt":"电脑 与 手机 通过 USB 进行数据传输","text":"电脑 与 手机 通过 USB 进行数据传输 1.参考2.过程(电脑Windows/手机iOS)3.过程(手机 iOS Xamarin语言 版本) 1.参考 1.iOS and MAC(经过验证可以用) 1.kirankunigiri/peertalk-simple (Mac iOS 传输其它的数据 2.Windows/iOS(Xamarin) 客户端(Communicating with your iOS app over USB (C# and/or Xamarin)) 3.使用usbmuxd服务，通过USB连接与PC端、Mac端实现通信，Peertalk的使用 4.探讨使用USB线缆与iOS App通信的小笔记 5.iOS 与 Windows 的连接 6.libimobiledevice(libimobiledevice.1.2.1-r857-win-x64.zip) 的使用视频 7.Windows libimobiledevice-win32/imobiledevice-net 用法示例程序 8.iMobileDevice API Documentation 9.iOS App连接外设的几种方式 2.过程(电脑Windows 版本)1.Windows 安装并启动 usbmuxd service 服务 1.方法1.安装 iTunes 即会自动带有 2.方法2. 直接下载 iTunes.exe, 然后解压，得到 AppleMobileDeviceSupport64.msi 文件，双击安装即会安装 usbmuxd service. 2.Windows 项目 导入 imobiledevice-net nuget 库3.数据交互 1.监听变化 123456789101112131415161718192021NativeLibraries.Load();var _iDeviceApi = LibiMobileDevice.Instance.iDevice;var ret = _iDeviceApi.idevice_event_subscribe(EventCallback(), new IntPtr());private iDeviceEventCallBack EventCallback()&#123; return (ref iDeviceEvent devEvent, IntPtr data) =&gt; &#123; Debug.WriteLine(&quot;EventCallback() iDeviceEvent&quot;); switch (devEvent.@event) &#123; case iDeviceEventType.DeviceAdd: Connect(devEvent.udidString); break; case iDeviceEventType.DeviceRemove: break; default: return; &#125; &#125;;&#125; 2.连接 1234567private void Connect(string newUdid)&#123; _iDeviceApi.idevice_new(out iDeviceHandle deviceHandle, newUdid).ThrowOnError(); var error =_iDeviceApi.idevice_connect(deviceHandle, 5050, out iDeviceConnectionHandle connection); if (error != iDeviceError.Success) return; ReceiveDataFromDevice(connection);&#125; 3.接收数据 1234567891011121314private void ReceiveDataFromDevice(iDeviceConnectionHandle connection)&#123; Task.Run(() =&gt; &#123; while (true) &#123; uint receivedBytes = 0; _iDeviceApi.idevice_connection_receive(connection, _inboxBuffer, (uint)_inboxBuffer.Length, ref receivedBytes); if (receivedBytes &lt;= 0) continue; // Do something with your received bytes &#125; &#125;);&#125; 4.发送数据 1_iDeviceApi.idevice_connection_send(connection, bytesPending, (uint)bytesPending.Length, ref sentBytes) 3.过程(手机 iOS Xamarin语言 版本)1.参考: 1.Walkthrough: Binding an iOS Objective-C Library 2.Create a Static Library in Xcode 3.iOS 静态库Framework、static Library(.a )、Bundle的浅析与制作 4.Possible to use Xamarin with iOS - OSX communication over USB? Works in native… 2.有两种方法1.用 Peertalk 的 Object-C 库，生成 .a 静态库, 然后再用 Xamarin 的 Creating Bindings with Objective Sharpie. 1.把 Peertalk Object-C 代码生成 .a 库 2.建立 Bindings with Objective Sharpie Project, 导入相关的 .h 文件 和 .a 库. 3.在 Xamarin 项目中调用 .a 库的接口，完成 USB 数据交流的功能. 2.直接了解 Peertalk 的 USB 通讯原理，然后用 Xamarin 实现.12345678910111213141516171819202122232425var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Loopback, 5050)); socket.Listen(100); socket.BeginAccept((ar) =&gt; &#123; var connectionAttempt = (Socket) ar.AsyncState; var connectedSocket = connectionAttempt.EndAccept(ar); // Do something with &quot;connectedSocket&quot; // Data send connectedSocket.Send(bytesSent, bytesSent.Length, 0); // Data Received do &#123; bytes = connectedSocket.Receive(bytesReceived, bytesReceived.Length, 0); if (bytes &lt;= 0 ) continue; &#125; while (true); &#125;, socket);","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"Angular 模拟数据服务器","slug":"Angular_ simulate_data_server","date":"2019-11-24T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/11/24/Angular_ simulate_data_server/","link":"","permalink":"http://desirepaths.github.io/2019/11/24/Angular_ simulate_data_server/","excerpt":"angular-in-memory-web-api 可以模拟后端返回的数据, 达到快速开发的目的.","text":"angular-in-memory-web-api 可以模拟后端返回的数据, 达到快速开发的目的. 1.参考2.过程 1.参考 1.Angular.cn 模拟数据服务器 2.angular/in-memory-web-api 3.例子 2.过程 1.安装 123npm install angular-in-memory-web-api --save# 生成 service 类ng generate service InMemoryData 2.在 module 中配置 1234567imports: [ HttpClientModule, // 如果是 prod 环境，自动用真实的 Http 请求代替. environment.production ? [] : HttpClientInMemoryWebApiModule.forRoot(InMemHeroService) ...] 3.可以多个 URL mock data. 4.URL 可以是自定义的,Default parseRequestUrl 1234567#在 module 中配置，如配置为 HttpClientInMemoryWebApiModule.forRoot( InMemoryDataService, &#123; dataEncapsulation: false, apiBase: &apos;a/b/c/&apos;&#125; ) # 则 URL 可定义为: private heroesUrl = &apos;/api/value/get/heroes&apos; ; // URL to web api","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"Angular Material design","slug":"Angular_Material_design","date":"2019-11-24T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/11/24/Angular_Material_design/","link":"","permalink":"http://desirepaths.github.io/2019/11/24/Angular_Material_design/","excerpt":"1.参考2.使用方法","text":"1.参考2.使用方法 1.参考 1.Material design 2.如果你不熟悉Material Design，请一口吃下这篇干货！ 3.Angular Material 2.使用方法 1.","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"NodePackageManager(NPM) 的设置","slug":"npm设置","date":"2019-09-05T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/09/05/npm设置/","link":"","permalink":"http://desirepaths.github.io/2019/09/05/npm设置/","excerpt":"配置 npm 的源","text":"配置 npm 的源 1.参考 1.淘宝 NPM 镜像 2.npm 淘宝镜像配置 2.过程 1.切换源(官方源 淘宝源) 1234567891011# npm 官方源npm set registry https://registry.npmjs.org/# 淘宝源# 注册模块镜像npm set registry https://r.npm.taobao.org# 注册模块镜像npm set disturl https://npm.taobao.org/dist# 清空缓存npm cache clean --force 2.查看源 1234567891011121314151617$ npm config list; cli configsmetrics-registry = &quot;https://r.npm.taobao.org/&quot;scope = &quot;&quot;user-agent = &quot;npm/6.9.0 node/v12.6.0 darwin x64&quot;; userconfig /Users/glb_gz/.npmrcdisturl = &quot;https://npm.taobao.org/dist&quot;registry = &quot;https://r.npm.taobao.org/&quot;; builtin config undefinedprefix = &quot;/usr/local&quot;; node bin location = /usr/local/Cellar/node/12.6.0/bin/node; cwd = /Users/glb_gz/Documents/Angular_workplace/Github/ng-zorro-antd; HOME = /Users/glb_gz; &quot;npm config ls -l&quot; to show all defaults. 3.错误处理 1.","categories":[{"name":"node","slug":"node","permalink":"http://desirepaths.github.io/categories/node/"}],"tags":[{"name":"node","slug":"node","permalink":"http://desirepaths.github.io/tags/node/"}]},{"title":"Angular 动态配置环境","slug":"Angular_动态配置环境","date":"2019-08-24T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/08/24/Angular_动态配置环境/","link":"","permalink":"http://desirepaths.github.io/2019/08/24/Angular_动态配置环境/","excerpt":"免 rebuild 配置环境的过程.","text":"免 rebuild 配置环境的过程. 1.参考 1.How to use environment variables to configure your Angular application without a rebuild 1.Github: 213 4 jvandemo/angular-environment-variables-demo 2.Angular 2 / 4 change env variable after build 2.步骤 1.新建一个环境 javascript 文件,在 src/assets 目录下新建一个 env.js 文件，写入以下内容: 1234567891011(function (window) &#123; window.__env = window.__env || &#123;&#125;; // API url window.__env.apiUrl = &apos;http://dev.your-api.com&apos;; // Whether or not to enable debug mode // Setting this to false will disable console output window.__env.enableDebug = false;&#125;(this)); 2.把新建的文件导入到项目中,向 src/index.html 的 &lt;head&gt;&lt;/head&gt; 中导入新建的 env.js 文件，效果如下所示: 12345678910111213&lt;html ng-app=&quot;app&quot;&gt; &lt;head&gt; &lt;!-- Load environment variables --&gt; &lt;script src=&quot;assets/env.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; ... &lt;!-- Angular code is loaded here --&gt; &lt;/body&gt; &lt;/html&gt; 3.让 env.js 文件在 ng build 或 ng serve 中原样输出，需要在 angular.json 文件的 assets 下添加如下的代码,如 : 12345678910111213141516171819202122232425262728&#123; &quot;projects&quot;: &#123; &quot;app-name&quot;: &#123; &quot;architect&quot;: &#123; &quot;build&quot;: &#123; &quot;options&quot;: &#123; &quot;assets&quot;: [ &quot;src/favicon.ico&quot;, &quot;src/assets&quot;, &quot;src/assets/env.js&quot; ] &#125; &quot;configurations&quot;: &#123; &quot;production&quot;: &#123; &quot;fileReplacements&quot;: [ &#123; &quot;replace&quot;: &quot;src/environments/environment.ts&quot;, &quot;with&quot;: &quot;src/environments/environment.prod.ts&quot; &#125; ], // ... &#125; &#125; &#125; &#125; &#125; &#125;&#125; 4.在 environment.ts 中导入我们动态生成的值，如: 1234const key = &apos;__env&apos;;export const environment = &#123; canDebug: window[key].enableDebug || false, &#125; 5.然后即可在组件中使用，如: 1234// Componentexport class AppComponent implements OnInit &#123; devVersion = environment.appVersion + &apos;,&apos; + environment.canDebug;&#125; 12// templateUrl&lt;span class=&quot;version&quot; &gt;&#123;&#123;devVersion&#125;&#125;&lt;/span&gt; 6.然后动态改变 env.js 的值，网站的配置也会改变 1.这是 ng serve 的效果，ng build 后放到 nginx 的效果也一样的,而且不用重启 nginx 都可以看到环境的变化.","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"HTML + CSS 学习记录","slug":"H5学习","date":"2019-08-21T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/08/21/H5学习/","link":"","permalink":"http://desirepaths.github.io/2019/08/21/H5学习/","excerpt":"记录 H5 常用属性的使用方法","text":"记录 H5 常用属性的使用方法 1.参考2.居中3.HTML 项目中优化项设置 1.参考 1.W3schools.com 2.MDN web docs 3.元素在浏览器中默认的值 4.position 位置摆放的使用 5.block，inline和inline-block概念和区别 6.What is the difference between display: inline and display: inline-block? 7.Centering in the Unknown 8.Centering in CSS: A Complete Guide 2.居中1.水平居中 1.如果它是个行内元素，就对它的父元素应用 text-align: center,效果如下: 2.如果它是个块级元素，就对它自身应用 margin:auto 2.垂直居中(参考 《CSS 揭秘》中 40 居中对齐 内容) 1.下面的例子中共用的 HTML 文件: 1234567# html:&lt;body&gt; &lt;main&gt; &lt;h1&gt;Am I cenntered yet?&lt;/h1&gt; &lt;p&gt;Center me, please!&lt;/p&gt; &lt;/main&gt; &lt;/body&gt; 1.方法一: 要求元素具有固定的宽度和高度: 123456789101112131415161718192021 # CSSbody &#123; background-color: yellow;&#125;main &#123; background-color: gray; position: absolute; width: 18em; height: 6em; top: 50%; left: 50%; margin-top: -3em; margin-left: -9em; /* 上面4行可以简化为: top: calc(50% - 3em); left: calc(50% - 9em); */&#125;&#125; 效果如下: 2.方法二:12345678910body &#123; background-color: yellow;&#125;main &#123; background-color: gray; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; 也是得到如下的效果(因为 CSS 变形函数 translate() 使用百分比值时, 是以这个元素自身的宽度和高度为基准进行换算和移动的): 3.方法三:1234567891011body &#123; background-color: yellow;&#125;main &#123; background-color: gray; width: 18em; paddinng: 1em 1.5em; margin: 50vh auto 0; transform: translateY(-50%);&#125; 也是得到 上面居中 的效果(但这个方法只适用于在视口中居中的场景): 4.方法四:12345678910111213body &#123; background-color: yellow; display: flex; min-height: 100vh; margin: 0 ; &#125;main &#123; background-color: gray; margin: auto;&#125; 也是得到 上面居中 的效果. 5.方法五:1.将匿名容器(即没有被标签包裹的文本节点) 垂直居中: 123display: flex;align-items: center;justify-content: center; 效果如下: 3.HTML 项目中优化项设置 1.如果项目中设置了 body { margin: 0; } ,则需要一起设置 * { box-sizing: border-box; }(因为默认的控件的大小是不包括 border 和 padding 的, 这很不合常理!), 因为 &lt;input&gt; &lt;textarea&gt; 或有一些元素它的宽度会超出自身设置的宽度一点点. width of input, textarea, and submit button will go outside of the screen. 1.参考1:https://www.w3schools.com/css/css3_box-sizing.asp 2.参考2:https://www.w3schools.com/css/tryit.asp?filename=trycss3_box-sizing_all","categories":[{"name":"H5","slug":"H5","permalink":"http://desirepaths.github.io/categories/H5/"}],"tags":[{"name":"H5","slug":"H5","permalink":"http://desirepaths.github.io/tags/H5/"}]},{"title":"Angular 图表的使用","slug":"Angular-chart","date":"2019-08-19T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/08/19/Angular-chart/","link":"","permalink":"http://desirepaths.github.io/2019/08/19/Angular-chart/","excerpt":"Angular 中对图表使用的记录","text":"Angular 中对图表使用的记录 1.JavaScript Chart2.Angular Charts3.使用中出现的问题 1.JavaScript Chart1.Google Charts2.Jvectormap(区域性地图)1.参考: 1.https://github.com/StephanWagner/svgMap 2.bjornd/jvectormap 3.教你用 jVectorMap 制作属于自己的旅行足迹 2.在 Angular 中导入 Jvectormap 1.在 index.html 中导入必要的文件 1234&lt;script type=&quot;text/javascript&quot; src=&quot;./assets/js/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./assets/js/jquery-jvectormap.min.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;./assets/js/jquery-jvectormap.min.css&quot; rel=&quot;stylesheet&quot; media=&quot;screen&quot;&gt;&lt;script src=&quot;./assets/js/jquery-jvectormap-world-mill.js&quot;&gt;&lt;/script&gt; 2.在需要导入的 html 写入以下代码 12&lt;div id=&quot;world-map&quot; style=&quot;width: 100%; height: 100%&quot; &gt;&lt;/div&gt; 3.然后在 component 中导入 Jvectormap 即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091declare var jQuery: any;export class WorldMapComponent implements OnInit &#123; private readonly MAP_VIEW_ID = &apos;#world-map&apos;; public initVectorChart(regionsData: any, vectorMapConfig: IVectorMapConfigBean) &#123; jQuery(this.MAP_VIEW_ID).vectorMap(&#123; map: &apos;world_mill&apos;, series: &#123; regions: [&#123; values: regionsData, // Map&apos;s data scale: [&apos;#ffffff&apos;, &apos;#4CA858&apos;], // color normalizeFunction: &apos;polynomial&apos; &#125;] &#125;, // show the tip when mouse hover onRegionTipShow: function(e, el, code) &#123; // [jvectormap-tip](https://stackoverflow.com/questions/10664969/jvectormap-label-is-not-visible-why) // CSS: https://stackoverflow.com/questions/38656092/jvector-map-how-to-change-the-size-of-tooltip-which-are-shown-when-mouse-cursor if (regionsData[code]) &#123; el.html(`$&#123;el.html()&#125;: $&#123;regionsData[code] &#125;`).css(&quot;fontSize&quot;,&quot;16px&quot;).css(&quot;border-radius&quot;,&quot;1em&quot;).css(&quot;background&quot;,&quot;white&quot;).css(&quot;color&quot;,&quot;black&quot;); &#125; else &#123; el.html(`$&#123;el.html()&#125;`).css(&quot;fontSize&quot;,&quot;16px&quot;).css(&quot;border-radius&quot;,&quot;1em&quot;).css(&quot;background&quot;,&quot;white&quot;).css(&quot;color&quot;,&quot;black&quot;); &#125; &#125;, // When the region is click, move the camera to the region. onRegionClick: function(e, code, isSelected, selectedRegions) &#123; jQuery(&apos;#world-map&apos;).vectorMap(&apos;get&apos;,&apos;mapObject&apos;).setFocus(&#123;region: code, animate: true&#125;); vectorMapConfig.regionCode = code; &#125;, // Get the scale innformation when zoom onViewportChange: function( e, scale) &#123; vectorMapConfig.zoomScale = scale; &#125;, backgroundColor: &apos;#B1C8EF&apos;, // Ocean color zoomMin: 1, zoomMax: 10, focusOn: &#123;region: vectorMapConfig.regionCode, animate: vectorMapConfig.isAnimate&#125;, // zoom to the region when init regionStyle: &#123; initial: &#123; fill: &apos;#F5F9FB&apos;, // sea default color &quot;fill-opacity&quot;: 1, // Province should be hidden? 1:display, 2:hidden stroke: &apos;none&apos;, &quot;stroke-width&quot;: 0, &quot;stroke-opacity&quot;: 1, // &#125;, // hover: &#123; // fill: &apos;#ffffff85&apos;, // &quot;fill-opacity&quot;: 0.8 // &quot;fill-opacity&quot;: 0.8, cursor: &apos;pointer&apos; &#125;, selected: &#123; // fill: &apos;yellow&apos; &#125;, selectedHover: &#123;&#125; &#125;, regionLabelStyle: &#123; initial: &#123; fill: &apos;#B90E32&apos; &#125;, hover: &#123; fill: &apos;black&apos; &#125; &#125;, // show the text which is still show on the region. labels: &#123; regions: &#123; render: function(code) &#123; return regionsData[code]; &#125;, offsets: function(code) &#123; return &#123; &apos;FR&apos;: [60, -50], &apos;AT&apos;: [3, 0], &apos;NO&apos;: [-20, 30], &apos;SE&apos;: [-5, 0], &apos;DK&apos;: [-3, 0], &apos;US&apos;: [-280, 30], &#125;[code]; &#125; &#125; &#125;, &#125;); &#125;&#125; 3.在 Angular 中导入 javascript 文件 1.How to use external JS files and JavaScript code in Angular 6/7 4.Leaflet Map 2.Angular Charts 1.Angular 4 Chart library 2.https://github.com/swimlane/ngx-charts 3.ng2-charts 1.Github:ng2-charts 2.Chart.js docs 3.Line demo 4.Google Chart 1.Using Google Charts in Angular 4 project, part 2 * 2.GEO Charts(账号需要信用卡去做绑定) 3.GitHub:angular-google-charts 5.Google Map 1.Integrating Google Maps in Angular 6 2.Angular 包:SebastianM/angular-google-maps 3.使用中出现的问题 1.出现 Can&#39;t bind to &#39;datasets&#39; since it isn&#39;t a known property of &#39;base-chart&#39;. 问题 1.如果是在子 Module 中使用，就需要在子 Module 中导入，如我的子 Module 为 HomeModule , 根 Module 为 AppModule ,则在 HomeModule 中写入 imports: [ ChartsModule, ]","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"Angular 集成 OIDC 认证库","slug":"Angular-OIDC","date":"2019-08-18T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/08/18/Angular-OIDC/","link":"","permalink":"http://desirepaths.github.io/2019/08/18/Angular-OIDC/","excerpt":"记录 Angular 集成 OIDC 库的过程","text":"记录 Angular 集成 OIDC 库的过程 1.参考: 1.oidc-client-js 2.视频讲解(P9Implicit Flow 实例) 3.Github 源码(Identity-Server-4-Tutorial-Demo-Code) 4.其他 oidc 库: angular-oauth2-oidc 2.步骤 1.安装 oidc-client.js 库. 2.在 environment 添加相关 oidc 的配置项. 3.添加一个 oidc service, 用于 auth 相关的功能. 4.在显示页面添加 oidc 的登录认证功能,如: 12// component constructor(public oidc: OpenIdConnectService) &#123;&#125; 1234567891011// 显示用户名 &lt;span *ngIf=&quot;oidc.userAvailable&quot;&gt; &#123;&#123;oidc.user.profile.name&#125;&#125; &lt;/span&gt;// 显示登录和登出的按钮. &lt;button mat-menu-item *ngIf=&quot;!oidc.userAvailable&quot; (click)=&quot;oidc.triggerSignIn()&quot;&gt; 登录 &lt;/button&gt; &lt;button mat-menu-item *ngIf=&quot;oidc.userAvailable&quot; (click)=&quot;oidc.triggerSignOut()&quot;&gt; 登出 &lt;/button&gt; 3.发现的问题及解决方法1.在 Angular 生产环境中, oidc-client 包会发生 Uncaught (in promise): Error: No matching state found in storage 错误. 1.No matching state found in storage #277 2.1.5.1: Failed to parse id_token #583 1.解决方法: 1.方法一: 修改 angular 项目中 angular.json 文件的 &quot;optimization&quot;: true, 为 &quot;optimization&quot;: false, 即可,但 ng build --prod 出来的包会从原来的 3M 变为 16M. 12345678910&#123; &quot;projects&quot;:&#123; &quot;architect&quot;:&#123; &quot;configurations&quot;:&#123; // 这里改为 false &quot;optimization&quot;: false, &#125; &#125; &#125;&#125; 2.方法二： 把包降级到 1.5.0 版本: 12npm uninstall oidc-clientnpm install oidc-client@1.5.0 --save 这样使用 ng build --prod 生成的包大小还是 3M ，可以解决这个问题.","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"Angular 多语言","slug":"Angular_Translate","date":"2019-08-13T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/08/13/Angular_Translate/","link":"","permalink":"http://desirepaths.github.io/2019/08/13/Angular_Translate/","excerpt":"Angular 多语言的功能开发","text":"Angular 多语言的功能开发 0.参考1.官方的翻译方法2.翻译文档的工具3.翻译文件的生成及部署方法一:方法二:4.例子 0.参考 1.Angular 国际化 2.Angular Internationalization - Angular i18n Multi Language 3.Deploying an i18n Angular app with angular-cli 1.使用Angular-CLI发布一个i18n（国际化）应用(译) 4.ngx-translate(第三方的翻译包) 1.用官方或这个包的讨论 5.GitHub 例子程序 6.GitHub: ngx-translate 7.Deploying an i18n Angular app with angular-cli 1.官方的翻译方法 1.测试中通过调用 ng serve --configuration=fr 去测试指定语言是否正常显示. 2.翻译文本的目标地址配置，在项目配置文件 package.json 中去设置: 12345678&#123; [...] &quot;scripts&quot;: &#123; [...] &quot;extract&quot;: &quot;ng xi18n --output-path=locale&quot; &#125; [...]&#125; 3. 2.翻译文档的工具 1.Online XLIFF Editor 3.翻译文件的生成及部署 目标为当改变 URL 时，会改变相关文字的翻译,如当地址为 www.example.com 显示当前地区的语言，当地址为 www.example.com/zh 时就显示中文. 方法一: 1.要翻译的文本很简单，如下: 1&lt;h1 i18n=&quot;@@greeting&quot;&gt;Hello world2!&lt;/h1&gt; 2.相关的翻译文件在 src/i18n/ 文件夹下: 3.在 angular.json 中增加以下配置项 123456789101112131415161718192021222324&quot;build&quot;: &#123; ... &quot;configurations&quot;: &#123; ... &quot;zh&quot;:&#123; &quot;aot&quot;:true, &quot;outputPath&quot;: &quot;dist/angular-cli-i18n-sample-zh&quot;, &quot;i18nFile&quot;: &quot;src/i18n/messages.zh.xlf&quot;, &quot;i18nFormat&quot;: &quot;xlf&quot;, &quot;i18nLocale&quot;: &quot;zh&quot;, &quot;i18nMissingTranslation&quot;: &quot;error&quot;, &quot;baseHref&quot;: &quot;/zh/&quot; &#125; &#125;&#125;,&quot;serve&quot;: &#123; ... &quot;configurations&quot;: &#123; ... &quot;zh&quot;:&#123; &quot;browserTarget&quot;: &quot;angular-cli-i18n-sample:build:zh&quot; &#125; &#125;&#125; 4.用 ng serve 和 ng serve --configuration=zh 即可看出不同语言显示的区别 5.编译 1.用 ng build 及 ng build --configuration=zh 编译出两套语言的程序,然后在 nginx 或其它静态服务器上,按照如下的去设置： 2.即可在浏览器中看到改变 URL 后显示的效果: 方法二: 1.也可以写一个脚本完成上述的操作，如在 package.json 写上: 123456&#123; ... &quot;scripts&quot;: &#123; ... &quot;build-i18n&quot;: &quot;for lang in en zh; do ng build --output-path dist/$lang --aot --base-href /$lang/ --i18n-file src/i18n/messages.$lang.xlf --i18n-format xlf --i18n-locale $lang; done&quot; &#125;, 然后运行 npm run build-i18n ，即可以看到在 dist 目录下生成的 zh 和 en 两个目录. 2.放到 nginx 服务器上，可以看到效果如下 4.例子 1.在网页中动态选择语言的切换的例子 123456789101112131415161718192021222324252627// app.component.tsimport &#123; Component, LOCALE_ID, Inject &#125; from &apos;@angular/core&apos;;@Component(&#123; selector: &apos;app-root&apos;, templateUrl: &apos;./app.component.html&apos;, styleUrls: [&apos;./app.component.css&apos;]&#125;)export class AppComponent &#123; myLocaleId: string; languages = [ &#123; code: &apos;en&apos;, label: &apos;English&apos;&#125;, &#123; code: &apos;es&apos;, label: &apos;Español&apos;&#125;, &#123; code: &apos;fr&apos;, label: &apos;Français&apos;&#125; ]; constructor(@Inject(LOCALE_ID) protected localeId: string) &#123; this.myLocaleId = this.localeId ; &#125;&#125;&lt;!-- app.component.html --&gt;&lt;h1 i18n&gt;Hello World!&lt;/h1&gt;&lt;ng-template ngFor let-lang [ngForOf]=&quot;languages&quot;&gt; &lt;span *ngIf=&quot;lang.code !== myLocaleId&quot;&gt; &lt;a href=&quot;/&#123;&#123;lang.code&#125;&#125;/&quot;&gt;&#123;&#123;lang.label&#125;&#125;&lt;/a&gt; &lt;/span&gt; &lt;span *ngIf=&quot;lang.code === myLocaleId&quot;&gt;&#123;&#123;lang.label&#125;&#125; &lt;/span&gt;&lt;/ng-template&gt;","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"Angular 项目的发布","slug":"Angular项目发布","date":"2019-08-09T10:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/08/09/Angular项目发布/","link":"","permalink":"http://desirepaths.github.io/2019/08/09/Angular项目发布/","excerpt":"主要记录下 Angular 项目的部署的方法","text":"主要记录下 Angular 项目的部署的方法 1.参考2.发布方法 1.发布到 Github Page 上面 2.发送到 nginx 服务器 3.发布到 firebase. 3.本地代码 HTTPS 部署 1.参考 Angular 官方的部署文档 Running Angular CLI over HTTPS with a Trusted Certificate Running Angular CLI over HTTPS with a Trusted Certificate Serve an Angular app on localhost via HTTPS 2.发布方法1.发布到 Github Page 上面 1.官方已经讲得很详细，我这里就不再描述了. 2.但是 404.html 页面一直没什么反应,即我输入错了地址，也不会导航到 404 page. 2.发送到 nginx 服务器1.参考: 1.Nginx 配置设置 2.Nginx 后备页面配置范例 2.配置 nginx 的配置文件 nginx.conf ,增加 try_files $uri $uri/ /index.html; 的配置.12345678http &#123; ... server &#123; ... location / &#123; ... try_files $uri $uri/ /index.html; &#125; 3.把 ng build 后生成的包放到指定的服务器地址下，即可看到效果.3.发布到 firebase.1.参考: 1.Deploying an Angular CLI App to Production with Firebase 2.Firebase 托管使用入门 2.步骤: 1.安装 firebase tools : npm install -g firebase-tools 2.在 https://console.firebase.google.com 中登录 3.到 Angular 项目的根目录下执行命令 firebase login firebase init, 然后按以下配置进行: 12345Are you ready to proceed? YesWhich Firebase CLI features? Hosting (In the future, use whatever you need! Press space to select.)Select a default Firebase project? Angular Hosting Test (Choose whatever app you created in the earlier steps)What do you want to use as your public directory? dist/your-project-name (This is important! Angular creates the dist folder.)Configure as a single-page app? Yes 4.然后运行 firebase deploy 即可部署你的网站到 firebase. 3.本地代码 HTTPS 部署 Mac 的步骤 1.直接在命令行运行 ng serve --ssl true 即可, 但是这样浏览器会报 Certificate is not trusted 的警告.2.想要解决这个问题， 需要以下的步骤: 1.运行命令 openssl req -newkey rsa:2048 -x509 -nodes -keyout server.key -new -out server.crt -sha256 -days 365 生成证书文件 server.crt 和 server.key. 2.双击 server.crt 文件,在弹出的框里选择 Login, 然后在 Login 中双击选择刚刚生成的 localhost 3.在 Trust 中选择 Always Trust. 4.把 ssl.crt 和 server.key文件放置到 项目跟目录的 ssl 文件夹下. 5.重启 浏览器,然后运行命令 ng serve --ssl true --ssl-cert &quot;./ssl/server.crt&quot; --ssl-key &quot;./ssl/server.key&quot; . 6.再打开 https://localhost:4200 即可看到浏览器已经信任了这个证书.","categories":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/categories/Angular/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://desirepaths.github.io/tags/Angular/"}]},{"title":"Mac 下 Terminal 设置代理","slug":"Mac_terminal_setProxy","date":"2019-07-22T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/07/22/Mac_terminal_setProxy/","link":"","permalink":"http://desirepaths.github.io/2019/07/22/Mac_terminal_setProxy/","excerpt":"对 Mac 电脑下的 Terminal 设置代理","text":"对 Mac 电脑下的 Terminal 设置代理 1.参考 1.在Mac终端下配置Proxy 2.步骤: 1.用 SS 来配置 Proxy 2.用终端打开 ~/. bash_profile 文件： open -a xcode ~/. bash_profile 3.新增以下内容: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#proxyLANTERN=&apos;127.0.0.1:8787&apos;# 需要手动开启SS_1086=&apos;127.0.0.1:1086&apos;SS=&apos;127.0.0.1:1087&apos;SS_1089=&apos;127.0.0.1:1089&apos;COW=&apos;127.0.0.1:7777&apos;POLIPO=&apos;127.0.0.1:8123&apos;defp=$SS# No Proxyfunction noproxy&#123;unset http_proxy HTTP_PROXY https_proxy HTTPS_PROXY all_proxy ALL_PROXY ftp_proxy FTP_PROXY dns_proxy DNS_PROXY JAVA_OPTS GRADLE_OPTS MAVEN_OPTSecho &quot;clear proxy done&quot;&#125;function setproxy&#123;if [ $# -eq 0 ]theninArg=$defpelseinArg=$1fiHOST=$(echo $inArg |cut -d: -f1)PORT=$(echo $inArg |cut -d: -f2)http_proxy=http://$HOST:$PORTHTTP_PROXY=$http_proxyall_proxy=$http_proxyALL_PROXY=$http_proxyftp_proxy=$http_proxyFTP_PROXY=$http_proxydns_proxy=$http_proxyDNS_PROXY=$http_proxyhttps_proxy=$http_proxyHTTPS_PROXY=$https_proxyJAVA_OPTS=&quot;-Dhttp.proxyHost=$HOST -Dhttp.proxyPort=$PORT -Dhttps.proxyHost=$HOST -Dhttps.proxyPort=$PORT&quot;GRADLE_OPTS=&quot;-Dgradle.user.home=$HOME/.gradle&quot;MAVEN_OPTS=$JAVA_OPTSno_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com,.coding.net,.ruby-china.org&quot;echo &quot;current proxy is $&#123;http_proxy&#125;&quot;export no_proxy http_proxy HTTP_PROXY https_proxy HTTPS_PROXY all_proxy ALL_PROXY ftp_proxy FTP_PROXY dns_proxy DNS_PROXY JAVA_OPTS GRADLE_OPTS MAVEN_OPTS&#125;# 打开终端就自动启动代理setproxy 4.重启终端,会看到以下的输出 current proxy is http://127.0.0.1:1087: 5.其他的一些控制命令: 1234567891011#当不需要时，可以执行noproxy以取消$ noproxy clear proxy done#当然可以在某些情况下手动修改地址$ setproxy $depfcurrent proxy is http://127.0.0.1:8123$ setproxy $LANTERNcurrent proxy is http://127.0.0.1:8787$ setproxy 127.0.0.1:443current proxy is http://127.0.0.1:443 6.查看效果: 123MacPro:~ glb_gz$ curl https://ip.cn&#123;&quot;ip&quot;: &quot;66.62.41.113&quot;, &quot;country&quot;: &quot;美国&quot;, &quot;city&quot;: &quot;&quot;&#125;MacPro:~ glb_gz$","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"postman 用法","slug":"postman用法","date":"2019-06-24T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/06/24/postman用法/","link":"","permalink":"http://desirepaths.github.io/2019/06/24/postman用法/","excerpt":"介绍自己用 PostMan(Version 7.2.2 (7.2.2)) 的心得","text":"介绍自己用 PostMan(Version 7.2.2 (7.2.2)) 的心得 1.参考2.变量的使用3.代理的设置4.Mock Server 的使用 1.参考 1.postman 的基础使用篇(一) 2.postman的代理使用篇(四) 3.postman 变量使用篇(六) 4.Postman Sandbox API reference 2.变量的使用1.变量的增加和使用 点击 setting 图标 -&gt; 相应的环境 即可查看或编辑对应变量. 2.脚本动态改变变量. 1.PostMan 提供了丰富的脚本去实现运行时动态设置参数,详情可看 Postman Sandbox API reference . 2.用的语言为 javascript, 同理也可以用 Command + option + C 打开控制台，即可看到 console.log(&quot;&quot;); 的输出. 3.代理的设置 1.可以让 PostMan 走 ss 的代理. 2.但是我只选 User System Proxy 的话，代理没效果，不知道为什么. 4.Mock Server 的使用 其实 PostMan 官方的这篇文章 Setting up a mock server 还有 APP PostMan 都有详细的教程，所以我这里只是用中文的形式把我理解的写出来. 1.在已有的 Collection 上增加一个 Mock Server. environment 不设置也是可以的. 点击 Create mock server,就会创建一个 Mock Server 了. 我们测试一下这个链接，可以运行，但是当然会返回错误信息，因为还没有配置返回的 Sample API. 2.增加一个返回示例 可以看到我们这里有两个 Mock Server(教程之前已经提前创建好了一个) 打开 URL，可以看到返回了我们之前设置好的返回示例. 在 外部的浏览器去运行这个 URL , 可以看到也是返回一样的结果 但是因为我的账号是免费版，所以 Mock 的适用有一定的限额，一个月才 1000 次.","categories":[{"name":"postman","slug":"postman","permalink":"http://desirepaths.github.io/categories/postman/"}],"tags":[{"name":"postman","slug":"postman","permalink":"http://desirepaths.github.io/tags/postman/"}]},{"title":"VirtualBox 软件的使用","slug":"VirtualBox使用","date":"2019-06-04T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/06/04/VirtualBox使用/","link":"","permalink":"http://desirepaths.github.io/2019/06/04/VirtualBox使用/","excerpt":"介绍 Mac 中 VirtualBox 软件的使用","text":"介绍 Mac 中 VirtualBox 软件的使用 0.参考1.VirtualBox 信息2.新建一个虚拟机3.共享目录4.SSH 远程登录及 scp 文件传输 0.参考 参考1:How to SCP a file from Mac -&gt; Ubuntu VirtualBox? 1.VirtualBox 信息 1.VirtualBox 官网 2.新建一个虚拟机 以 Debian 为例. 1.参考:Installing Debian Linux in a VirtualBox Virtual Machine2.下载好一个 Debian 安装包 1.这里在 Debian 的 官网 下载. 3.配置好安装包 1.在 Storage 中配置好安装包. 4.然后点击开始 1.第一次会运行安装程序,按照提示步骤去一步一步安装就可以了. 2.安装完成. 3.共享目录1.参考 1.Permanently share a folder between host (Mac) and guest (Linux) OS using VirtualBox 2.根据 参考1 去配置共享目录，但发现不行. 4.SSH 远程登录及 scp 文件传输1.配置端口号等等信息. 1.在主机运行的情况下，点击 VirtualBox 中的 Settings -&gt; Network -&gt; Advanced -&gt; Port Forwarding , 然后如果没有 SSH 就自己新建一个：Name &quot;ssh&quot;, protocol TCP, Host port = 2281, Guest port = 22.操作过程如下所示: 2.然后从 Mac 登录 VirtualBox 中的虚拟机 1.Mac 中的 terminal 执行 ssh userName@host -p remotePort, 如我的就为: ssh tian@127.0.0.1 -p 2281,然后输入用户的密码即可登录成功. 1234567891011MacBook-Pro:macUser$ ssh tian@127.0.0.1 -p 2281tian@127.0.0.1&apos;s password: Linux debian 4.9.0-9-amd64 #1 SMP Debian 4.9.168-1+deb9u2 (2019-05-13) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Thu Jun 13 02:23:16 2019 3.用 SCP 实现文件传输. 1.上传(Mac 端 Terminal 的操作): 1.如把 Mac 桌面的 README.md 文件上传到 VirtualBox Linux 机器: scp -P portNumber MacFileAddress LinuxUser@host:LinuxFileLocation 123MacBook-Pro:macUser$ scp -P 2281 /Users/gz/Desktop/README.md tian@127.0.0.1:/tmptian@127.0.0.1&apos;s password: README.md 100% 2594 857.3KB/s 00:00 2.下载(Mac 端 Terminal 的操作): 1.从 VirtualBox Linux 机器 下载文件到 Mac 中: scp -P portNumber LinuxUser@host: LinuxFileAddress MacFileAddress 12345MacBook-Pro:macUser$ scp -P 2281 tian@127.0.0.1:/tmp/README.md /Users/gz/Downloadstian@127.0.0.1&apos;s password: Permission denied, please try again.tian@127.0.0.1&apos;s password: README.md 100% 2594 1.1MB/s 00:00","categories":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://desirepaths.github.io/categories/虚拟机/"}],"tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://desirepaths.github.io/tags/虚拟机/"}]},{"title":"Xamarin出错记录","slug":"Xamarin出错记录","date":"2019-03-14T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/03/14/Xamarin出错记录/","link":"","permalink":"http://desirepaths.github.io/2019/03/14/Xamarin出错记录/","excerpt":"记录下 Xamarin 在 Visual Studio for Mac 环境下的错误及解决方法","text":"记录下 Xamarin 在 Visual Studio for Mac 环境下的错误及解决方法 1.错误及解决方法的记录 1.错误及解决方法的记录 如果遇到奇怪的错误(第一次编译运行可以，没任何改动，第二次编译运行却不能运行)，可以先 卸载 了 APP,清理 VS 的缓存,然后再重新运行.最好用 iOS 去运行测试. 1.Xamarin 项目编译时,出现 The &quot;Microsoft.Build.Tasks.Git.LocateRepository&quot; task failed unexpectedly.System.BadImageFormatException: Method has no body Error. 1.查到信息可能是 dotnet 的版本问题: The “Microsoft.Build.Tasks.Git.LocateRepository” task failed unexpectedly. 1.查看 Mac 中的 dotnet 的版本: glb_gz$ dotnet --list-sdks 2.1.302 [/usr/local/share/dotnet/sdk] 2.下载 dotnet 安装包: 1.https://docs.microsoft.com/en-us/dotnet/core/tools/global-json 2.https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-2.2.101-macos-x64-installer 3.然后重新打开项目并编译，但结果还是一样. 3.下载 Microsoft.Build.Tasks 包: 0.升级 VS 到 7.7,并且升级其他的一些工具,如: Mono,JDK,Xamarin.Android 等等. 1.安装 PM 命令行工具到 VS 中: https://github.com/mrward/monodevelop-nuget-extensions 2.安装 Microsoft.Build.Tasks 到项目中: https://www.nuget.org/packages/Microsoft.Build.Tasks.Git/ 3.在 View/Pads/Package Console Extension 中打开 Package Console Extension,然后安装 Install-Package Microsoft.Build.Tasks.Git -Version 1.0.0-beta2-18618-05 ,但是没有成功，提示: Command Install-Package not found. 4.在 项目路径的终端中运行: dotnet add package Microsoft.Build.Tasks.Git --version 1.0.0-beta2-18618-05 ,安装成功，但是还是报同样的错误. 4.正式放弃治疗!!! 2.获取项目文件数据的时候，出现 NULL exception error. 1.用 Assembly.GetExecutingAssembly().GetManifestResourceStream()方法获取文件的数据时，一直返回 null. 2.解决方法: 1.右击需要获取数据的文件(图片的获取也一样的道理)，然后选择 Build Action -&gt; EmbeddedResource ,就可以了. 3.遇到错误 Error APT0000: Error retrieving parent for item: No resource found that matches the given name &#39;Theme.AppCompat.Light.DarkActionBar&#39;. (APT0000) (BLE_APP2.Android) 1.查到是 Packages 中 Android.Support.v7.AppCompat 版本太低，所导致,遂想更新到最新的版本. 2.无法更新，报错误 Package Xamarin.Android.Support.Design 27.0.2.1 is not compatible with monoandroid71 (MonoAndroid,Version=v7.1). Package Xamarin.Android.Support.Design 27.0.2.1 supports: monoandroid81 (MonoAndroid,Version=v8.1). 3.故想更新 Mono.Android 的版本，所以在 右键 Project -&gt; options -&gt; Build -&gt; General -&gt; Compile using Android Version 选择目标的版本即可. 4.然后更新 Android.Support.v7.AppCompat ，就可以正常地编译运行了. 4.遇到错误 MTOUCH: Error MT2101: Can&#39;t resolve the reference ... , referenced from the method ... (MT2101) (BLE_List_Connect.iOS) 1.把项目回退，然后再一个文件一个文件地添加,测试是否重现错误，. 5.遇到错误 在 MainPageViewModel 中取得 App.xaml.cs 中静态变量的值为空. 1.项目用 Prism 做基础的框架,然后从 App.xaml.cs 跳转到 MainPageViewModel.cs , App.xaml.cs 中有个 Static 变量，在 MainPageViewModel.cs 的构造方法中获取这个变量的值，会一直显示为 null. 1.在除了 构造方法 的其他地方获取这个 Static 变量的值就没问题. 2.尝试用 值传递的方式，直接传送数据到第二个页面(也是不行!!!). 12345678protected override async void OnInitialized() &#123; InitializeComponent(); var navigationParams = new NavigationParameters(); navigationParams.Add(&quot;adapter&quot;,Adapter); await NavigationService.NavigateAsync(&quot;NavigationPage/MainPage&quot;, navigationParams); &#125; 3.在 MainPageViewModel.cs / OnNavigatedTo 中获取这个 Static 的值，也是不行!!! 6.ble.net 包在 GG 项目中一直连接不成功. 0.iOS 手机. 1.就算时回滚了项目也不行(以前是可以的). 2.但 Ble_list_conn 项目用 ble.net 包，同样的手机就很正常. 3.现在查到可能是 Scan 与 Connect 有冲突，所以现在尝试在 connect 的时候,把 Scan 停止掉. 4.证实是 Scan 与 Connect 有冲突. 7.出现 Do you have a shared runtime build of your app with AndroidManifest.xml 错误 1.参考 123456789Forwarding debugger port 8847Detecting existing process&gt; am start -n &quot;com.greenworkstools.mowergg/md5e58438a37f85ea0542e2cf77e1751acd.MainActivity&quot;&gt; Starting: Intent &#123; cmp=com.greenworkstools.mowergg/md5e58438a37f85ea0542e2cf77e1751acd.MainActivity &#125;...com.greenworkstools.mowergg/files/.__override__, app_libdir: /data/app/com.greenworkstools.mowergg-6BHblXJgnD5enhv8O4gR5A==/lib/arm64 nor in previously printed locations.[monodroid] Do you have a shared runtime build of your app with AndroidManifest.xml android:minSdkVersion &lt; 10 while running on a 64-bit Android 5.0 target? This combination is not supported.[monodroid] Please either set android:minSdkVersion &gt;= 10 or use a build without the shared runtime (like default Release configuration). 2.解决方法: 1.把 Options -&gt; Android Build -&gt; General -&gt; UseShared Mono Runtime 的勾去掉. 8.出现 Version conflict detected for Xamarin.Android.Support.Compat 错误 1.相应安装 ble.net.android 包，但提示 Version conflict detected for Xamarin.Android.Support.Compat. Install/reference Xamarin.Android.Support.Compat 28.0.0.1 directly to project MowerGG.Android to resolve this issue. 错误. 2.参考 https://github.com/jguertl/SharePlugin/issues/91 说是可以手动解决，以下是我手动解决这个问题的方法: 1.用文本编译器打开 .Android.csproj 文件. 2.找到所需要手动更改版本的包名，然后手动更改版本. 9.出现 not enough space 1.详细的错误 log 为 Xamarin Mono.AndroidTools.InstallFailedException: Unexpected install output: Error: android.os.ParcelableException: java.io.IOException: Requested internal only, but not enough space。 1.在 Android Studio 上安装其他的 APP 也安装不成功，提示 Android Studio Application Failed uninstall the existing application 信息. 2.解决方法: 1.证实不关手机存储大小的问题，我手机有 500 M 的可存储空间，但还是安装不上. 2.把手机中的旧的 APP(相同一个 APP) 卸载掉. 3.把手机中有关 Xamarin 的 Library 卸载掉, 如在 华为 Honor V8(KNT-UL10),EMUI 8.0.0,Android 8.0.0 中的路径为: 设置 -&gt; 应用和通知 -&gt; 应用管理 -&gt; Xamarin.Android API-XX Support 卸载掉. 4.这样 Android Studio 的 APP 可以运行，但是 Visual Studio APP 还是不能运行安装. 5.参考下面的 10.出现 TypeLoadException ,然后手机让 内部的存储 至少有 1G 的可用空间，Visual Studio 才安装上了 APP. 10.出现 TypeLoadException 1.一打开 APP 就 Crash,完整的 Log 为: this.InitializeComponent() System.TypeLoadException: 2.参考: Unhandled Exception: System.TypeLoadException: Could not resolve type with token 010000c1的做法，解决了问题 123451. Clean all 2. Close IDE3. uninstall the APP from your phone.4. Remove all bin and obj folders from all projects (shared and device specific)5. Restart IDE, build and run","categories":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/categories/Xamarin/"}],"tags":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/tags/Xamarin/"}]},{"title":"申请 外国的 AppleID","slug":"申请外国的AppleID","date":"2019-03-04T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/03/04/申请外国的AppleID/","link":"","permalink":"http://desirepaths.github.io/2019/03/04/申请外国的AppleID/","excerpt":"背景:项目需要用到国外的 APPLE ID 去做测试.","text":"背景:项目需要用到国外的 APPLE ID 去做测试. 1.参考 1.Fake Address Generator 2.分享已购买小火箭的美国appid，只登陆appstore，不要登陆iCloud 3.美区apple id最新注册方法 2.步骤(自申请 appID)1.新建 Apple ID 1.准备好一个接收 注册码的邮箱(QQ 邮箱亲测不可以) 2.按照 美区apple id最新注册方法 的方法. 3.只要第一次在 VPN 下打开 App Store,然后同意了条款，下次不需要 VPN 都可以正常下载被屏蔽了的内容. 2.已有的 Apple ID ,更改区域. 1.到 https://appleid.apple.com/account/manage 去更改 LANGUAGE 和 COUNTRY/REGION.同时最好把 Payment&amp;Shipping 也改了.用 Fake Address Generator 去生存假的地址信息. 2.iOS 用 VPN 做代理(全局代理，而且要代理到你想更改的目标的国家). 3.iOS 打开 App Store,然后搜索 facebook ,点击下载，可能会弹出同意条款信息，点击同意，然后就可以了. 4.只要第一次在 VPN 下打开 App Store,然后同意了条款，下次不需要 VPN 都可以正常下载被屏蔽了的内容.","categories":[{"name":"ss","slug":"ss","permalink":"http://desirepaths.github.io/categories/ss/"}],"tags":[{"name":"ss","slug":"ss","permalink":"http://desirepaths.github.io/tags/ss/"}]},{"title":"Office Word 的简单用法","slug":"Word用法","date":"2019-03-01T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/03/01/Word用法/","link":"","permalink":"http://desirepaths.github.io/2019/03/01/Word用法/","excerpt":"主要是记录 Office Word 一些简单的用法.","text":"主要是记录 Office Word 一些简单的用法. 1.添加一些视图 1.添加一些视图1.Header 1.在 Insert/Header 中. 2.导航页面 1.参考: 添加目录 2.步骤: 1.在各个页面的标题处设置为 Home/Heading1/Heading2 的风格. 2.完成了各个页面后，再在 References/Table of Contents 处选择一个风格的 导航，就可以自动生成一套导航菜单了.","categories":[{"name":"word","slug":"word","permalink":"http://desirepaths.github.io/categories/word/"}],"tags":[{"name":"word","slug":"word","permalink":"http://desirepaths.github.io/tags/word/"}]},{"title":"Shadowsocks 客户端","slug":"Shadowsocks_Client","date":"2019-02-22T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/02/22/Shadowsocks_Client/","link":"","permalink":"http://desirepaths.github.io/2019/02/22/Shadowsocks_Client/","excerpt":"关于 Shadowsocks 的客户端的相关信息","text":"关于 Shadowsocks 的客户端的相关信息 1.客户端的下载2.连接的方法 1.客户端的下载1.参考:1.科学上网相关知识总结2.Windows 平台 1.下载 3.Mac 平台 1.下载 4.Android 平台 相关连的二维码扫描软件为 Barcode Scanner 4.7.8 1.下载 Android 版(2.8.3) 2.下载 Android 版(4.7.0) 5.iOS 平台 由于政策原因，国内 App Store 都已经下架了相关的 app !! 1.相关的客户端: 1.SsrConnect 2.potatso 3.ss Tool(Shadowsocs Check Tool) 2.相关的源代码 1.构建自己的iOS网络代理客户端 2.Potatso 3.相关的折中的方法(用别人的 appID 去下载) 1.分享已购买小火箭的美国appid，只登陆appstore，不要登陆iCloud 2.连接的方法1.Windows 1.先打开 SS 的二维码配置图片 2.打开 Shadowsocks 客户端, 然后可以看到右下角有个 纸飞机 的图标. 3.右键点击 纸飞机 图标,点击 服务器/扫描屏幕上的二维码 项,可以看到二维码被扫描，完成了配置. 4.点击 启动系统代理 项. 5.用浏览器打开 google 主页:https://www.google.com ,如果可以打开，就证明可以科学上网了.","categories":[{"name":"ss","slug":"ss","permalink":"http://desirepaths.github.io/categories/ss/"}],"tags":[{"name":"ss","slug":"ss","permalink":"http://desirepaths.github.io/tags/ss/"}]},{"title":"BLE DFU 相关","slug":"BLE_DFU","date":"2019-01-22T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/01/22/BLE_DFU/","link":"","permalink":"http://desirepaths.github.io/2019/01/22/BLE_DFU/","excerpt":"记录 APP 开发 BLE DFU 相关功能的步骤.","text":"记录 APP 开发 BLE DFU 相关功能的步骤. 1.参考链接 1.相关参考的链接. 2.相关参考的解释.2.详细过程 1.DFU 的步骤 0.Nordic BLE DFU 的架构\b设计. 1.查询版本 2.唤醒 BLE 设备的 DFU 模式(从普通模式转到 DFU 模式 ) 3.开始 DFU. 1.参考链接 1.相关参考的链接. 1.DFU Architecture(DFU 的整体架构) 3.How to generate the INIT file for DFU.pdf 4.Android DFU Library 2.DFU Architecture的解释. 1.详细的命令解释在路径 Software Development Kit &gt; Previous versions of nRF5 SDK &gt; nRF51 SDK v10.0.0 &gt; Examples &gt; DFU bootloader examples &gt; BLE &amp; HCI/UART Bootloader/DFU &gt; Transport layers -&gt; BLE DFU Service 里 2.概略的步骤解释在路径 Software Development Kit &gt; Previous versions of nRF5 SDK &gt; nRF51 SDK v10.0.0 &gt; Examples &gt; DFU bootloader examples &gt; BLE &amp; HCI/UART Bootloader/DFU &gt; Transport layers -&gt; BLE DFU Profile 里. 2.详细过程 BLE 的板子是用 51822 系列的板子,传统模式的 DFU . 1.所用到的 DFU 相关的信息: 12345public readonly Guid m_dfu_service = Guid.Parse(&quot;00001530-1212-EFDE-1523-785FEABCD123&quot;);public readonly Guid m_control_point_char = Guid.Parse(&quot;00001531-1212-EFDE-1523-785FEABCD123&quot;); public readonly Guid m_descriptor_char = Guid.Parse(&quot;00002902-0000-1000-8000-00805F9B34FB&quot;);public readonly Guid m_package_char = Guid.Parse(&quot;00001532-1212-EFDE-1523-785FEABCD123&quot;);public readonly Guid m_version_char = Guid.Parse(&quot;00001534-1212-EFDE-1523-785FEABCD123&quot;); 1.DFU 的步骤 0.Nordic BLE DFU 的架构\b设计. 1.查询版本 1.从 00001534-1212-EFDE-1523-785FEABCD123 中查询版本 1.如果是 1 , Device 处于 普通模式，需要发命令让 Device 转到 DFU 模式(下面步骤 2). 2.如果是 8, Device 处于 DFU 模式,开始进行 DFU 操作.(下面步骤 3) 2.唤醒 BLE 设备的 DFU 模式(从普通模式转到 DFU 模式 ) 1.打开 Control Point 的 Notifications,开始监听. 2.向 Control Point 的 descriptor 发送值{0x01,0x00}. 3.发送 {0x01,0x04} 到 Control Point 中. 1.命令后面的一位 0x04指的是类型，因为我们这里是 application.(softdevice is 0x01,bootloader is 0x02,application is 0x04) 4.然后 Device 会主动断开连接，开始进入 DFU 模式，APP 需要进行重新连接，然后从步骤1(查询版本)开始. 3.开始 DFU. 1.向 Control Point 的 descriptor 发送值{0x01,0x00}. 2.打开 Control Point 的 Notifications,开始监听. 3.发送 {0x01,0x04}(Start DFU) 到 Control Point 中. 1.命令后面的一位 0x04指的是类型，因为我们这里是 application.(softdevice is 0x01,bootloader is 0x02,application is 0x04) 4.发送 firmware 的大小 到 Device. 1.发送 12 个Bytes 的数据到 00001532 中. 2.这 12 个 Bytes 的数据分别是 &lt;Length of SoftDevice&gt;&lt;Length of bootloader&gt;&lt;Length of application&gt;,各占 4 个 Bytes. 3.记得 4 个 Bytes 的数据是从低位到高位的，如 softDevice size is 0,bootloader size is 0 ,application size is 38520 则生成的 12 位的数据为 (0x): 00-00-00-00-00-00-00-00-78-96-00-00 4.因为我测试 DFU 用的 firmware 用的是 传统模式的 DFU ,所以是个 .zip包，包里有 .bin,.dat,.manifest.json 文件.这里的 size 用的就是 .bin 文件的 size. 5.详情可以看这里的 Image Size 5.发送 {0x02,0x00}(Init DFU Parameters) 到 Control Point 中. 6.发送 (Init Data) 到 00001532 中. 1.这里的 Init Data 为 zip 包中的 .dat 文件的内容，大小为 14 个 Byte. 7.发送 {0x02,0x01}(Init DFU Parameters) 到 Control Point 中. 8.发送 {0x03}(Receive Firmware Image) 到 Control Point 中. 9.APP 开始发送 firmware 文件 1.开始发送 zip 文件下的 .bin 文件的内容到 Device(00001532) 中. 10.发送 {0x04}(Validate Firmware) 到 Control Point 中. 11.发送 {0x05}(Activate Image and Reset) 到 Control Point 中. 1.让 Device 重启.","categories":[{"name":"BLE","slug":"BLE","permalink":"http://desirepaths.github.io/categories/BLE/"}],"tags":[{"name":"BLE","slug":"BLE","permalink":"http://desirepaths.github.io/tags/BLE/"}]},{"title":"Android 网络请求","slug":"Android_网络请求","date":"2019-01-11T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2019/01/11/Android_网络请求/","link":"","permalink":"http://desirepaths.github.io/2019/01/11/Android_网络请求/","excerpt":"记录 Android 网络请求的问题点.","text":"记录 Android 网络请求的问题点. 1.开发中遇到的问题点. 在用 HttpURLConnection 请求 Http 的 Get 请求时,出现 InputStream.read 方法在差不多末尾时一直返回 java.net.ProtocolException: unexpected end of stream 的问题. 1.不是 HTTP 的问题. 1.用 PostMan 的 http 请求，可以返回期待的值. 2.不是请求方法的问题. 1.同样的方法，就运行那个 URL 有问题. 3.问题. 1.同样的内容返回，同样的方法和 http 请求， PostMan 的返回中没有 Transfer 就可以返回期待的值. 2.同样的内容返回，同样的方法和 http 请求，同样的链接，用纯 java 代码的返回结果就没有问题. 3.定位到是 bufferedReader.readLine() 有问题，但是纯 java 代码又没有问题. 4.不是 Transfer-Encoding 为 chunked 的问题 5.定位到是后面的几位 byte 取值过大的问题. 4.显示的错误: 1java.net.ProtocolException: unexpected end of stream 5.参考文献: 看了很多文章都没找到办法: https://github.com/lingochamp/FileDownloader/issues/775 https://stackoverflow.com/questions/50798241/java-net-protocolexception-unexpected-end-of-stream-android 6.还没找到解决的方法.","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"Xamarin_UnitTest","slug":"Xamarin_UnitTest","date":"2018-12-29T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/12/29/Xamarin_UnitTest/","link":"","permalink":"http://desirepaths.github.io/2018/12/29/Xamarin_UnitTest/","excerpt":"Xamarin 测试相关","text":"Xamarin 测试相关 1.参考2.单元测试相关 1.参考 1.Start writing unit test with Visual Studio for Mac 2.Creating parameterised tests in xUnit with [InlineData], [ClassData], and [MemberData] 3.Unit testing best practices with .NET Core and .NET Standard 4.Mocking in .NET with Moq 1.使用Moq框架Mock对象 5.Beginner’s Guide To Unit Testing In Prism (Xamarin.Forms) 6.单元测试之Stub和Mock 2.Mac单元测试相关 1.新建 Test Project(.NET Core/Tests/xUnit Test Project). 2.在 Test Project 的 Dependencies 中引入需要 Unit Test 的项目. 3.调出相关的 Unit Test 的面板. 4.开始单元测试 5.记得按了相关的 等级按钮 才会输出相应等级的 Log 信息.","categories":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/categories/Xamarin/"}],"tags":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/tags/Xamarin/"}]},{"title":"Xamarin开发相关","slug":"Xamarin开发相关","date":"2018-12-19T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/12/19/Xamarin开发相关/","link":"","permalink":"http://desirepaths.github.io/2018/12/19/Xamarin开发相关/","excerpt":"记录 Xamarin 开发相关的知识和过程记录","text":"记录 Xamarin 开发相关的知识和过程记录 1.获取权限相关2.错误的记录3.Xamarin 的生命周期4.Xamarin iOS 开发相关5.Xamarin 所用到的第三方包6.Xamarin 相关功能点的开发 1.多语言及本地化的支持 2.DependencyService (如果 Xamarin.Forms 不支持一些功能，就需要调用原生的实现方法去获取一些数据) 3.加载项目中文件的内容 7.VS 的使用相关8.VS 环境配置项的添加 1.获取权限相关 1.优秀的第三方框架:jamesmontemagno/PermissionsPlugin 2.错误的记录请到文章 Xamarin出错记录 处查看. 3.Xamarin 的生命周期1.在 Xamarin.Forms 中，APP 运行的生命周期是这样的:1.Android 1.Android:在Android 代码的 Project 中,如果有类继承了 Android.App.Application ,就会从该类的 OnCreate 开始进入 APP: 1234567891011121314151617181920212223 [Application(Debuggable = IS_DEBUG, AllowBackup = true, AllowClearUserData = true)] public class MyApplication : Application &#123; public const Boolean IS_DEBUG =#if DEBUG true;#else false;#endif protected MyApplication(IntPtr javaReference, JniHandleOwnership transfer) : base(javaReference, transfer) &#123; &#125; public override void OnCreate() &#123; base.OnCreate(); System.Diagnostics.Debug.WriteLine(&quot;-------&gt;Android Application OnCreate&quot;); &#125; &#125; 2.然后跳转到继承 global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity 的类中运行: 12345678910111213141516[Activity(Label = &quot;BLE_APP&quot;, Icon = &quot;@mipmap/launcher_icon&quot;, Theme = &quot;@style/MainTheme&quot;, MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity&#123; protected override void OnCreate(Bundle savedInstanceState) &#123; System.Diagnostics.Debug.WriteLine(&quot;-------&gt;Android MainActivity OnCreate&quot;); TabLayoutResource = Resource.Layout.Tabbar; ToolbarResource = Resource.Layout.Toolbar; base.OnCreate(savedInstanceState); global::Xamarin.Forms.Forms.Init(this, savedInstanceState); //这里就会跳到 Xamarin.Forms 中的类 LoadApplication(new App()); &#125;&#125; 3.然后就按照上一步的 OnCreate 去跳到 Xamarin.Forms 中指定共有的类去 2.iOS 1.在一个继承自 global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate 的类中开始 123456789101112131415161718192021222324[Register(&quot;AppDelegate&quot;)]public partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate&#123; // // This method is invoked when the application has loaded and is ready to run. In this // method you should instantiate the window, load the UI into it and then make the window // visible. // // You have 17 seconds to return from this method, or iOS will terminate your application. // public override bool FinishedLaunching(UIApplication app, NSDictionary options) &#123; System.Diagnostics.Debug.WriteLine(&quot;-----&gt;iOS AppDelegate App()&quot;); global::Xamarin.Forms.Forms.Init(); //这里就会跳到 Xamarin.Forms 中的类 LoadApplication(new App()); return base.FinishedLaunching(app, options); &#125;&#125; 2.然后就按照上一步的 FinishedLaunching 去跳到 Xamarin.Forms 中指定共有的类去 4.Xamarin iOS 开发相关1.问题点 1.在调试 iOS 设备时，经常一 install 后 Visual Studio 就与 iPhone/iPad 断开连接，看不到相关的 log 信息. 1.找不到解决的方法，暂时只能通过 Run/Start Debugging 去查看 log. 2.更新 Prism 中的 Item View 1.ListView 中 Item 的 Model 继承 INotifyPropertyChanged,并实现其 event. 2.把 ListView 中的 ItemSource Item 更新。 3.用 event 通知更新 View,如更新 Binding ConnStateStr 参数的 View 的值: PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(ConnStateStr))); 3.Mac 版的 Visual Studio 打开 resx 文件方式 1.在做多语言时， Mac 版的 Visual Studio 没有专门的编辑器打开并快速地编辑 resx 文件(Windows 版有). 2.每次改动都需要手工复制粘贴 &lt;data&gt;&lt;/data&gt; 中的信息. 3.在网上看到有方法可以添加个编辑器，但是没有验证: 1.How to edit a .resx file on Mac OS ? 2.GitHub:Visual-Studio-for-Mac-ResxEditor 5.Xamarin 所用到的第三方包 1.权限动态获取相关 2.二维码 ZXing.Net.Mobile 3.Json 解析 Newtonsoft.Json 1.Json 与对象间的相互转换. 4.弹出对话框 Acr.UserDialogs 6.圆角图片 Xam.Plugins.Forms.ImageCircle 7.功能强大的第三方框架 Prism 1.Prism.Plugin.Popups 2.Documents 1.Prism-Documentation1 2.Prism_Documentation2 3.功能点 1.快速导航 2.数据快速绑定 3.信息传递 6.Xamarin 相关功能点的开发1.多语言及本地化的支持 1.参考: 1.Xamarin.Forms 本地化 2.How To Localise Your Xamarin.Forms Apps 2.步骤: 1.先用 DepencyService 获取到手机的语言，然后设置 APP 的语言跟手机的一样. 2.图片的本地化 2.1 在 Android 和 iOS 处放置好相关的本地化图片 2.2 在需要调用的地方: 1234567891011var flag = new Image(); switch (Device.RuntimePlatform) &#123; case Device.iOS: case Device.Android: flag.Source = ImageSource.FromFile(&quot;flag.png&quot;); break; case Device.UWP: flag.Source = ImageSource.FromFile(&quot;Assets/Images/flag.png&quot;); break; &#125; 3.文字的本地化 1.在 Xamarin.Forms 中添加 resx 文件(先填写缩写的名字然后再改名即可). 2.添加本地化翻译(添加后记得 clean project) 3.通过 AppResources.ResourceName 使用资源. 2.DependencyService (如果 Xamarin.Forms 不支持一些功能，就需要调用原生的实现方法去获取一些数据) 1.参考: 1.Xamarin.Forms DependencyService 2.相关的实现(获取 APP 版本信息) 3.加载项目中文件的内容 7.VS 的使用相关 1.在工程中添加一个新的 Project 时，添加的步骤为(Solution-&gt;Add-&gt;Add New Project-&gt;Library -&gt; Class Library 即可以看到新建的 Project ): 8.VS 环境配置项的添加 配置项的添加有很多好处，首先就是 1.提高开发的效率 2.增加不同环境或切换不同的环境时，可以快速准确地修改到目的配置 Define Symbols. 1.参考: 1.Demystifying Build Configurations 1.下面的步骤参考这边文章的. 2.步骤: 1.双击 Solution Options, 然后 Build -&gt; Configurations(not Run &gt; Configurations). 2.我们要新增一个 GF 的 Debug 配置 和一个 Release 配置，所以分别 Copy 里面已有的 Debug 和 Release ,并且命名为 GF-Debug 和 GF-Release 3.在 左上角选择 Android -&gt; GF-Debug ,然后 Build ,但是出现了 Info.plist not found 的情况(解决方法为下面的 4,5,6 ). 4.添加 GF-Debug 和 GF-Release 的 Platform ,步骤为在 solution 中. 5.同理在 iOS Project 中重复步骤 4,效果如下 6.回到 Solution 下的 Build-&gt; Configurations -&gt; Configurationn Mappings,然后选择 iOS 的项目， Configuration 和 Platform 选择我们刚刚创建的，操作如下: 7.再次编译 Android 的 GF-Debug，就可以通过了. 8.但是编译 iOS 的 GF-Release 还是会出现 Info.plist not found 的问题，所以解决如下: 1.打开 MowerGG.iOS.csproj 文件 2.把所有 Include=Info.plist condition ... 改为 &lt;None Include=&quot;Info.plist&quot; /&gt; 9.如果编译 iOS 时只选择了 GF-Release 会出现 warning MT1043 ,导致无法编译. 1.解决方法为在左上角选择 GF-Release|iPhone 配置文件. 2.在操作了上一步后，编译可以通过了，但是发现 GF-Release|iPhone 不能部署到手机，错误如下: 123 warning MT1043: Failed to launch the application using the instruments service. Will try launching the app using gdb service.Launching &apos;com.greenguide.app&apos; on the device &apos;iPhoneGlb6&apos;Could not find the application &apos;com.greenguide.app&apos; on the device &apos;iPhoneGlb6&apos;. 3.在已经可以正常运行的配置上 Copy 一个，然后再修改(如 Copy 一个 Release configuration . ) 3.发现的问题点 1.如果 iOS Project 中没有相关的 Configuration , 就会显示 Invalid configuration mapping. 2.Android Debug 出现 Error MSB6006: &quot;java&quot; exited with code 2. (MSB6006) 错误. 1.解决方法1:在 Build-&gt;Android Build-&gt;General 中选择 Enable Multi-Dex.","categories":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/categories/Xamarin/"}],"tags":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/tags/Xamarin/"}]},{"title":"Xamarin 安装包的生成","slug":"Xamarin生成安装包","date":"2018-12-14T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/12/14/Xamarin生成安装包/","link":"","permalink":"http://desirepaths.github.io/2018/12/14/Xamarin生成安装包/","excerpt":"记录 Android 与 iOS 的安装包的生成方式与打包发布.","text":"记录 Android 与 iOS 的安装包的生成方式与打包发布. 1.Android 打包压缩2.iOS TestFlight 相关 1.Android 打包压缩1.步骤: 1.右击 BLE_APP.Android 中的 Options, Android Build-&gt; Linker -&gt; Linker Behaviour 1.选择 Don&#39;t Link 选项，然后打包 1.发现打包出来的 apk 有 67.51 MB 大小. 2.华为手机测试打开没问题 2.选择 Link all assemblies 选项,然后打包 1.发现打包出来的 apk 有 14.3 MB 大小. 2.华为手机测试打开就 Crash . 2.选择 Link SDK assemblies only 选项,然后打包 1.发现打包出来的 apk 有 14.3 MB 大小. 2.华为手机测试打开没问题. 2.iOS TestFlight 相关1.参考: 1.TestFlight 使用指南 2.iOS如何使用TestFlight进行App Beta版测试 3.Using TestFlight to Distribute Xamarin.iOS Apps 4.Publishing Xamarin.iOS apps to the App Store 2.具体步骤 1.在 Info.plist 中填写好相应的图片信息. 2.选择 Build/Archive for Publishing ,准备开始打包. 3.注意 Info.plist/Version 的值不要大于两个点,如 1.1.01071653 会出现如下的错误: 1ERROR ITMS-90060: &quot;This bundle is invalid. The value for key CFBundleShortVersionString &apos;1.1.0.01071653&apos; in the Info.plist file must be a period-separated list of at most three non-negative integers.&quot; 4.打包完成后，通过 Application Loader 上传到 App Store 然后在对应的 app 中选择 TestFlight,然后添加测试人员即可. 5.内部测试相关: 1.内部开发人员后台添加相关 6.内部测试人员收到的邮件信息及点击按钮后网页的显示.","categories":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/categories/Xamarin/"}],"tags":[{"name":"Xamarin","slug":"Xamarin","permalink":"http://desirepaths.github.io/tags/Xamarin/"}]},{"title":"Mac上七牛云的用法","slug":"Mac上七牛云的用法","date":"2018-11-20T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/11/20/Mac上七牛云的用法/","link":"","permalink":"http://desirepaths.github.io/2018/11/20/Mac上七牛云的用法/","excerpt":"记录下在 Mac 上怎样使用七牛云去存储图片","text":"记录下在 Mac 上怎样使用七牛云去存储图片 1.新建一个 存储空间2.添加一个域名3.使用 chrome/qiniu upload files 插件快速上传图片 1.新建一个 存储空间 1.这里一定要选择 华东地区，因为 Chrome 上的插件 qiniu upload files 只支持 华东地区. 2.添加一个域名 1.因为自动分配的域名会 30 天后过期，所以需要添加一个经过 ICP 备案的域名,我这里为 pic.pgyjz.cn. 2.添加后，七牛云 会分配一个域名给你，你把它添加到域名管理后台的 CNAME 的记录值那里就可以了(我这里为 阿里云 的域名管理后台). 3.使用 chrome/qiniu upload files 插件快速上传图片 1.到 个人中心-&gt;密钥管理 处,取得相应的 密钥. 2.下载 chrome/qiniu upload files . 3.拖拉图片，即可上传","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"iOS多包名打包","slug":"iOS多包名打包","date":"2018-11-18T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/11/18/iOS多包名打包/","link":"","permalink":"http://desirepaths.github.io/2018/11/18/iOS多包名打包/","excerpt":"1.背景","text":"1.背景 2.在 workspace 下建立多个 Projects3.根据环境的不同，打包多个版本的 app4.根据环境不同，新建多个 Target5.相关的源码地址为: 1.https://github.com/ghzjtian/generated_multi_iOS 6.多人共用一个证书 1.背景 1.相同的 Project 源码 ,想要打包多个 APP , APP 间有 icon,主题，相关的 label 的不同，其他的逻辑代码都一样. 2.在 workspace 下建立多个 Projects1.参考: 1.iOS用workspace和cocoapods管理多个项目 3.根据环境的不同，打包多个版本的 app1.参考: 1.Xcode Build Settings — User Defined Settings — iOS Manage multiple configuration and environments with Single target 2.详细的过程: 1.先添加一个 配置环境 1.如这里就在 Project/Info 的 Configurations 下,添加了一个 Testing 测试环境的配置. 2.在 Target/BuildSettings 下添加用户自定义的信息. 1.在 APP/TARGETS/Build Settings 中，添加一个 User-Defined Settings,如这里就添加了 mAPP_BUILD_NUMBER,mAPP_BUNDLE_IDNETIFIER,mAPP_SERVER_URL 等等的信息资料. 3.在 Info.plist 中，把相关的在 BuildSettings 下的设置做关联: 4.同理在 TARGETS/General/Identity 下也一样要与 BuildSettings 关联: * 注意 `Bundle Identifier` 在这里关联没用，要在 `Build Settings/Product Bundle Identifier` 做关联才行 !! 如下图: * 可以看到有所改变，如果没有的话，点去其他页面再点回来，这样刷新一下即可 5.在 ViewController 中，获取设置的值: 12345678910111213141516NSBundle *bundle = [NSBundle mainBundle]; //bundle identifier NSString *bundleIdentifier = [bundle bundleIdentifier]; //display name NSString *displayName = [bundle objectForInfoDictionaryKey:@&quot;CFBundleDisplayName&quot;]; //Version String NSString *versionStr = [bundle objectForInfoDictionaryKey:@&quot;CFBundleShortVersionString&quot;]; //Version Build number NSString *buildNumber = [bundle objectForInfoDictionaryKey:@&quot;CFBundleVersion&quot;]; //APP SERVER URL NSString *serverUrl = [bundle objectForInfoDictionaryKey:@&quot;ServerURL&quot;]; _titleLb.text=[NSString stringWithFormat:@&quot;%@&quot;,displayName]; _showLb.text = [NSString stringWithFormat:@&quot;bundle ID:%@,\\nversionStr:%@,\\nbuildNumber:%@,\\nserverUrl:%@&quot;,bundleIdentifier,versionStr,buildNumber,serverUrl]; NSLog(@&quot;bundle ID:%@,\\ndisplayName:%@,\\nversionStr:%@,\\nbuildNumber:%@,\\nserverUrl:%@&quot;,bundleIdentifier,displayName,versionStr,buildNumber,serverUrl); 6.在运行前，先到 Edit Scheme 中，选择不同的 Build Configuration,然后运行查看效果图: * 在手机上的效果图 * ~ * ~ * ~ 4.根据环境不同，新建多个 Target 上一步基本结决了不同的环境下，释放出不同的 APP (如 Debug,Test,Release) 版本，但是如果是想要改变不同的 icon,device orientation 等等的参数，可能就后劲不足了,下面主要讲解通过新建 Target 解决这种问题. 1.参考: 1.Xcode “Targets” with multiple build configurations 1.相关的 Source code 2.步骤: 1.右键点击,新建一个 Target 为 Green 2.设置 Green 的 General 和 Build Settings 的信息: 3.效果图: 4.如果需要在代码中判断是哪个 APP ,可以设置一个 Macro ,然后在需要的地方判断即可,如: 123456789//定义一个判断的 宏#define IS_GREEN_APP [[[NSBundle mainBundle] bundleIdentifier] containsString:@&quot;com.glb.Green&quot;]//在有需要的地方判断if(IS_GREEN_APP)&#123; NSLog(@&quot;The APP is Green Guide APP&quot;);&#125;else&#123; NSLog(@&quot;The APP is Cramer APP&quot;);&#125; 6.多人共用一个证书 1.参考 如何导出 p12 文件 2.通过安装了导出来的 .p12 文件，即可在本电脑打包并发布 APP.","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"Android多版本打包","slug":"Android多版本打包","date":"2018-11-16T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/11/16/Android多版本打包/","link":"","permalink":"http://desirepaths.github.io/2018/11/16/Android多版本打包/","excerpt":"1.背景","text":"1.背景 2.多包名打包 1.build.gradle file. 2.AndroidManifest.xml file 及 参数的使用. 3.导入的图片. 4.打包. 5.安装 apk 到模拟器中. 6.查看包名信息. 7.项目的源码已上传到了 GitHub 1.背景 1.公司有两个 app ，内部的逻辑一摸一样，就是 app 的 icon ，主题，显示的文字，另一个 app 屏蔽一些功能,遂要实现多包名打包的功能. 2.参考: 1.Android使用Gradle玩转多渠道多包名打包 2.多包名打包 1.修改 app/build.gradle 文件,如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374apply plugin: &apos;com.android.application&apos;android &#123; //签名信息 signingConfigs &#123; release &#123; keyAlias &apos;key0&apos; keyPassword &apos;multi1230&apos; storeFile file(&apos;/Users/glb_gz/Documents/AS_Workplace/MultiPackageAPP/debug&apos;) storePassword &apos;multi1230&apos; &#125; &#125; compileSdkVersion 28 defaultConfig &#123; applicationId &quot;com.example.glb_gz.multipackageapp&quot; minSdkVersion 15 targetSdkVersion 28 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; &#125; buildTypes &#123; release &#123; minifyEnabled false signingConfig signingConfigs.release proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125; flavorDimensions &quot;default&quot; //配置不同包名的 APK productFlavors&#123; GreenGuide&#123; dimension &quot;default&quot; applicationId &quot;com.example.glb_gz.multipackageapp.guide&quot; manifestPlaceholders = [new_app_name:&quot;Guide&quot;,icon:&quot;@mipmap/ic_launcher_guide&quot;] resValue(&quot;string&quot;,&quot;my_app_name&quot;,&quot;Green Guide APP&quot;) resValue(&quot;bool&quot;,&quot;is_cramer_app&quot;,&quot;false&quot;) resValue(&quot;dimen&quot;,&quot;my_app_margin&quot;,&quot;10dp&quot;) resValue(&quot;color&quot;,&quot;app_background_color&quot;,&quot;#0f0&quot;) &#125; Cramer&#123; dimension &quot;default&quot; applicationId &quot;com.example.glb_gz.multipackageapp.cramer&quot; //在 AndroidManifest.xml 中使用,如: // android:icon=&quot;$&#123;icon&#125;&quot; // android:label=&quot;$&#123;new_app_name&#125;&quot; manifestPlaceholders = [new_app_name:&quot;Cramer&quot;,icon:&quot;@mipmap/ic_launcher_cramer&quot;] //在 java 代码中使用，具体的方式为: context.getResources().getString(R.string.my_app_name); //其他属性的设置 可以参考这篇文章: https://www.tanelikorri.com/tutorial/android/set-variables-in-build-gradle/ resValue(&quot;string&quot;,&quot;my_app_name&quot;,&quot;Cramer APP&quot;) resValue(&quot;bool&quot;,&quot;is_cramer_app&quot;,&quot;true&quot;) resValue(&quot;dimen&quot;,&quot;my_app_margin&quot;,&quot;30dp&quot;) resValue(&quot;color&quot;,&quot;app_background_color&quot;,&quot;#f00&quot;) &#125; &#125;&#125;dependencies &#123; implementation fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;) implementation &apos;com.android.support:appcompat-v7:28.0.0&apos; implementation &apos;com.android.support:design:28.0.0&apos; implementation &apos;com.android.support.constraint:constraint-layout:1.1.3&apos; implementation &apos;com.android.support:support-vector-drawable:28.0.0&apos; testImplementation &apos;junit:junit:4.12&apos; androidTestImplementation &apos;com.android.support.test:runner:1.0.2&apos; androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos;&#125; 2.相关的在 AndroidManifest.xml 文件的配置及 Activity 中的提取: 12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.example.glb_gz.multipackageapp&quot;&gt; &lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;$&#123;icon&#125;&quot; android:label=&quot;$&#123;new_app_name&#125;&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&gt; &lt;activity android:name=&quot;.MainActivity&quot; android:label=&quot;$&#123;new_app_name&#125;&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; 12345//测试各个属性的提取,如 boolean ,string ,dimen,color 等等 app_info_tv.setText(getResources().getString(R.string.my_app_name)+&quot; isCramerApp? &quot;+getResources().getBoolean(R.bool.is_cramer_app)); view_ll.setBackgroundColor(getResources().getColor(R.color.app_background_color)); Log.i(&quot;TEST&quot;,&quot;isCramerApp? &quot;+getResources().getBoolean(R.bool.is_cramer_app)); 3.导入的相关 icon 图片: 4.通过 Generate signed 去打包不同包名的包 1.也试过 用命令行 去打包,但出现错误，查找解决方法无果后就放弃了. 1234567891011$ ./gradlew assembleRelease --stacktraceFAILURE: Build failed with an exception.* What went wrong:Could not determine java version from &apos;11.0.1&apos;.* Try:Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.* Get more help at https://help.gradle.org 5.通过命令行把 apk 文件安装到 模拟器上面，并看到两个 app 已经安装成功,并有不同的显示效果. 1234 glb_gz$ adb install /Users/glb_gz/Desktop/Cramer/release/app-Cramer-release.apkSuccess glb_gz$ adb install /Users/glb_gz/Desktop/GreenGuide/release/app-GreenGuide-release.apkSuccess 6.在 terminal 中用命令行 adb shell pm list packages 查看模拟器中包名的信息,证明已经成功设置了包名: 123456$ adb shell pm list packages...package:com.example.glb_gz.multipackageapp.cramerpackage:com.example.glb_gz.multipackageapp.guide...","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"Mac的PHP升级","slug":"Mac的PHP升级","date":"2018-11-13T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/11/13/Mac的PHP升级/","link":"","permalink":"http://desirepaths.github.io/2018/11/13/Mac的PHP升级/","excerpt":"1.参考","text":"1.参考 2.具体的过程 1.参考 1.How to upgrade your version of PHP to 7.0 on macOS Sierra 2.Upgrade to PHP 7.3 or 7.2 on macOS Mojave, Sierra or on OSX 10.6 – 10.11 2.具体的过程1.升级前1234$ php -vPHP 5.6.30 (cli) (built: Oct 29 2017 20:30:32) Copyright (c) 1997-2016 The PHP GroupZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies 1.然后输入 curl -s https://php-osx.liip.ch/install.sh | bash -s 7.2 进行升级 2.提示升级完毕后，重启 terminal,输入 php -v ,即可看到新版本: 12345 php -vPHP 7.2.12 (cli) (built: Nov 9 2018 11:03:05) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies with Zend OPcache v7.2.12, Copyright (c) 1999-2018, by Zend Technologies 3.简单的 php 服务器 1.在 terminal 运行以下命令1php -S 10.100.1.172:8080 -t .","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"Homestead 的使用","slug":"homestead的使用","date":"2018-11-12T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/11/12/homestead的使用/","link":"","permalink":"http://desirepaths.github.io/2018/11/12/homestead的使用/","excerpt":"主要记录下 Homestead 的使用方法","text":"主要记录下 Homestead 的使用方法 1.参考2.ssh 连接3.上传文件到服务器4.mysql 的操作5.MongoDB 的安装6.相关的问题 1.参考 1.Laravel Homestead 5.7 中文文档 2.ssh 连接 1.在项目的目录下面，可以用 vagrant ssh 去进入到 Linux 虚拟机下面. 2.在其他的路径的时候，通过 ssh vagrant@192.168.10.10 去连接,详细参考这里. 1234567891011121314151617181920212223$ ssh vagrant@192.168.10.10Welcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-32-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Mon Nov 12 11:58:32 UTC 2018 System load: 0.0 Processes: 131 Usage of /: 9.6% of 61.80GB Users logged in: 1 Memory usage: 21% IP address for eth0: 10.0.2.15 Swap usage: 0% IP address for eth1: 192.168.10.10285 packages can be updated.96 updates are security updates.Last login: Mon Nov 12 11:32:02 2018 from 10.0.2.2vagrant@httpdocs:~$ exitlogoutConnection to 192.168.10.10 closed. 3.上传文件到服务器 1.利用 scp 去上传文件: 123$ scp /Users/glb_gz/Desktop/smarttec.sql vagrant@192.168.10.10:/tmpsmarttec.sql 100% 1556KB 54.1MB/s 00:00 glb-gzdeMacBook-Pro:~ glb_gz$ 4.mysql 的操作 1.用户名和密码分别为 homestead/secret,详见 连接数据库,相关的操作例子: 123456789101112131415vagrant@httpdocs:~$ mysql -u homestead -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 5Server version: 5.7.23-0ubuntu0.18.04.1 (Ubuntu)Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.mysql&gt; 5.MongoDB 的安装1.参考(目前主要用 homestead vagrant 去安装 mongodb): 1.HomeStead 中安装 MongoDB 2.Installing MongoDB on Homestead 3.PHP7 MongDB 安装与使用 4.MongoDB on Laravel Homestead with PHP 7(主要参考这个) 5.其他的一些信息 1.Install MongoDB Enterprise on Ubuntu 2.SQL 到 Mongo 的对应表 3.MongoDB driver ¶ 4.Using the PHP Library for MongoDB (PHPLIB) ¶ 5.MongoDB PHP tutorial 6.How to Install and Secure MongoDB 3.6 on Ubuntu 17.10 2.在 Homestead.yaml 中安装 mongodb : 1.在 Homestead.yaml 中修改文件的配置,如: 12345678910111213141516171819202122ip: 192.168.10.10memory: 2048cpus: 1provider: virtualboxauthorize: ~/.ssh/id_rsa.pubkeys: - ~/.ssh/id_rsafolders: - map: /Users/glb_gz/Documents/php_workplace/Test to: /home/vagrant/codesites: - map: homestead.test to: /home/vagrant/code/publicdatabases: - homesteadname: testhostname: testmongodb : true 3.SSH 进入 vagrant 后，执行下面的操作,就可以顺利安装好 MongoDB 了:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263$ ssh vagrant@192.168.10.10vagrant@test:/usr/local$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10Executing: /tmp/apt-key-gpghome.raLrEy2Bnr/gpg.1.sh --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10gpg: key 5F8F93707F0CEB10: public key &quot;Totally Legit Signing Key &lt;mallory@example.org&gt;&quot; importedgpg: key 9ECBEC467F0CEB10: 1 signature not checked due to a missing keygpg: key 9ECBEC467F0CEB10: public key &quot;Richard Kreuter &lt;richard@10gen.com&gt;&quot; importedgpg: Total number processed: 2gpg: imported: 2vagrant@test:/usr/local$ echo &quot;deb http://repo.mongodb.org/apt/ubuntu &quot;$(lsb_release -sc)&quot;/mongodb-org/3.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.listdeb http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/3.0 multiversevagrant@test:/usr/local$ sudo apt-get updateHit:1 https://deb.nodesource.com/node_8.x bionic InReleasevagrant@test:/usr/local$ sudo apt-get install -y mongodb-orgReading package lists... DoneBuilding dependency tree Reading state information... Donemongodb-org is already the newest version (3.6.9).0 upgraded, 0 newly installed, 0 to remove and 221 not upgraded.vagrant@test:/usr/local$ sudo pecl install mongodbWARNING: channel &quot;pecl.php.net&quot; has updated its protocols, use &quot;pecl channel-update pecl.php.net&quot; to updatedownloading mongodb-1.5.3.tgz ......Build complete.Don&apos;t forget to run &apos;make test&apos;.running: make INSTALL_ROOT=&quot;/tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3&quot; installInstalling shared extensions: /tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3/usr/lib/php/20170718/running: find &quot;/tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3&quot; | xargs ls -dils539331 4 drwxr-xr-x 3 root root 4096 Nov 16 07:00 /tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3539739 4 drwxr-xr-x 3 root root 4096 Nov 16 07:00 /tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3/usr539740 4 drwxr-xr-x 3 root root 4096 Nov 16 07:00 /tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3/usr/lib539741 4 drwxr-xr-x 3 root root 4096 Nov 16 07:00 /tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3/usr/lib/php539742 4 drwxr-xr-x 2 root root 4096 Nov 16 07:00 /tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3/usr/lib/php/20170718539738 5796 -rwxr-xr-x 1 root root 5934296 Nov 16 07:00 /tmp/pear/temp/pear-build-rootLH757y/install-mongodb-1.5.3/usr/lib/php/20170718/mongodb.soBuild process completed successfullyInstalling &apos;/usr/lib/php/20170718/mongodb.so&apos;install ok: channel://pecl.php.net/mongodb-1.5.3configuration option &quot;php_ini&quot; is not set to php.ini locationYou should add &quot;extension=mongodb.so&quot; to php.iniSegmentation fault#然后在 php.ini 中写入 extension = mongodb.sovagrant@test:/usr/local$ sudo find / -name &apos;php.ini&apos;/etc/php/7.1/fpm/php.ini/etc/php/7.1/cli/php.ini/etc/php/5.6/fpm/php.ini/etc/php/5.6/cli/php.ini/etc/php/7.3/fpm/php.ini/etc/php/7.3/cli/php.ini/etc/php/7.2/fpm/php.ini/etc/php/7.2/cli/php.ini/etc/php/7.0/fpm/php.ini/etc/php/7.0/cli/php.inivagrant@test:/usr/local$ php -vPHP 7.2.12-1+ubuntu18.04.1+deb.sury.org+1 (cli) (built: Nov 12 2018 09:55:44) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies with Zend OPcache v7.2.12-1+ubuntu18.04.1+deb.sury.org+1, Copyright (c) 1999-2018, by Zend Technologies with blackfire v1.22.0~linux-x64-non_zts72, https://blackfire.io, by Blackfirevagrant@test:/usr/local$ sudo vi /etc/php/7.2/fpm/php.inivagrant@test:/usr/local$ sudo vi /etc/php/7.2/cli/php.inivagrant@test:/usr/local$ sudo service php7.2-fpm restart &amp;&amp; sudo service nginx restart 6.相关的问题 1.在 Mac 上运行 $ composer require mongodb/mongodb ,出现以下问题: 12345Problem 1 - mongodb/mongodb 1.4.2 requires ext-mongodb ^1.5.0 -&gt; the requested PHP extension mongodb is missing from your system. - mongodb/mongodb 1.4.1 requires ext-mongodb ^1.5.0 -&gt; the requested PHP extension mongodb is missing from your system. - mongodb/mongodb 1.4.0 requires ext-mongodb ^1.5.0 -&gt; the requested PHP extension mongodb is missing from your system. - Installation request for mongodb/mongodb ^1.4 -&gt; satisfiable by mongodb/mongodb[1.4.0, 1.4.1, 1.4.2]. 1.1 解决方法 Composer can’t find mongodb extension,运行 $ composer require jenssegers/mongodb --ignore-platform-reqs","categories":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/tags/php/"}]},{"title":"iOS 问题及解决","slug":"iOS问题及解决","date":"2018-11-12T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/11/12/iOS问题及解决/","link":"","permalink":"http://desirepaths.github.io/2018/11/12/iOS问题及解决/","excerpt":"1.遇到的问题","text":"1.遇到的问题 1.遇到的问题1.动态设置 ScrollView 滚动的高度 1.遇到了在 Storyboard 中添加了 ScrollView 和相应的 contentView,并设置了 contentView 的约束的高度,但这样是固定的高度，不会动态改变高度. 1.在代码中设置下面这样，就解决了动态适配高度的问题: 12345678-(void)viewDidAppear:(BOOL)animated&#123; [super viewDidAppear:animated]; //[动态设置 ScrollView 滚动的高度]( https://www.jianshu.com/p/400fa268c2c8 ) // _next_bt 为最底下的一个控件 CGFloat height = _next_bt.frame.origin.y+_next_bt.frame.size.height+44; _contentViewHC.constant = height;&#125; 2.[导航栏显示和隐藏的坑] ( https://www.jianshu.com/p/60e2369bbe0e ) 1.在没有 Navigation bar 的页面 push 到有 Navigation bar 的页面，然后按返回,会发生突然不见 Navigation bar 的现象,解决如下. 123456-(void)viewWillAppear:(BOOL)animated&#123; [super viewWillAppear:animated]; //显示导航条, //[导航栏显示和隐藏的坑] ( https://www.jianshu.com/p/60e2369bbe0e ) [self.navigationController setNavigationBarHidden:NO animated:animated];&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"Linux命令","slug":"Linux命令","date":"2018-11-02T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/11/02/Linux命令/","link":"","permalink":"http://desirepaths.github.io/2018/11/02/Linux命令/","excerpt":"1.Linux 相关命令1.1参考1.2文件相关命令1.3网络相关命令1.端口检测","text":"1.Linux 相关命令1.1参考1.2文件相关命令1.3网络相关命令1.端口检测 1.Linux 相关命令1.1参考 1.Linux中常用的命令都是哪些单词的缩写？ 1.2文件相关命令 0.相关参考: 1.参考1: 每天一个linux命令（33）：df 命令 2.参考2: Linux查看文件和文件夹大小 1.列出文件系统的可用空间及使用情况(df – Disk Free):df -h 1234567891011# df -hFilesystem Size Used Avail Use% Mounted on/dev/sda1 8.2G 3.1G 4.7G 40% /udev 10M 0 10M 0% /devtmpfs 1.6G 49M 1.6G 4% /runtmpfs 3.9G 4.0K 3.9G 1% /dev/shmtmpfs 5.0M 4.0K 5.0M 1% /run/locktmpfs 3.9G 0 3.9G 0% /sys/fs/cgroup/dev/sda5 2.7G 291M 2.3G 12% /var/dev/sda7 360M 5.3M 332M 2% /tmp/dev/sda8 432G 3.0G 407G 1% /home 2.查看文件或文件夹的磁盘使用空间(du – Disk Usage):du -h --max-depth=1 your_dest_dir 123456789101112# du -h --max-depth=1 /var16K /var/lost+found4.0K /var/local8.0K /var/www8.0K /var/tmp48K /var/mail6.0M /var/backups816K /var/spool187M /var/lib93M /var/log286M /var 1.3网络相关命令1.端口检测0.相关参考 1.linux 检测远程端口是否打开 2.检测远程主机上的某个端口是否开启 3.Mac安装telnet 4.mac os x 查看网络端口情况 1.查看当前主机 tcp 开放了哪些端口1234567891011root@MyServer:~# netstat -anp tcpActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 62.42.41.223:9001 0.0.0.0:* LISTEN 3816/ss-server tcp 0 0 62.42.41.223:9002 0.0.0.0:* LISTEN 3887/ss-server tcp 0 0 62.42.41.223:9003 0.0.0.0:* LISTEN 3893/ss-server tcp 0 0 0.0.0.0:8080 0.0.0.0:* LISTEN 18545/nginx: master tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 4254/sshd tcp 0 0 62.42.41.223:22 218.92.1.131:56386 ESTABLISHED 4345/sshd: root [pr tcp 0 0 62.42.41.223:9002 218.19.136.78:27844 SYN_RECV - tcp 0 0 62.42.41.223:9003 218.19.136.78:27847 ESTABLISHED 3893/ss-server 2.远程监测端口是否打开:12345678root@server3:~# nc -v 62.42.41.223 9002Warning: forward host lookup failed for 62.42.41.223.vultr.com: No address associated with name62.42.41.223.vultr.com [62.42.41.223] 9002 (?) open^Croot@server3:~# nc -v 62.42.41.223 9005Warning: forward host lookup failed for 62.42.41.223.vultr.com: No address associated with name62.42.41.223.vultr.com [62.42.41.223] 9005 (?) : Connection refused 3.苹果电脑自带软件1234使用网络实用工具网络实用工具是苹果自带的网络分析工具10.8之前的位于 launchpad --&gt; 其他--&gt; 网络实用工具10.9之后隐藏了该应用，但可以通过 spotlight 搜索 网络实用工具或者 最左上角的苹果标志 --&gt; 关于本机 --&gt;点按&apos;系统报告&apos; --&gt; 标题栏的&apos;窗口&apos; --&gt; 网络实用工具 --&gt; 点按&apos;端口扫描&apos;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"MarkDown 相关","slug":"MarkDown相关","date":"2018-10-23T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/10/23/MarkDown相关/","link":"","permalink":"http://desirepaths.github.io/2018/10/23/MarkDown相关/","excerpt":"记录 MarkDown 使用的心得.","text":"记录 MarkDown 使用的心得. 1.MarkDown 下载2.MarkDown 在 Mac 上面预览3.MarkDwon 的 语法 1.MarkDown 下载 1.Mac 上推荐使用 MacDown,觉得挺好用的. 2.MarkDown 在 Mac 上面预览 1.默认 Mac 上面的 *.md 文件是没有预览功能的，所以就需要安装一个预览的插件: qlmarkdown 2.相关的命令: 12345678#To install$ brew update$ brew cask install qlmarkdown#To uninstall:$ brew cask uninstall qlmarkdown 3.MarkDwon 的 语法 1.MarkDown 语法介绍 2.如果安装了 MacDown 后，也可以在这里 /Applications/MacDown.app/Contents/Resources/help.md 看到相关的语法介绍:","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"iOS国际化","slug":"iOS国际化","date":"2018-10-12T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/10/12/iOS国际化/","link":"","permalink":"http://desirepaths.github.io/2018/10/12/iOS国际化/","excerpt":"1.iOS 的国际化 参考:iOS-应用名称和内容国际化","text":"1.iOS 的国际化 参考:iOS-应用名称和内容国际化 1.iOS 的国际化有 名称国际化 ，内容国际化2.内容国际化分为: .xib/storyboard 的国际化 ，.m 文件的国际化 1.下面详细说说 .m 文件的国际化,及其步骤: 3.m文件国际化的步骤 1.新建一个 繁体中文 的目录 2.新建后，可以在项目的目录中看到新建了一个 zh-Hant.lproj 文件. 3.如果是只要跟随系统语言的翻译，就可以直接用下面的代码去获取: 1NSString *alertTitle = NSLocalizedString(@&quot;BasicAlertTitle&quot;, @&quot;Basic Alert Style&quot;); 4.如果系统的语言为 en ,但是我想 APP 显示 zh-Hant 中文繁体,可以这样设置: 123NSString *bundlePath = [[NSBundle mainBundle] pathForResource:@&quot;zh-Hant&quot; ofType:@&quot;lproj&quot;];NSString *languageStr = [[NSBundle bundleWithPath:bundlePath] localizedStringForKey:(key) value:nil table:@&quot;Localizable&quot;];","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"iOS图形的描绘","slug":"iOS图形的描绘","date":"2018-10-10T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/10/10/iOS图形的描绘/","link":"","permalink":"http://desirepaths.github.io/2018/10/10/iOS图形的描绘/","excerpt":"1.简单线条的描绘2.简单的形状绘制3.自定义 View","text":"1.简单线条的描绘2.简单的形状绘制3.自定义 View 1.简单线条的描绘1.画一条直线(从点 (10,10) 到 (100,100) 的蓝色的线) 1.先把笔头移到指定的位置. 2.再画一条线到指定的点. 3.设置线的宽度和颜色.12345678- (void)drawRect:(CGRect)rect &#123; UIBezierPath *linePath = [UIBezierPath bezierPath]; [linePath moveToPoint:CGPointMake(10.0, 10.0)]; [linePath addLineToPoint:CGPointMake(100.0, 100.0)]; linePath.lineWidth = 3; [[UIColor blueColor] setStroke]; [linePath stroke]; &#125; 2.画一条 sin 曲线. 0.iOS_三角函数 1.先理解 弧长等于半径的圆弧所对应的圆心角为1弧度,即 角度 = 弧度 * (180/PI),弧度 = 角度 * (PI/180) 2.iOS 中的 double sin(double); 函数中的参数是弧度,即 sin(30*(M_PI/180))=0.5 sin(90*(M_PI/180))=1 3.sin 曲线的形状 4.sin 函数中的 振幅 amplitude、周期 cycle、相移 hori_move 和频率 frequency 概念的理解 5.了解了以上的那些，就可以开始描绘出我们的 sin 曲线了: 1234567891011121314151617181920- (void)drawRect:(CGRect)rect &#123; UIBezierPath *linePath = [UIBezierPath bezierPath]; [linePath moveToPoint:CGPointMake(0, 100.0)]; float amplitude = 20; //振幅// float cycle = 2*M_PI/self.frame.size.width;//self.frame.size.width/(2*M_PI); // 一个周期为控件的宽度,弧度计算 float cycle = 360 / self.frame.size.width * 2; // 一个周期为 控件的宽度/2 ,用角度计算 float hori_move = 0; //相移为 0 float ver_move = 100; //垂直位移为 100 for (float x=0.0; x&lt;self.frame.size.width; x++) &#123; // float y = amplitude * sin(cycle*x+hori_move) + ver_move; //弧度计算 float y = amplitude * sin(cycle * (x*(M_PI/180))+hori_move) + ver_move; //角度计算 [linePath addLineToPoint:CGPointMake(x, y)]; &#125; linePath.lineWidth = 1; [[UIColor blueColor] setStroke]; [linePath stroke];&#125; 6.效果图 1.至于为什么波峰先向下，是因为手机屏幕的 Y 轴是倒转的. 7.如果是需要动图，如示波器那种，就只需一直增加 相移和定时更新 View 即可,如: 1.相关的代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879 //// LineView.m// TestWaveView//// Created by tian zeng on 2018/10/10.// Copyright © 2018年 GLB. All rights reserved.//#import &quot;LineView.h&quot;@interface LineView()@property (nonatomic, strong) CADisplayLink *displayLink;@property (nonatomic,assign) CGFloat offsetX;@end@implementation LineView-(void)awakeFromNib&#123; [super awakeFromNib]; self.backgroundColor = [UIColor yellowColor]; [self addDisplayLinkAction];&#125;- (instancetype)initWithFrame:(CGRect)frame&#123; if(self=[super initWithFrame:frame])&#123; self.backgroundColor = [UIColor purpleColor]; &#125; return self;&#125;- (void)addDisplayLinkAction&#123; //添加到刷新的 LOOP 中，刷新的频率与屏幕刷新的频率一样 _displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(displayLinkAction)]; [_displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];&#125;- (void)displayLinkAction&#123; _offsetX += 0.1; //完成,移除刷新 LOOP if (_offsetX &gt;= 1000) [self removeDisplayLinkAction]; // 通知更新 VIEW [self setNeedsDisplay];&#125;- (void)removeDisplayLinkAction&#123; [_displayLink invalidate]; _displayLink = nil;&#125;// Only override drawRect: if you perform custom drawing.// An empty implementation adversely affects performance during animation.- (void)drawRect:(CGRect)rect &#123; UIBezierPath *linePath = [UIBezierPath bezierPath]; [linePath moveToPoint:CGPointMake(0, 100.0)]; float amplitude = 20; //振幅// float cycle = 2*M_PI/self.frame.size.width;//self.frame.size.width/(2*M_PI); // 一个周期为控件的宽度,弧度计算 float cycle = 360 / self.frame.size.width * 2; // 一个周期为 控件的宽度/2 ,用角度计算 float hori_move = 0; //相移为 0 float ver_move = 100; //垂直位移为 100 for (float x=0.0; x&lt;self.frame.size.width; x++) &#123; // float y = amplitude * sin(cycle*x+hori_move+_offsetX) + ver_move; //弧度计算 float y = amplitude * sin(cycle * (x*(M_PI/180))+hori_move+_offsetX) + ver_move; //角度计算 [linePath addLineToPoint:CGPointMake(x, y)]; &#125; linePath.lineWidth = 1; [[UIColor blueColor] setStroke]; [linePath stroke];&#125;@end 2.简单的形状绘制 1.简单的三角形 1.与线的不同主要为最后调用 fill 方法,会自动连接终点与起点，然后围成一个图形. 1234567- (void)drawRect:(CGRect)rect &#123; UIBezierPath *linePath = [UIBezierPath bezierPath]; [linePath moveToPoint:CGPointMake(10, 10.0)]; [linePath addLineToPoint:CGPointMake(50, 10)]; [linePath addLineToPoint:CGPointMake(60, 112)]; [[UIColor blueColor] set]; [linePath fill]; * 2.效果图 2.动态波浪图 1.根据上一步的波浪线条，改装一下即可 * 2.相关的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788//// LineView.m// TestWaveView//// Created by tian zeng on 2018/10/10.// Copyright © 2018年 GLB. All rights reserved.//#import &quot;ShapeView.h&quot;@interface ShapeView()@property (nonatomic, strong) CADisplayLink *displayLink;@property (nonatomic,assign) CGFloat offsetX;@property (nonatomic,assign) CGFloat offsetY;@end@implementation ShapeView-(void)awakeFromNib&#123; [super awakeFromNib]; self.backgroundColor = [UIColor yellowColor]; _offsetY = 100; [self addDisplayLinkAction];&#125;- (instancetype)initWithFrame:(CGRect)frame&#123; if(self=[super initWithFrame:frame])&#123; self.backgroundColor = [UIColor purpleColor]; &#125; return self;&#125;- (void)addDisplayLinkAction&#123; //添加到刷新的 LOOP 中，刷新的频率与屏幕刷新的频率一样 _displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(displayLinkAction)]; [_displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];&#125;- (void)displayLinkAction&#123; _offsetX += 0.1; _offsetY -= 0.1; //完成,移除刷新 LOOP if (_offsetX &gt;= 1000||_offsetY&lt;0)&#123; [self removeDisplayLinkAction]; &#125; // 通知更新 VIEW [self setNeedsDisplay];&#125;- (void)removeDisplayLinkAction&#123; [_displayLink invalidate]; _displayLink = nil;&#125;// Only override drawRect: if you perform custom drawing.// An empty implementation adversely affects performance during animation.- (void)drawRect:(CGRect)rect &#123; UIBezierPath *linePath = [UIBezierPath bezierPath]; [linePath moveToPoint:CGPointMake(0, _offsetY)]; float amplitude = 10; //振幅 // float cycle = 2*M_PI/self.frame.size.width;//self.frame.size.width/(2*M_PI); // 一个周期为控件的宽度,弧度计算 float cycle = 360 / self.frame.size.width * 5; // 一个周期为 控件的宽度/2 ,用角度计算 float hori_move = 0; //相移为 0// float ver_move = 100; //垂直位移为 100 for (float x=0.0; x&lt;self.frame.size.width; x++) &#123; // float y = amplitude * sin(cycle*x+hori_move+_offsetX) + ver_move; //弧度计算 float y = amplitude * sin(cycle * (x*(M_PI/180))+hori_move+_offsetX) + _offsetY; //角度计算 [linePath addLineToPoint:CGPointMake(x, y)]; &#125; [linePath addLineToPoint:CGPointMake(self.frame.size.width, self.frame.size.height)]; [linePath addLineToPoint:CGPointMake(0, self.bounds.size.height)]; [[UIColor blueColor] set]; [linePath fill]; &#125;@end 3.自定义 View 1.让自定义 View 可以在 Interface Builder 中查看及实时编辑. 1.IB_DESIGNABLE Custom Views in Interface Builder 1.Source Code","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"Android Google Map 开发","slug":"Android_google_map开发","date":"2018-09-11T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/11/Android_google_map开发/","link":"","permalink":"http://desirepaths.github.io/2018/09/11/Android_google_map开发/","excerpt":"记录 Android_google开发 相关的过程","text":"记录 Android_google开发 相关的过程 1.参考2.Google 例子3.取得当前位置的经纬度4.国内国外地图切换 1.参考 1.Maps SDK for Android:Get Started 2.GitHub:Google Maps Android API v2 Samples 3.高德:国内国外地图切换 2.Google 例子 记录 Google maps Demo 的搭建过程. 1.从 GitHub google maps 下载 DEMO 2.用 AS 打开 DEMO 中的 ApiDemos/java 项目(因为我们只要开发 java 环境下的 手机端 map) 3.到 Google Maps 控制台 去申请一个 API KEY,然后填入项目 AndroidManifest.xml 中. 1.过程中需要用到 DEBUG 和 RELEASE 的 SHA-1,具体的方法请查看: Get API Key 2.相关的图片: 3.把得到的 KEY 填入 AndroidManifest.xml 的 android:name=&quot;com.google.android.geo.API_KEY 中….. 3.取得当前位置的经纬度1.相关的包的导入 不要在 build.gradle 中直接导入 compile &#39;com.google.android.gms:play-services:9.0.1&#39; ,因为 Android 的项目有 65535 的限制,要根据需要导入必要的包: 如: 12compile &apos;com.google.android.gms:play-services-maps:9.0.1&apos;compile &apos;com.google.android.gms:play-services-location:9.0.1&apos; 1.参考1 2.参考2 2.获取当前位置的代码,相关的 GitHub 源码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210package com.example.mapdemo;import android.content.pm.PackageManager;import android.location.Location;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.ActivityCompat;import android.support.v4.app.FragmentActivity;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.Toast;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.location.FusedLocationProviderClient;import com.google.android.gms.location.LocationServices;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.gms.tasks.OnSuccessListener;public class GetMyLocationDemoActivity extends AppCompatActivity implements OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, GoogleMap.OnMarkerDragListener, GoogleMap.OnMapLongClickListener, GoogleMap.OnMarkerClickListener, View.OnClickListener &#123; private static final String TAG = &quot;MapsActivity&quot;; private GoogleMap mMap; private double longitude; private double latitude; private GoogleApiClient googleApiClient; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.my_location_demo); // Obtain the SupportMapFragment and get notified when the map is ready to be used. SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager() .findFragmentById(R.id.map); mapFragment.getMapAsync(this); //Initializing googleApiClient googleApiClient = new GoogleApiClient.Builder(this) .addConnectionCallbacks(this) .addOnConnectionFailedListener(this) .addApi(LocationServices.API) .build(); &#125; @Override public void onMapReady(GoogleMap googleMap) &#123; mMap = googleMap; mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID); // googleMapOptions.mapType(googleMap.MAP_TYPE_HYBRID) // .compassEnabled(true); // Add a marker in Sydney and move the camera LatLng india = new LatLng(-34, 151); mMap.addMarker(new MarkerOptions().position(india).title(&quot;Marker in India&quot;)); mMap.moveCamera(CameraUpdateFactory.newLatLng(india)); mMap.setOnMarkerDragListener(this); mMap.setOnMapLongClickListener(this); &#125; //Getting current location private void getCurrentLocation() &#123; mMap.clear(); if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &amp;&amp; ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) &#123; // TODO: Consider calling // ActivityCompat#requestPermissions // here to request the missing permissions, and then overriding // public void onRequestPermissionsResult(int requestCode, String[] permissions, // int[] grantResults) // to handle the case where the user grants the permission. See the documentation // for ActivityCompat#requestPermissions for more details. return; &#125;// Location location = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);// if (location != null) &#123;// //Getting longitude and latitude// longitude = location.getLongitude();// latitude = location.getLatitude();//// //moving the map to location// moveMap();// &#125; //参考: https://stackoverflow.com/questions/46481789/android-locationservices-fusedlocationapi-deprecated FusedLocationProviderClient mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this); mFusedLocationClient.getLastLocation() .addOnSuccessListener(this, new OnSuccessListener&lt;Location&gt;() &#123; @Override public void onSuccess(Location location) &#123; // Got last known location. In some rare situations, this can be null. if (location != null) &#123; Log.w(TAG,&quot;location,Latitude:&quot;+location.getLatitude()+&quot; Longtitude:&quot;+location.getLongitude()); // Logic to handle location object //Getting longitude and latitude longitude = location.getLongitude(); latitude = location.getLatitude(); //moving the map to location moveMap(); &#125; &#125; &#125;); &#125; private void moveMap() &#123; /** * Creating the latlng object to store lat, long coordinates * adding marker to map * move the camera with animation */ LatLng latLng = new LatLng(latitude, longitude); mMap.addMarker(new MarkerOptions() .position(latLng) .draggable(true) .title(&quot;Marker in India&quot;)); mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng)); mMap.animateCamera(CameraUpdateFactory.zoomTo(15)); mMap.getUiSettings().setZoomControlsEnabled(true); &#125; @Override public void onClick(View view) &#123; Log.v(TAG, &quot;view click event&quot;); &#125; @Override public void onConnected(@Nullable Bundle bundle) &#123; getCurrentLocation(); &#125; @Override public void onConnectionSuspended(int i) &#123; &#125; @Override public void onConnectionFailed(@NonNull ConnectionResult connectionResult) &#123; &#125; @Override public void onMapLongClick(LatLng latLng) &#123; // mMap.clear(); mMap.addMarker(new MarkerOptions().position(latLng).draggable(true)); &#125; @Override public void onMarkerDragStart(Marker marker) &#123; Toast.makeText(GetMyLocationDemoActivity.this, &quot;onMarkerDragStart&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onMarkerDrag(Marker marker) &#123; Toast.makeText(GetMyLocationDemoActivity.this, &quot;onMarkerDrag&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onMarkerDragEnd(Marker marker) &#123; // getting the Co-ordinates latitude = marker.getPosition().latitude; longitude = marker.getPosition().longitude; //move to current position moveMap(); &#125; @Override protected void onStart() &#123; googleApiClient.connect(); super.onStart(); &#125; @Override protected void onStop() &#123; googleApiClient.disconnect(); super.onStop(); &#125; @Override public boolean onMarkerClick(Marker marker) &#123; Toast.makeText(GetMyLocationDemoActivity.this, &quot;onMarkerClick&quot;, Toast.LENGTH_SHORT).show(); return true; &#125;&#125; 3.发现 google map 地图的坐标在国内显示有偏差 1.原因及解决的方法: 1.地图坐标转换（火星、谷歌、百度、腾讯、高德等坐标） 2.转换前后的对比: 1.转换前: 2.转换后: 4.国内国外地图切换 1.参考 高德 国内国外地图切换 2.参考: iOS判断GPS坐标是否在中国 3.高德:坐标转换与位置判断(更加的准确)","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"iOS地图","slug":"iOS地图","date":"2018-09-11T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/11/iOS地图/","link":"","permalink":"http://desirepaths.github.io/2018/09/11/iOS地图/","excerpt":"记录 iOS 地图开发相关的知识","text":"记录 iOS 地图开发相关的知识 1.参考2.Google Map3.国内国外地图切换 1.参考: 1.App定位和地图的那些坑 2.iOS地图MapKit和定位CoreLocation(上) 3.iOS 火星坐标相关整理及解决方案汇总 4.高德:国内国外地图切换 2.Google Map 参考: https://developers.google.com/maps/documentation/ios-sdk/start 1.下载 并安装Google Map Demo 1.下载源码:https://github.com/googlemaps/maps-sdk-for-ios-samples 2.用 Pod 下载 Google SDK 并打开 123$ cd GoogleMaps$ pod install$ open GoogleMapsDemos.xcworkspace 3.写入 API KEY 3.国内国外地图切换 1.高德地图/苹果地图 切换的例子 2.高德:位置区域判断","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"Blog搭建","slug":"Blog搭建","date":"2018-09-10T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/10/Blog搭建/","link":"","permalink":"http://desirepaths.github.io/2018/09/10/Blog搭建/","excerpt":"记录个人博客的搭建过程(GitHub Pages + Hexo).","text":"记录个人博客的搭建过程(GitHub Pages + Hexo). 1.相关参考 1.Websites for you and your projects. 2.Hexo搭建3.yilia主题4.GitBook 遇到的相关的问题 1.问题一 2.问题二 3.问题三 5.自定义域名指向 2.Hexo搭建1.安装 Hexo https://hexo.io/zh-cn/docs/ 1npm install -g hexo-cli 2.建站 参考:http://www.jianshu.com/p/834d7cc0668d 1.初始化仓库 123hexo init yournamecd yournamenpm install 2.修改 _config.yml 文件. 记得要有缩进!: https://hexo.io/zh-cn/docs/deployment.html 记得添加空格: https://github.com/hexojs/hexo/issues/1154 3.发布 参考:http://www.jianshu.com/p/834d7cc0668d 123hexo cleanhexo ghexo d 4.错误 1.发现错误 Deployer not found: git,就算是像 ‘教程1’ 说的那样，把 git 改为 github ,再运行 npm install hexo-deployer-git --save 也没用. 教程1: https://github.com/hexojs/hexo/issues/1040 12MBP:myBlog tianzeng$ hexo dERROR Deployer not found: github 2.解决，原来是在出现错误后，运行 1.Step 1 123MBP:MyBlog2 tianzeng$ hexo deployERROR Deployer not found: gitMBP:MyBlog2 tianzeng$ npm install hexo-deployer-git --save 2.Step 2 123MBP:MyBlog2 tianzeng$ hexo dINFO Deploying: gitINFO Setting up Git deployment... 这样就可以了. 5.脚本 参考: https://github.com/qinjx/30min_guides/blob/master/shell.md 在 Mac 上自动完成 blog 的上传和 Git 备份! 123456789101112131415161718192021222324252627282930313233343536#!/bin/bashCMD_PATH=`dirname $0`cd $CMD_PATHecho &apos;Begin---------------------------&apos;echo &apos;提交到 blog&apos;echo &apos;hexo clean:&apos;hexo cleanecho &apos;hexo generate:&apos;hexo generateecho &apos;hexo deploy:&apos;hexo deployecho &apos;备份到 Github&apos;echo &apos;git add . :&apos;git add .echo -n &quot;Enter your commit Text(default is &apos;Common Update.&apos;): &quot;read aComment# if 判断 https://billie66.github.io/TLCL/book/chap28.htmlif [ -z &quot;$aComment&quot; ]; then#赋值的操作 https://www.jianshu.com/p/24a5230460fdaComment=&quot;Common Update.&quot;fiecho &quot;git commit -m $aComment&quot;git commit -m &quot;$aComment&quot;#echo &apos;git commit -m &quot;Common Update.&quot; :&apos;#git commit -m &quot;Common Update.&quot;echo &apos;git push:&apos;git pushecho &apos;Finish--------------------------&apos;exit 0 6.把 CNAME 添加到项目中 参考:http://webcache.googleusercontent.com/search?q=cache:Y4TSEfU_xUoJ:jeasonstudio.github.io/2016/05/26/Mac%25E4%25B8%258A%25E6%2590%25AD%25E5%25BB%25BA%25E5%259F%25BA%25E4%25BA%258EGitHub-Page%25E7%259A%2584Hexo%25E5%258D%259A%25E5%25AE%25A2/+&amp;cd=2&amp;hl=zh-CN&amp;ct=clnk&amp;gl=ph 1.把 CNAME 文件放到 /blog/themes/landscape/source 目录下即可(其他想同步到 github 上的文件也是同理). 7.文章开头title 标题,标签，种类,日期. 123456---title: Hello Worldtags: [tags]categories: [categories]date: 2017-11-11 11:46:19--- 3.yilia主题 GitHub: https://github.com/litten/hexo-theme-yilia 1.git clone 主题.2.把主题放到 themes 下面.3.在 _config.yml 中把12#theme: landscapetheme: hexo-theme-yilia 4.点击 ‘所有文章’ 按钮，但什么也没显示 解决方法:需要设置缺失模块。 1、请确保node版本大于6.2 2、在博客根目录（注意不是yilia根目录）执行以下命令： npm i hexo-generator-json-content --save 3、在根目录的 _config.yml 里添加配置： 123456789101112131415161718jsonContent:meta: falsepages: falseposts:title: truedate: truepath: truetext: falseraw: falsecontent: falseslug: falseupdated: falsecomments: falselink: falsepermalink: falseexcerpt: falsecategories: falsetags: true 5.在需要截断的地方，添加以下代码 &lt;!-- more --&gt; ,这样在主页显示的时候，就会显示 more 前面的一段预览代码.6.themes中的config.yml 例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129# Headermenu: 主页: /# SubNavsubnav: github: &quot;https://github.com/ghzjtian&quot; #weibo: &quot;#&quot; #rss: &quot;#&quot; #zhihu: &quot;#&quot; qq: &quot;2941249122&quot; #weixin: &quot;#&quot; #jianshu: &quot;#&quot; #douban: &quot;#&quot; #segmentfault: &quot;#&quot; #bilibili: &quot;#&quot; #acfun: &quot;#&quot; mail: &quot;mailto:wyzjtian@163.com&quot; #facebook: &quot;#&quot; #google: &quot;#&quot; #twitter: &quot;#&quot; #linkedin: &quot;#&quot;rss: /atom.xml# 是否需要修改 root 路径# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。root: /# Content# 文章太长，截断按钮文字excerpt_link: more# 文章卡片右下角常驻链接，不需要请设置为falseshow_all_link: &apos;展开全文&apos;# 数学公式mathjax: false# 是否在新窗口打开链接open_in_new: false# 打赏# 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 2# 打赏wordingreward_wording: &apos;谢谢你的奖赏&apos;# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay: /assets/imgs/alipay.png# 微信二维码图片地址weixin: /assets/imgs/wechat.png# 目录# 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录toc: 1# 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为falsetoc_hide_index: true# 目录为空时的提示toc_empty_wording: &apos;目录，不存在的…&apos;# 是否有快速回到顶部的按钮top: true# Miscellaneousbaidu_analytics: &apos;&apos;google_analytics: &apos;&apos;favicon: /favicon.png#你的头像urlavatar: /assets/imgs/gz.jpeg#是否开启分享share_jia: true#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment#不需要使用某项，直接设置值为false，或注释掉#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/#1、多说duoshuo: false#2、网易云跟帖wangyiyun: false#3、畅言changyan_appid: falsechangyan_conf: false#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的disqus: false#5、Gitmentgitment_owner: false #你的 GitHub IDgitment_repo: &apos;&apos; #存储评论的 repogitment_oauth: client_id: &apos;&apos; #client ID client_secret: &apos;&apos; #client secret# 样式定制 - 一般不需要修改，除非有很强的定制欲望…style: # 头像上面的背景颜色 header: &apos;#4d4d4d&apos; # 右滑板块背景 slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;# slider的设置slider: # 是否默认展开tags板块 showTags: true# 智能菜单# 如不需要，将该对应项置为false# 比如#smart_menu:# friends: falsesmart_menu: innerArchive: &apos;所有文章&apos; friends: false aboutme: &apos;关于我&apos;friends: 友情链接1: http://localhost:4000/ 友情链接2: http://localhost:4000/ 友情链接3: http://localhost:4000/ 友情链接4: http://localhost:4000/ 友情链接5: http://localhost:4000/ 友情链接6: http://localhost:4000/aboutme: 毕业于华师，工作在广州&lt;br&gt;&lt;br&gt;勤勤恳恳搬砖，筑起自己天地 4.GitBook 遇到的相关的问题1.问题一: 这两天想用GitBook写一点东西，突然发现导出的html的导航条不能点击(点击没反应)，如: 我的配置是这样的，123$ GitBook --versionCLI version: 2.3.2GitBook version: 3.2.3 解决方法:经过一番的google,发现是 GitBook version 的问题.参考: https://segmentfault.com/q/1010000006051743 1.build的时候指定版本2.6.7，就可以的了: $ gitbook build --gitbook=2.6.7 2.也可以在 book.json 中指明要编译的GitBook的版本: &quot;gitbook&quot;: &quot;2.6.7&quot;, 2.问题二: 在指明了GitBook的version后，编译 $ gitbook build 时又发现了另外的一个问题，出错: &quot;Cannot find module &#39;internal/fs&#39;&quot; 解决方法https://github.com/npm/npm/issues/14232是node 的问题，把node 切换回旧的就行了,node 切回前: 1234$ node -vv8.4.0$ npm -v5.3.0 切回后: 1234$ node -vv6.11.2$ npm -v3.10.10 node切换的步骤: 1.下载 n: $ npm install -g n 2.下载node 的LTS版本,这样就可以了: 1234567$ sudo n lts install : node-v6.11.2 mkdir : /usr/local/n/versions/node/6.11.2 fetch : https://nodejs.org/dist/v6.11.2/node-v6.11.2-darwin-x64.tar.gz######################################################################## 100.0% installed : v6.11.2 这样就可以用version 2.6.7进行愉快地导出html了: 1234567891011121314151617181920$ gitbook build(node:8140) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.(node:8140) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.info: loading book configuration....warn: gitbook version specified in your book.json might be too strict for future patches, &apos;2.x.x&apos; is more adequate info: OK info: load plugin gitbook-plugin-tbfed-pagefooter ....OK info: load plugin gitbook-plugin-splitter ....OK info: load plugin gitbook-plugin-anchor-navigation-ex ....OK info: load plugin gitbook-plugin-highlight ....OK info: load plugin gitbook-plugin-search ....OK info: load plugin gitbook-plugin-sharing ....OK info: load plugin gitbook-plugin-fontsettings ....OK info: &gt;&gt; 7 plugins loaded info: start generation with website generator info: clean website generatorinfo: OK info: generation is finished Done, without error 3.问题三 1.出现 Cannot find module &#39;internal/util/types&#39; 错误 1.怀疑是 Mac 升级了相关的 node,npm 等等引起的错误(gitbook v2.6.7 支持的 node 的版本太低,现在的 Mac 的相关软件的版本比较高)，将不做处理，怕引起相关软件的不兼容. 2.目前 Mac 的软件的版本为: 1234MB-Pro-2:ge_li_bo_pei_xun tianzeng$ node -vv10.3.0MB-Pro-2:ge_li_bo_pei_xun tianzeng$ npm -v6.1.0 5.自定义域名指向方法 1: 1.在 Github 的仓库 Settings 中设置 方法 2: 1.在 本地仓库的 相应的主题/source 下添加 CNAME 文件，并在里面放上想要的 domain ,如:","categories":[{"name":"blog","slug":"blog","permalink":"http://desirepaths.github.io/categories/blog/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://desirepaths.github.io/tags/blog/"}]},{"title":"debian系统的安装及下载","slug":"debian系统的安装及下载","date":"2018-09-07T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/07/debian系统的安装及下载/","link":"","permalink":"http://desirepaths.github.io/2018/09/07/debian系统的安装及下载/","excerpt":"debian系统的安装及下载 在本地的旧机器上面安装 debian 系统的过程记录.","text":"debian系统的安装及下载 在本地的旧机器上面安装 debian 系统的过程记录. 1.下载2.U 盘安装盘的制作3.debian 系统的安装 1.下载 1.在 http://cdimage.debian.org/debian-cd/ 上下载最新的 debian 系统. 1.要根据计算机的 CPU 支持的位数去下载相应的系统安装包. 1.cpu处理器架构小知识 2.怎样查看计算机是32位还是64位操作系统 2.U 盘安装盘的制作 1.Mac 系统上. 1.参考: Mac制作Linux启动盘 2.操作步骤: 123456789debianinstaller user$ sudo diskutil unmountDisk /dev/disk2Password:Unmount of all volumes on disk2 was successfuldebianinstaller user$ sudo dd if=/Users/user/Downloads/debian-8.8.0-amd64-netinst.iso/debian-8.8.0-amd64-netinst.iso of=/dev/disk2 bs=1mPassword:247+0 records in247+0 records out258998272 bytes transferred in 49.859634 secs (5194548 bytes/sec) 3.debian 系统的安装 1.在bios中选择USB启动 2.按照提示安装 debian install(最小化安装)","categories":[{"name":"linux","slug":"linux","permalink":"http://desirepaths.github.io/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"debian系统","slug":"debian系统","date":"2018-09-05T14:08:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/05/debian系统/","link":"","permalink":"http://desirepaths.github.io/2018/09/05/debian系统/","excerpt":"介绍与 debian 系统相关的命令","text":"介绍与 debian 系统相关的命令 1.系统升级2.相关的操作命令3.设置系统时间4.设置中文环境5.设置 ssh 免密登录 1.系统升级1.相关的参考 1.debian8(jessie) -&gt; debian9(stretch) 1.How to Upgrade Debian 8 (Jessie) to 9 (Stretch) safely 2.相关的操作命令 1.查看版本号:# cat /etc/os-release 2.查看端口的使用情况:# netstat -ntlp 3.设置系统时间 1.Debian 官方方法: 2.How to config Time and Date on Debian 8 (NTP) 使用 NTP 服务器去自动纠正. 1.设置自动纠正时间 1.更新源. 1# apt-get update 2.安装 ntp . 1# apt-get install ntp 3.备份 localtime . 1# mv /etc/localtime /etc/localtime.back 4.建立链接. 1# ln -s /usr/share/zoneinfo/PRC /etc/localtime 5.重启 ntp. 1#service ntp restart 2.查看当前的时间12root@Tim_s_Server2:/etc# dateWed Nov 15 13:52:41 CST 2017 4.设置中文环境 背景:在安装debian 时选择了中文的安装环境，然后在安装完成后发现有一些文字会显示菱形. 在网络上找到解决的方法: 1.debian添加中文支持 2.Perl: warning: Setting locale failed in Debian and Ubuntu 3.Linux之Debian夸平台时文件名乱码 4.Mac 上 FTP 工具 Transmit 不能显示中文 中文显示成了乱码 解决方法 解决方法:将Transmit菜单VIEW中的text encoding里设置为UTF-8就可以显示中文文件名了。 1.步骤: 1.在 sudo 下运行 dpkg-reconfigure locales，选择上以下选项： 123456en_US ISO-8859-1zh_CN GB2312zh_CN.GBK GBKzh_CN.UTF-8 UTF-8zh_TW BIG5zh_TW.UTF-8 UTF-8 2.然后安装字体(前面两个是简体的，后面两个是繁体的) 1234# apt-get install fonts-arphic-gbsn00lp# apt-get install fonts-arphic-gkai00mp# apt-get install fonts-arphic-bsmi00lp# apt-get install fonts-arphic-bkai00mp 重新启动服务器: reboot . 完成后相关截图: 4.设置 LANG 为 中文. 123456# LANG=en_US# echo $LANGen_US//开始设置.# LANG=zh_CN.UTF-8# echo $LANG 5.设置 ssh 免密登录1.参考: 1.Linux 下 的ssh免密登录 2.ssh免密登录配置 2.相关的步骤: 1.在 客户端(如 Mac) 生成私钥密钥对. 1.生成方法:Generating a new SSH key pair 2.在 服务器端(如 Debian) 的用户的主目录下的 .ssh/ 下新建一个文件 authorized_keys 1.如果是 root 用户,相应的 .ssh 目录路径为 /root/.ssh,如果是 tian 用户,相应的 .ssh 目录路径为 /home/tian/.ssh. 2.如果没有 .ssh 目录,需要自己新建. 3.然后把需要免密登录的客户端的 公钥 添加到 authorized_keys 文件后面,如: 12root@debian:~/.ssh# cat authorized_keysssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBhaX9ZlQtaunrVjNBDcmRIcinu8d9FkXahiXwBPu6vn7TQXfmb7ozRAp5OD7/OYXlIF2L9MBCMynIyysIzcAIX0tJ47Q9pIjAEM1z89KFx2w58/U95wWZ0dyO1D2dkMa0bJCNoGt2EimgElUxCAi3Svr/ygOScGdF7TiALL/EQR0A6dIeWEw/OziCI1Smds4HKe82FegQ7Ywj5Bm/LknvGF8tmehZJ/0Tf4I4wgSdjT0GH8tAnSbzb3ZuNUBlUOaRfnBkNjApsPClFAqbp29IQ4WcWea3MdMiQAU4s9S22Yuc5Dv97oGfhcEE9vLmRGY5NsCM6cIDQYYineVvNq3F683oYfMy3bgbFiWwOtTB2bWLgDgG0cCoLt9Z9Rgh0bJsvI2fyBHc7WFOrumaK/hTb+fkv85q8+NR9XKiH3t1eSflJzqSpkthqjT8wDZ8HYLk0G4ktXg7qCFK5aMyycjO675/anygXe/mnGW5iOCDXnWSkXerKYcnf0RUx+V9JpBjezbgRmNUEXmQfC6IJeVoaAM7WcuwnXiAgfQGYKY1JdQMEzyj5CcvWYxiQsU8NWTGcwHqsQkszW6rRW86Z3HVlB2SJZzS1NAyTMh6GMFGE61pm17KNBh8nHskgy/AhRSPdgUxDqXEblVdnF74DsGrx+8DVAIcuhS0dTT7gFB8rw== abcd@163.com(GLB MBP) 3.在登录时，只要在客户端的 terminal 上输入命令 ssh yourUserName@ip_address ,即可远程免密登录.","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"Shadowsocks 的搭建","slug":"Shadowsocks_的搭建","date":"2018-09-04T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/04/Shadowsocks_的搭建/","link":"","permalink":"http://desirepaths.github.io/2018/09/04/Shadowsocks_的搭建/","excerpt":"Shadowsocks 的搭建 关于 Shadowsocks 的搭建计划.","text":"Shadowsocks 的搭建 关于 Shadowsocks 的搭建计划. 1.shadowsocks-libev 的安装2.shadowsocks-libev 的多用户搭建3.相关的控制的命令4.相关的软件5.相关端口被屏蔽6.客户端设置的分享 1.Shadowsocks-libev 的安装 1.官方的 Github 安装介绍 2.shadowsocks-libev 的多用户搭建 1.多用户的搭建 2.教程: 1.到 /etc/shadowsocks-libev 中复制一个 config.json 文件，并修改为想要的设置 2.然后用 ss-server 配置,配置完就重启,ss-server -c config1.json -f pid1 3.如果有多个用户,就继续下面的配置(记得要有 configX.json 文件) 1.ss-server -c config2.json -f pid2 2.ss-server -c config3.json -f pid3 3.Config.json 文件的配置 DEMO: 123456789user@Company:/etc# cat /etc/shadowsocks-libev/config.json&#123; &quot;server&quot;:&quot;104.238.114.125&quot;, &quot;server_port&quot;:8191, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;111111&quot;, &quot;timeout&quot;:60, &quot;method&quot;:&quot;aes-256-cfb&quot;&#125; 3.相关的控制的命令 1.查看端口使用情况: netstat －antu. 2.启动、停止、重启: service shadowsocks-libev start/stop/restart 1.注意，如果是多用户的话，上面的命令只会对 config.json 有用.(同样原理适用于主机重启后 !! 所以主机重启后务必检查相关的端口配置有没有开启 !!!) 1.停止: 1.用 netstat -tlnp 或 ps -aux | less 查看了程序的 PID 号后，就用 kill -9 xxx(pid) 去杀死指定 PID 的程序. 2.开始: ss-server -c config3.json -f pid3 4.相关的软件 1.TCP BBR 拥堵控制算法 的开启: 1.BBR 阻塞算法，真是黑科技 2.Debian / Ubuntu 更新内核并开启 TCP BBR 拥塞控制算法 2.speedtest-cli测速工具 3.搭建过程: 1.内核查看的命令 cat /proc/version 2.过程(摘自1.BBR 阻塞算法，真是黑科技): 123456加载内核模块。先运行 sudo modprobe tcp_bbr 看一看，没问题的话，就创建一个 /etc/modules-load.d/80-bbr.conf ，里面写上 tcp_bbr 七个字，就会每次开机自动加载 tcp_bbr 模块了。让内核使用 BBR 为阻塞控制算法。cat /proc/sys/net/ipv4/tcp_available_congestion_control 看看里面有没有 bbr 三个字。没问题的话， sudo sysctl net.ipv4.tcp_congestion_control=bbr 来启用 BBR 。除非你想每次开机都运行一遍 sysctl ，记得创建一个 /etc/sysctl.d/80-bbr.conf ，写上 net.ipv4.tcp_congestion_control = bbr 就可以了。 5.相关端口被屏蔽 1.发现（20190304）一个端口 9005 不能连接成功，经过测试，发现是被国内屏蔽了. 1.测试过程: 1.本地的 Mac 用 nc -v 62.42.41.223 9005 不通过. 2.外国的 Linux Debian 用 nc -v 62.42.41.223 9005 通过. 6.客户端设置的分享 1.遇到的 Bug: 1.经过实战发现,如果是用 ShadowsocksX-NG(for mac)相关的二维码分享,旧版本的 Shadowsocks(Android 或 Windows ) 都不会被识别，所以要分享 二维码的图片，还是要用旧版本的 Windows 客户端去做分享.","categories":[{"name":"ss","slug":"ss","permalink":"http://desirepaths.github.io/categories/ss/"}],"tags":[{"name":"ss","slug":"ss","permalink":"http://desirepaths.github.io/tags/ss/"}]},{"title":"ngrok的搭建","slug":"ngrok的搭建","date":"2018-09-04T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/04/ngrok的搭建/","link":"","permalink":"http://desirepaths.github.io/2018/09/04/ngrok的搭建/","excerpt":"ngrok的搭建 内网穿透工具 ngrok 的搭建 。","text":"ngrok的搭建 内网穿透工具 ngrok 的搭建 。 1.参考链接2.搭建步骤3.安装 screen 1.参考链接 1.官网：https://ngrok.com/ 2.源码：https://github.com/inconshreveable/ngrok 2.搭建步骤1.使用 ngrok 的免费服务. 1.Setup &amp; Installation 2.但是这个免费版的不能 自定义 域名,如出现一下提示. 12345678Mac Tian$ ./ngrok http -subdomain=tiantestdomain 80Tunnel session failed: Only paid plans may bind custom subdomains.Failed to bind the custom subdomain &apos;tiantestdomain&apos; for the account &apos;JingTianZeng&apos;.This account is on the &apos;Free&apos; plan.Upgrade to a paid plan at: https://dashboard.ngrok.com/billing/planERR_NGROK_313 2.因为这个 ngrok 是个开源的项目，所以可以自己搭建一个内网穿透服务.1.参考： 1.VPS自搭建Ngrok内网穿透服务() 2.How to run your own ngrokd server 3.Run Ngrok on Your Own Server Using Self-Signed SSL Certificate (主要参考这个 !!!) 2.具体过程(位于公网的服务器端,有唯一的 Address,负责 DNS 的转换.): 1.按照 3 的教程,一步一步来就可以了 !!! 2.主要的代码有: 12345678910 user@JapanServer:~# ls go go1.8.1.linux-amd64.tar.gz ngrok ngrok_server user@JapanServer:~# cd ngrok_server user@JapanServer:~/ngrok_server# ls ngrokd server.crt server.key # 开启 ngrokd./ngrokd -tlsKey=server.key -tlsCrt=server.crt -domain=&quot;ngrok.tianlovezhen.site&quot; -httpAddr=&quot;:80&quot; -httpsAddr=&quot;:443&quot; 3.让 ngrokd 在后台运行(参考 3 的评论区.) 1.因为按照 3 的教程, ngrokd 在 ssh 关闭后，也会自动关闭.所以需要让它在后台自动运行. 2.运行命令 ./ngrokd -log=stdout -tlsKey=device.key -tlsCrt=device.crt -domain=&quot;something.tunnel.com&quot; -httpAddr=&quot;:80&quot; -httpsAddr=&quot;:443&quot; &gt; /dev/null &amp; 3.如果需要关闭，就运行 ps -ef | grep &quot;ngrokd&quot; 或 netstat -ntlp 查找出 ngrok 的 PID ，然后运行 kill -9 [PID] 去关闭 ngrokd 4.让 ngrokd 在后台运行(用 screen 去实现) 1.具体用法请参考 SSH远程会话管理工具 - screen使用教程 3.客户端(位于内网的服务器，负责网页的内容) 1.下载上一步 make release-server release-client 后生成的客户端程序 ngrok,在所运行命令路径的 bin 中. 1.下载 Linux:~ user$ scp user@1.2.3.4:/user/ngrok/bin/ngrok /Users/user/Desktop 2.生成一个配置文件如: ngrok.cfg ,在里面写上: 12server_addr: [NGROK_BASE_DOMAIN]:4443trust_host_root_certs: false 3.运行命令开始内网穿透,如: ./ngrok -subdomain testing -config=ngrok.cfg 80 4.后台运行(需要借助 screen 去实现) 1.具体用法请参考 SSH远程会话管理工具 - screen使用教程 3.安装 screen 1.参考: 1.SSH远程会话管理工具 - screen使用教程 2.怎样在 linux 启动时开启 screen ,并自动打开 ngrokd 或 ngrok ???","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"speedtest-cli测速工具","slug":"speedtest_cli测速工具","date":"2018-09-04T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/09/04/speedtest_cli测速工具/","link":"","permalink":"http://desirepaths.github.io/2018/09/04/speedtest_cli测速工具/","excerpt":"speedtest-cli测速工具服务器网络测试工具. 安装: https://www.howtoforge.com/tutorial/check-internet-speed-with-speedtest-cli-on-ubuntu/","text":"speedtest-cli测速工具服务器网络测试工具. 安装: https://www.howtoforge.com/tutorial/check-internet-speed-with-speedtest-cli-on-ubuntu/ 1.用法2.效果:3.安装4.外网速度测试,到长沙(6132)5.安装了 bbr 后 1.用法 1.http://www.ttlsa.com/linux/use-speedtest-cli-test-internet-speed/ 2.https://fiveyellowmice.com/posts/2016/12/bbr-congestion-algorithm-dark-science.html 2.效果:123456789101112131415161718192021222324252627282930313233343536373839# speedtest-cliRetrieving speedtest.net configuration...Testing from China Telecom Guangdong (183.6.115.218)...Retrieving speedtest.net server list...Selecting best server based on ping...Hosted by CSL (Tai Po) [120.14 km]: 62.55 msTesting download speed................................................................................Download: 9.51 Mbit/sTesting upload speed................................................................................................Upload: 6.56 Mbit/s# speedtest-cli --bytesRetrieving speedtest.net configuration...Testing from China Telecom Guangdong (183.6.115.218)...Retrieving speedtest.net server list...Selecting best server based on ping...Hosted by CSL (Tai Po) [120.14 km]: 16.276 msTesting download speed................................................................................Download: 1.19 Mbyte/sTesting upload speed................................................................................................Upload: 0.83 Mbyte/s# speedtest-cli --simplePing: 16.259 msDownload: 8.11 Mbit/sUpload: 6.60 Mbit/s//Share# speedtest-cli --shareRetrieving speedtest.net configuration...Testing from China Telecom Guangdong (183.6.115.218)...Retrieving speedtest.net server list...Selecting best server based on ping...Hosted by MTel (Macau) [106.14 km]: 26.26 msTesting download speed................................................................................Download: 9.62 Mbit/sTesting upload speed................................................................................................Upload: 6.60 Mbit/sShare results: http://www.speedtest.net/result/6775155371.png 3.安装 1.这次用的是第二种的方法去安装 speedtest-cli 123456789101112131415161718192021222324252627# cd /tmp# wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py--2017-11-08 09:05:52-- https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.pyResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.52.133Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.52.133|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 47441 (46K) [text/plain]Saving to: `speedtest.py&apos;100%[=========================================================================&gt;] 47,441 --.-K/s in 0.002s 2017-11-08 09:05:53 (18.4 MB/s) - `speedtest.py&apos; saved [47441/47441]# lsmaster.zip speedtest-cli-master speedtest.py# chmod 755 speedtest.py# mv speedtest.py /usr/local/bin/speedtest-cli# speedtest-cliRetrieving speedtest.net configuration...Testing from Choopa, LLC (104.238.115.218)...Retrieving speedtest.net server list...Selecting best server based on ping...Hosted by Comcast (Seattle, WA) [1.51 km]: 1.355 msTesting download speed................................................................................Download: 4493.23 Mbit/sTesting upload speed................................................................................................Upload: 1697.58 Mbit/s 4.外网速度测试,到长沙(6132)123456789101112# speedtest-cli --bytes --server=6132 --shareRetrieving speedtest.net configuration...Testing from Choopa, LLC (104.238.115.218)...Retrieving speedtest.net server list...Selecting best server based on ping...Hosted by ChinaTelecom.Hunan (Changsha) [9937.81 km]: 333.483 msTesting download speed................................................................................Download: 2.67 Mbyte/sTesting upload speed................................................................................................Upload: 0.60 Mbyte/sShare results: http://www.speedtest.net/result/6775344464.png# 5.安装了 bbr 后 20171108,18:00 123456789101112# speedtest-cli --bytes --server=6132 --shareRetrieving speedtest.net configuration...Testing from Choopa, LLC (104.238.115.218)...Retrieving speedtest.net server list...Selecting best server based on ping...Hosted by ChinaTelecom.Hunan (Changsha) [9937.81 km]: 408.372 msTesting download speed................................................................................Download: 1.90 Mbyte/sTesting upload speed................................................................................................Upload: 0.71 Mbyte/sShare results: http://www.speedtest.net/result/6775434818.png# 20171108,22:00 1234567891011# speedtest-cli --bytes --server=6132 --shareRetrieving speedtest.net configuration...Testing from Choopa, LLC (104.238.115.218)...Retrieving speedtest.net server list...Selecting best server based on ping...Hosted by ChinaTelecom.Hunan (Changsha) [9937.81 km]: 506.287 msTesting download speed................................................................................Download: 1.53 Mbyte/sTesting upload speed................................................................................................Upload: 1.40 Mbyte/sShare results: http://www.speedtest.net/result/6775983072.png","categories":[{"name":"speedtest","slug":"speedtest","permalink":"http://desirepaths.github.io/categories/speedtest/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"Xamarin用法","slug":"Xamarin用法","date":"2018-08-25T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/08/25/Xamarin用法/","link":"","permalink":"http://desirepaths.github.io/2018/08/25/Xamarin用法/","excerpt":"Xamarin用法 公司想要用 Xamarin 去做开发 APP ，缩短 APP 的开发周期，现在记录一下相关的学习过程.","text":"Xamarin用法 公司想要用 Xamarin 去做开发 APP ，缩短 APP 的开发周期，现在记录一下相关的学习过程. 1.相关的参考链接2.对 Xamarin 相关的使用评论3.相关的使用记录 1.相关的参考链接 1.系统要求 2.Xamarin GitHub source code 3.Xamarin 第三方库/工具收集Github 4.Xamarin.Forms 应用生命周期 5.MayueCif 简书 6.MayueCif 博客 2.对 Xamarin 相关的使用评论 1.Xamarin SUCKS! Lessons learned from weeks wasted 2.Xamarin.iOS 初步体验 3.相关的使用记录 1.同一时间用 Vusial Studio 打开 两个 Project 1.用终端打开 open -n -a &quot;Visual Studio&quot;.","categories":[{"name":"MicroSoft","slug":"MicroSoft","permalink":"http://desirepaths.github.io/categories/MicroSoft/"}],"tags":[{"name":"MicroSoft","slug":"MicroSoft","permalink":"http://desirepaths.github.io/tags/MicroSoft/"}]},{"title":"iOS_学习","slug":"iOS_学习","date":"2018-08-14T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/08/14/iOS_学习/","link":"","permalink":"http://desirepaths.github.io/2018/08/14/iOS_学习/","excerpt":"iOS 学习 整理以前用到的一些 开发的资料.","text":"iOS 学习 整理以前用到的一些 开发的资料. 1.视频2.各个名词的理解3.用到的开发的方法.4.相关的技术网站或博客 1.视频 1.StanFord Video(会用 iTunes 打开) 2.Youtube 3.iOS 学习资料整理{非常有用,强烈推荐} 4.iOS 开发的正确入坑姿势 5.网易公开课 2.各个名词的理解 1.property retain, assign, copy, nonatomic in Objective-C 2.Differences between strong and weak in Objective-C 3.OC属性的setter和getter方法 1.iOS @property、@synthesize和@dynamic 4.Cocoa: What’s the difference between the frame and the bounds? 5.typedef和#define的用法与区别 6.沙盒机制 1.File System Basics 3.用到的开发的方法. 1.iOS开发之给项目添加PCH文件 2.Xcode 中 蓝色 和 黄色 文件夹的不同点 1.Why are there some blue folders in my Xcode project? 2.Xcode Folder References 3.UIImage imageNamed：在蓝色引用的Xcode文件夹中找不到图像 3.自定义iOS的Back按钮(backBarButtonItem）和pop交互手势(interactivepopgesturerecognizer) 4.iOS程序猿之JSONKit的使用 5.iOS APP 之间内容的分享 1.iOS实现App之间的内容分享 2.通过UIDocumentInteractionController预览和分享”史蒂夫•乔布斯传” 3.通过UIActivityViewController实现更多分享服务 6.iOS 宏相关 1.iOS 日常工作之常用宏定义大全 4.相关的技术网站或博客 1.imlifengfeng 1.iOS Core Animation详解 2.iOS NSURLSession详解 3.iOS CALayer详解 4.iOS多线程详解 2.Raywenderlich 1.强大的教学网站，更新速度快. 3.Use your loaf 1.该网站主要讲解 iOS 相关的特性及操作知识. 2.GitHub 上源码地址 2.包括: 1.IB_DESIGNABLE Custom Views in Interface Builder 自定义 View 的实时开发查看 2.Xcode 9 Vector Images 用 PDF 文件代替 PNG@x 图片文件,使得使用方便","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"iOS_APP基本组件","slug":"iOS_APP基本组件","date":"2018-08-14T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/08/14/iOS_APP基本组件/","link":"","permalink":"http://desirepaths.github.io/2018/08/14/iOS_APP基本组件/","excerpt":"iOS_APP基本组件 整理以前用到的 iOS APP 常见的基本组件.","text":"iOS_APP基本组件 整理以前用到的 iOS APP 常见的基本组件. 0.参考 1.Top 10 Libraries for iOS Developers 1.第三方组件 1.第三方组件 1.状态提示框 1.MBProgressHUD 弹框组件 2.SVProgressHUD 2.ATNavBarButton,Bar 上的 Button 3.等待转圈图 JQIndicatorView 4.SDWebImage 1.图片加载框架. 5.Flipboard/FLAnimatedImage 1.GIF 动画加载框架. 6.MJRefresh [7.Bugly] 8.自定义 通知栏 信息: CWStatusBarNotification 9.软键盘弹出，智能调整与 TextField 的距离.IQKeyboardManager 10.检测网络状态,Reachability 11.FMDB 数据库处理 1.GitHub 地址 2.iOS FMDB详解 3.简单的 DEMO 12.网络请求 1.AFNetworking (Object-C) 1.GitHub 地址+DEMO(但是 DEMO 的 URL 有问题.) 2.Weather APP(一个使用 AFNetWorking 的例子.From raywenderlich) 2.Alamofire/Alamofire(Switch) 1.GitHub 地址 13.CoderMJLee/MJExtension 1.字典模型相互转换. 14.CocoaLumberjack/CocoaLumberjack 0.GitHub 源代码(包括文档) 1.可以把 log 保存到 文件/数据库. 2.在 Xcode 用不同的颜色显示. 3.Debug 和 Release 的 Log 有不同的输出. 1.一个 Logging 框架,相关教程参考: 1.CocoaLumberjack：简单好用的Log库 2.深入解析iOS日志库CocoaLumberjack 2.打印保存的 log 的路径的命令为 : DDLogVerbose(@&quot;%@&quot;,[[[NSFileManager defaultManager]URLsForDirectory:NSLibraryDirectory inDomains:NSUserDomainMask] lastObject]); 4.保存的 file 的路径为: /Users/user/Library/Developer/CoreSimulator/Devices/A656FEC2-922B-4D92-BB56-F42EDDD0BD18/data/Containers/Data/Application/E1BE1827-1DEA-48E8-B5E6-7F76E0837FE8/Library/Caches/Logs/com.deusty.iOSLibStaticTest 2018-09-13--14-53-34-390.log 15.CocoaLumberjack/CocoaLumberjack 0.让 Xcode 的 Log 输出不同的颜色. 1.GitHub 源码 2.Can’t work Xcode9? 3.Making Xcode-Colors work with Xcode 8.1 — Xcode 9 16.代码实现 AutoLayout 复杂的布局效果. 1.SnapKit/Masonry 17.MGJRouter 路由 18.LGAlertView 状态提示 View 19.ReactiveCocoa 1.最快让你上手ReactiveCocoa之基础篇 2.iOS ReactiveCocoa框架的简单使用","categories":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://desirepaths.github.io/tags/iOS/"}]},{"title":"前端_css_调试","slug":"前端_css_调试","date":"2018-08-13T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/08/13/前端_css_调试/","link":"","permalink":"http://desirepaths.github.io/2018/08/13/前端_css_调试/","excerpt":"前端css调试 这几天在做一个前端的页面，发现因为 墙 的问题，运行不了，在这里特地记录解决的方法.","text":"前端css调试 这几天在做一个前端的页面，发现因为 墙 的问题，运行不了，在这里特地记录解决的方法. 1.背景2.解决方法 1.背景 1.之前在网页上 css 写的是: 1234&lt;link rel=&quot;stylesheet&quot; href=&quot;https://www.w3schools.com/w3css/4/w3.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Raleway&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&quot; integrity=&quot;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&quot; crossorigin=&quot;anonymous&quot;&gt; 在自己的电脑上跑没问题，但是有小伙伴运行发现在他们的电脑上跑，一直 LOAD 不出来，很久后 LOAD 出来了，但是版面乱七八糟的，经过排查，发现是 墙的问题，我的电脑一直在 翻，所以没有察觉到. 2.解决方法 1.到各个网站下载对应的 CSS 代码 1.特别注意 font-awesome.min.css 的 CSS，要到 官网 去下载完整的包导入才行,因为它同时还关联其它的 CSS/JS/FONT 包的，如果只是导入一个，显示的效果会不完整. 2.导入到代码中，以 LARAVEL 为例: 1.把下载好的 CSS 放到 public/css 文件夹中. 2.在 blade.php 中导入,导入方法可以参考以下: 1234 &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo asset(&apos;css/w3.css&apos;)?&gt;&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo asset(&apos;css/raleway.css&apos;)?&gt;&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; URL::asset(&apos;css/font-awesome.min.css&apos;)&#125;&#125;&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo asset(&apos;css/bootstrap.min.css&apos;)?&gt;&quot;&gt;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://desirepaths.github.io/categories/frontend/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://desirepaths.github.io/tags/frontend/"}]},{"title":"voyager学习","slug":"voyager学习","date":"2018-08-02T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/08/02/voyager学习/","link":"","permalink":"http://desirepaths.github.io/2018/08/02/voyager学习/","excerpt":"voyager学习 1.laravel 中 voyager 框架的学习和使用. 2.voyager 是一个后台管理系统，功能强大.","text":"voyager学习 1.laravel 中 voyager 框架的学习和使用. 2.voyager 是一个后台管理系统，功能强大. 1.voyager 相关的资料2.voyager 相关的功能记录3.voyager 的扩展4.voyager 自动化5.voyager 的部署 1.voyager 相关的资料 1.voyager 开发文档 2.GitHub 地址 3.voyager 官网 2.voyager 相关的功能记录2.1作为一个 APP 的版本管理后台. 1.进入管理台的 settings 页后，可以增加一个特别的功能,就是返回 APP 的版本信息,如: * 1.相关的 `Route` 的代码，这样就能通过浏览器访问，返回一个 json 格式的 APP 版本信息: 123Route::any(&apos;app_version&apos;, function () &#123; return response(setting(&apos;site.app_version_code&apos;));&#125;); 2.APP 端根据 下载安装APK(兼容Android7.0) 去配置下载功能 3.APP 放在 fir.im 中，根据 教程 去获取下载链接 4.用 com.loopj.android:android-async-http 去做 APP 端的网络请求库. 3.voyager 的扩展 1.pvtl/voyager-frontend 1.用 Laravel 做底层, voyager 做 后台 的前台系统. 2.GitHub 源码 4.voyager 自动化1.生成 BREAD 的数据. 1.参考 voyager 的 post 的 BREAD 的生成的方式(seeds/PostsTableSeeder). 2.About 的 BREAD 的生成例子: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224&lt;?phpuse Illuminate\\Database\\Seeder;use TCG\\Voyager\\Models\\DataRow;use TCG\\Voyager\\Models\\DataType;use TCG\\Voyager\\Models\\Menu;use TCG\\Voyager\\Models\\MenuItem;use TCG\\Voyager\\Models\\Permission;use App\\About;class AboutsTableSeeder extends Seeder&#123; /** * Run the database seeds. * * @return void */ public function run() &#123; //Data Type,数据类型 $dataType = $this-&gt;dataType(&apos;slug&apos;, &apos;abouts&apos;); if (!$dataType-&gt;exists) &#123; $dataType-&gt;fill([ &apos;name&apos; =&gt; &apos;abouts&apos;, &apos;display_name_singular&apos; =&gt; &apos;关于我们&apos;, &apos;display_name_plural&apos; =&gt; &apos;关于我们&apos;, &apos;icon&apos; =&gt; &apos;voyager-people&apos;, &apos;model_name&apos; =&gt; &apos;App\\\\About&apos;, &apos;policy_name&apos; =&gt; &apos;&apos;, &apos;controller&apos; =&gt; &apos;&apos;, &apos;generate_permissions&apos; =&gt; 1, &apos;description&apos; =&gt; &apos;关于我们 页的数据设置&apos;, ])-&gt;save(); &#125; //Data Rows,每个字段的数据格式. $postDataType = DataType::where(&apos;slug&apos;, &apos;abouts&apos;)-&gt;firstOrFail(); $dataRow = $this-&gt;dataRow($postDataType, &apos;id&apos;); if (!$dataRow-&gt;exists) &#123; $dataRow-&gt;fill([ &apos;type&apos; =&gt; &apos;number&apos;, &apos;display_name&apos; =&gt; &apos;自增 ID&apos;, &apos;required&apos; =&gt; 1, &apos;browse&apos; =&gt; 0, &apos;read&apos; =&gt; 0, &apos;edit&apos; =&gt; 0, &apos;add&apos; =&gt; 0, &apos;delete&apos; =&gt; 0, &apos;details&apos; =&gt; json_encode([ &apos;description&apos; =&gt;&apos;自增 ID 的值.&apos;, ]), &apos;order&apos; =&gt; 1, ])-&gt;save(); &#125; $dataRow = $this-&gt;dataRow($postDataType, &apos;icon&apos;); if (!$dataRow-&gt;exists) &#123; $dataRow-&gt;fill([ &apos;type&apos; =&gt; &apos;text&apos;, &apos;display_name&apos; =&gt; &apos;图标,如(fa fa-address-book)&apos;, &apos;required&apos; =&gt; 1, &apos;browse&apos; =&gt; 1, &apos;read&apos; =&gt; 1, &apos;edit&apos; =&gt; 1, &apos;add&apos; =&gt; 1, &apos;delete&apos; =&gt; 1, &apos;details&apos; =&gt; json_encode([ &apos;description&apos; =&gt;&apos;复制 https://www.w3schools.com/icons/fontawesome_icons_webapp.asp 中对应的 Description 的值到这里即可&apos;, ]), &apos;order&apos; =&gt; 2, ])-&gt;save(); &#125; $dataRow = $this-&gt;dataRow($postDataType, &apos;title&apos;); if (!$dataRow-&gt;exists) &#123; $dataRow-&gt;fill([ &apos;type&apos; =&gt; &apos;text&apos;, &apos;display_name&apos; =&gt; &apos;标题&apos;, &apos;required&apos; =&gt; 1, &apos;browse&apos; =&gt; 1, &apos;read&apos; =&gt; 1, &apos;edit&apos; =&gt; 1, &apos;add&apos; =&gt; 1, &apos;delete&apos; =&gt; 1, &apos;details&apos; =&gt; &apos;&apos;, &apos;order&apos; =&gt; 3, ])-&gt;save(); &#125; $dataRow = $this-&gt;dataRow($postDataType, &apos;ability&apos;); if (!$dataRow-&gt;exists) &#123; $dataRow-&gt;fill([ &apos;type&apos; =&gt; &apos;number&apos;, &apos;display_name&apos; =&gt; &apos;能力值(0-100)&apos;, &apos;required&apos; =&gt; 1, &apos;browse&apos; =&gt; 1, &apos;read&apos; =&gt; 1, &apos;edit&apos; =&gt; 1, &apos;add&apos; =&gt; 1, &apos;delete&apos; =&gt; 1, &apos;details&apos; =&gt; json_encode([ &apos;description&apos; =&gt; &apos;范围为: 0 - 100 .&apos;, ]), &apos;order&apos; =&gt; 4, ])-&gt;save(); &#125; $dataRow = $this-&gt;dataRow($postDataType, &apos;show&apos;); if (!$dataRow-&gt;exists) &#123; $dataRow-&gt;fill([ &apos;type&apos; =&gt; &apos;radio_btn&apos;, &apos;display_name&apos; =&gt; &apos;是否显示&apos;, &apos;required&apos; =&gt; 1, &apos;browse&apos; =&gt; 1, &apos;read&apos; =&gt; 1, &apos;edit&apos; =&gt; 1, &apos;add&apos; =&gt; 1, &apos;delete&apos; =&gt; 1, &apos;details&apos; =&gt; json_encode([ &apos;default&apos; =&gt; &apos;1&apos;, &apos;options&apos; =&gt; [ &apos;0&apos;=&gt;&apos;否&apos;, &apos;1&apos; =&gt;&apos;是&apos;, ], ]), &apos;order&apos; =&gt; 5, ])-&gt;save(); &#125; $dataRow = $this-&gt;dataRow($postDataType, &apos;created_at&apos;); if (!$dataRow-&gt;exists) &#123; $dataRow-&gt;fill([ &apos;type&apos; =&gt; &apos;timestamp&apos;, &apos;display_name&apos; =&gt; __(&apos;voyager::seeders.data_rows.created_at&apos;), &apos;required&apos; =&gt; 0, &apos;browse&apos; =&gt; 1, &apos;read&apos; =&gt; 1, &apos;edit&apos; =&gt; 0, &apos;add&apos; =&gt; 0, &apos;delete&apos; =&gt; 0, &apos;details&apos; =&gt; &apos;&apos;, &apos;order&apos; =&gt; 6, ])-&gt;save(); &#125; $dataRow = $this-&gt;dataRow($postDataType, &apos;updated_at&apos;); if (!$dataRow-&gt;exists) &#123; $dataRow-&gt;fill([ &apos;type&apos; =&gt; &apos;timestamp&apos;, &apos;display_name&apos; =&gt; __(&apos;voyager::seeders.data_rows.updated_at&apos;), &apos;required&apos; =&gt; 0, &apos;browse&apos; =&gt; 0, &apos;read&apos; =&gt; 0, &apos;edit&apos; =&gt; 0, &apos;add&apos; =&gt; 0, &apos;delete&apos; =&gt; 0, &apos;details&apos; =&gt; &apos;&apos;, &apos;order&apos; =&gt; 7, ])-&gt;save(); &#125; //Menu Item,在菜单项中添加 关于我们的栏目. $menu = Menu::where(&apos;name&apos;, &apos;admin&apos;)-&gt;firstOrFail(); $menuItem = MenuItem::firstOrNew([ &apos;menu_id&apos; =&gt; $menu-&gt;id, &apos;title&apos; =&gt; &apos;关于我们&apos;, &apos;url&apos; =&gt; &apos;&apos;, &apos;route&apos; =&gt; &apos;voyager.abouts.index&apos;, ]); if (!$menuItem-&gt;exists) &#123; $menuItem-&gt;fill([ &apos;target&apos; =&gt; &apos;_self&apos;, &apos;icon_class&apos; =&gt; &apos;voyager-people&apos;, &apos;color&apos; =&gt; null, &apos;parent_id&apos; =&gt; null, &apos;order&apos; =&gt; 20, ])-&gt;save(); &#125; //Permissions Permission::generateFor(&apos;abouts&apos;); //新增测试的数据. factory(About::class,5)-&gt;create(); &#125; /** * [post description]. * * @param [type] $slug [description] * * @return [type] [description] */ protected function findPost($slug) &#123; return About::firstOrNew([&apos;slug&apos; =&gt; $slug]); &#125; /** * [dataRow description]. * * @param [type] $type [description] * @param [type] $field [description] * * @return [type] [description] */ protected function dataRow($type, $field) &#123; return DataRow::firstOrNew([ &apos;data_type_id&apos; =&gt; $type-&gt;id, &apos;field&apos; =&gt; $field, ]); &#125; /** * [dataType description]. * * @param [type] $field [description] * @param [type] $for [description] * * @return [type] [description] */ protected function dataType($field, $for) &#123; return DataType::firstOrNew([$field =&gt; $for]); &#125;&#125; 5.voyager 的部署 1.部署到 homestead 的步骤. 1.运行 php artisan migrate ,去把数据库先添加了. 2.运行 php artisan voyager:install --with-dummy ,安装必要的 voyager 的信息(如 add user,add BREAD). 3.运行 composer dump-autoload,php artisan db:seed --class=SettingsTableGLBSeeder ,把 Settings 的模拟数据添加进去.","categories":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/tags/php/"}]},{"title":"Android_Realm的使用","slug":"Android_Realm的使用","date":"2018-07-30T10:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/07/30/Android_Realm的使用/","link":"","permalink":"http://desirepaths.github.io/2018/07/30/Android_Realm的使用/","excerpt":"Android_Realm的使用 1.Android 中使用 Realm 数据库","text":"Android_Realm的使用 1.Android 中使用 Realm 数据库 1.参考资料 1.参考资料 1.官网中文文档(不是最新) 2.官网英文文档 3.怎样看待 Realm 这个移动数据库？ 4.Realm数据库 从入门到“放弃” 5.Realm for Android详细教程 2.初步使用教程 1.在项目的 build.gradle 中，写入以下代码 classpath &quot;io.realm:realm-gradle-plugin:5.4.0&quot; 2.在 app 的 build.gradle 中，写入 apply plugin: &#39;realm-android&#39; 和 123realm &#123; syncEnabled = true;&#125; 3.在 Application 中的 onCreate 方法中加入 Realm.init(this); 4.简单的数据操作 1.增加 1234567891011//添加 Realm realm = Realm.getDefaultInstance(); realm.beginTransaction(); SearchHistoryBean history = realm.createObject(SearchHistoryBean.class); history.setId(&quot;1&quot;); history.setType(&quot;Brake&quot;); history.setValue(query); history.setSearchTime(System.currentTimeMillis()); realm.commitTransaction(); 2.查询 1234 //查询Realm mRealm = Realm.getDefaultInstance();RealmResults&lt;SearchHistoryBean&gt; historys = mRealm.where(SearchHistoryBean.class).findAll();QLLog.i(mRealm.copyFromRealm(historys).toString()); 5.导出 APP 中 realm 的数据库: 1.在 AndroidStudio/Device File Explorer 中，打开 data/data/app_package/files/realm-object-ser 中，右键，保存到桌面. 2.用 Realm Studio 打开上一步下载的 数据库文件。","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"DB_Browser_for_SQLite的使用方法","slug":"DB_Browser_for_SQLite的使用方法","date":"2018-07-29T15:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/07/29/DB_Browser_for_SQLite的使用方法/","link":"","permalink":"http://desirepaths.github.io/2018/07/29/DB_Browser_for_SQLite的使用方法/","excerpt":"DB_Browser_for_SQLite的使用方法 在网上看到有个开源的查看 SQLite 中数据的软件 DB_Browser_for_SQLite ，所以下载来看看,没想到下载下来，一打开就 Crash.特意在这里记录下解决的方法","text":"DB_Browser_for_SQLite的使用方法 在网上看到有个开源的查看 SQLite 中数据的软件 DB_Browser_for_SQLite ，所以下载来看看,没想到下载下来，一打开就 Crash.特意在这里记录下解决的方法 1.相关机器及软件的配置 2.解决的步骤 1.在官网下载最新的 Release 版本(Version 3.10.1 released) 1.GitHub 源码 2.官网(MacOS 上会闪退，暂时运行不了) 2.下载下来，安装好后，一打开就 Crash. 3.在 GitHub 中看到好像是 APP 联网的问题 1.遂尝试把 Mac 的网络断掉，然后再打开，可以了!!! 2.然后再打开 APP，然后打开 偏好设置,把里面的 自动更新取消勾选，就 OK ,联网再打开也没事.","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"laravel项目的部署","slug":"laravel项目的部署","date":"2018-07-23T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/07/23/laravel项目的部署/","link":"","permalink":"http://desirepaths.github.io/2018/07/23/laravel项目的部署/","excerpt":"laravel项目的部署 1.记录把服务器部署在 远程服务器的过程.","text":"laravel项目的部署 1.记录把服务器部署在 远程服务器的过程. 1.参考2.安装过程 1.mysql 的安装(安装最新版) 3.遇到的问题 1.Specified key was too long error错误 2.public/index.php主页显示没问题, 但 login,register 等等就显示 404 错误 4.项目的部署 1.参考: 0.服务器(配置支持中文)需要安装的软件(nginx+php+mysql+composer+git+PhpMyAdmin) 1.LAMP环境下的Laravel项目部署 2.请问laravel5项目部署到生产环境的最佳实践？ 3.How to Install Laravel on Debian 9 4.A step by step guide to setup PHP (Laravel) environment (Linux). 5.【GitLab】：Webhooks 实现自动化服务器项目部署 6.Deploying a Laravel 5.6 Web App on Ubuntu 7.How To Install and Use Composer on Debian 8 2.安装过程1.mysql 的安装(安装最新版). 1.How to Set Up MariaDB on Debian 9 2.How to Install MariaDB 10 on Debian and Ubuntu 3.uninstall MariaDB 4.开启远程访问的权限 1.在服务器端进入 mysql ,然后运行命令 grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;remove1112300&#39;; , flush privileges; 2.注释文件 vi /etc/mysql/my.cnf 中的 bind-address = 127.0.0.1 1.如果是 MariaDB, bind-address 在 /etc/mysql/mariadb.conf.d/50-server.cnf处 2.参考: Where is my bind address? 3.记得提前查看 mysql 端口的状态是否在监听 3306,netstat -tulpen. 3.重启服务. service mysql restart 2.PHP 的安装. 0.参考: 1.How-to Install PHP 7.2.x, NGINX 1.10.x &amp; Laravel 5.6 2.Installing Php 7.2 On Debian 8 Jessie And Debian 9 Stretch 1.需要安装的 php 的插件有: 1.php7.0-zip 2.php7.2-gd 3.php7.2-fpm 3.遇到的问题1.服务器做 php artisan migrate 时，出现 Specified key was too long error 错误 解决方法1:Laravel 5.4: Specified key was too long error 同样的方法2: 3.安装新版的 mariaDB(经测试，10.3.8-MariaDB 可以) 2.public/index.php主页显示没问题, 但 login,register 等等就显示 404 错误 1.配置链接 1.需要把 /etc/nginx/sites-available/default 中的 root路径设置到 public 中. 3.执行 composer install 时，遇到 composer the zip extension and unzip command are both missing skipping 的问题 1.解决方法(sudo) apt install zip unzip php7.0-zip 4.只能显示首页，其它页面显示 404 ERROR。 1.需要配置 nginx 的 /etc/nginx/sites-available/default 文件(先 cp 备份好) 1.配置完成后，重启 nginx. 1.检查是否有错误,nginx -t. 2.重启 nginx,service nginx restart 5.在后台增加图片时，显示Impossible to create the root directory &quot;/home/tian/www/html/frontend/storage/app/public/users/August2018&quot;. 1.在 项目的上级目录下，如 /home/tian/www/html , 运行一下命令: chown -R www-data:root . 6.在运行 composer install 时，出现 mmap() failed: [12] Cannot allocate memory 错误 1.PHP Composer update “cannot allocate memory” error 解决的方法，运行 123/bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024/sbin/mkswap /var/swap.1/sbin/swapon /var/swap.1 4.项目的部署 1.把代码放到 GitLab 中(因为 GitLab 可以创建私人的仓库,而且日本服务器 clone 的速度比国内的 Gitee 快 n 倍) 2.把 nginx 的 root 路径改为当前 laravel 项目的 public 目录. 1.vi /etc/nginx/sites-available/default 2.修改 root /var/www/html/FastCloud_Server/public/ 3.重启 nginx(记得 nginx 要有 phpXX-fpm 的支持才行) 1.nginx -t 2.service nginx restart 3.到项目路径下，执行 composer install,安装依赖. 1.国内的服务器，最好是更改 composer 的源: 1.Packagist 镜像使用方法 1.运行 composer config -g repo.packagist composer https://packagist.phpcomposer.com 2.Composer 中文镜像 / Packagist 中国全量镜像正式发布！ 1.运行: composer config -g repo.packagist composer https://packagist.laravel-china.org 2.如果是在本地 Mac 下运行出现 In PDOConnection.php line 50:SQLSTATE[HY000] [2002] Connection refused ,就记得打开 Mac 上的 Mysql,否则后续的操作可能会出现问题. 4.部署配置 1.生成 .env 文件 ,命令: cp .env.example.product .env 2.生成 APP_KEY ,命令: php artisan key:generate 3.设置文件夹的权限: chmod -R 777 storage chmod -R 777 bootstrap/cache 4.运行数据库的迁移: 1.php artisan migrate 5.安装 voyager 1.安装php artisan voyager:install --with-dummy 6.设置 storage 连接. 0.到服务器项目目录运行: php artisan storage:link 1.或手动链接: ln -s /var/www/html/FastCloud_Server/storage/app/public /var/www/html/FastCloud_Server/public/storage 7.生成 JWT 认证的 KEY ,php artisan jwt:secret 1.如果不生成，在取得 API 数据的时候，会有 500 错误弹出. 8.暂时如果服务器有更新的步骤: 1.先在本地 push 到 GitLab 2.ssh 登录到服务器，执行 php artisan down (--message=&quot;Upgrading Database&quot; --retry=60)，命令，让服务器进入 维护 模式. 3.git pull origin master ,把源码下载下来. 4.修改好一些依赖后，就执行 php artisan up 上线. 9.数据的迁移及保存 1.Mysql 数据库的内容就用 Sequel Pro 把数据导出或导入. 1.一般需要导出的数据库为:abouts,events,permission_role,permissions,pictures,products,users 2.其它的 public 中的数据就通过 scp 命令去导出和导入. 1.下载,如在本地电脑运行以下的命令: scp -r tian@10.100.0.1:/home/tian/www/html/frontend/storage/app/public /Users/tianzeng/Desktop 2.Logs 的下载,scp -r tian@10.100.1.217:/home/tian/www/html/frontend/storage/logs/laravel.log /Users/tianzeng/Desktop 3.数据的上传,在本地电脑运行一下命令: scp -r /Users/tianzeng/Desktop/public tian@10.100.1.217:/home/tian/www/html/GLB/storage/app","categories":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/tags/php/"}]},{"title":"Android BottomNavigationView 的用法","slug":"Android_ BottomNavigationView_用法","date":"2018-07-18T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/07/18/Android_ BottomNavigationView_用法/","link":"","permalink":"http://desirepaths.github.io/2018/07/18/Android_ BottomNavigationView_用法/","excerpt":"Android BottomNavigationView 的用法 1.用 BottomNavigationView + flagment 实现 Tabbar 切换效果.","text":"Android BottomNavigationView 的用法 1.用 BottomNavigationView + flagment 实现 Tabbar 切换效果. 1. BottomNavigationView 1.改变底栏 icon 和 文字 的颜色 1.参考1:https://stackoverflow.com/questions/42346899/bottomnavigationbar-change-the-tab-icon-color 2.相关的代码 1234//activity_brake.xmlapp:itemBackground=&quot;@color/colorYellow&quot;app:itemIconTint=&quot;@drawable/bottom_icon_selector&quot;app:itemTextColor=&quot;@color/colorAccent&quot; 123456//bottom_icon_selector.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_checked=&quot;true&quot; android:color=&quot;@color/colorWhite&quot; /&gt; &lt;item android:color=&quot;@color/colorBlack&quot; /&gt;&lt;/selector&gt; 3.相关的图片","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"Swagger学习","slug":"Swagger学习","date":"2018-07-11T14:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/07/11/Swagger学习/","link":"","permalink":"http://desirepaths.github.io/2018/07/11/Swagger学习/","excerpt":"Swagger 学习 1.了解到 Swagger 是一个强大的 API 生成工具，现在正准备学习.","text":"Swagger 学习 1.了解到 Swagger 是一个强大的 API 生成工具，现在正准备学习. 2.Swagger Editor GitHub 地址 3.Swagger Hub 4.Swagger UI GitHub 地址 5.Swagger 资料文档 6.Swagger Generator 1.参考链接2.使用教程3.错误 1.参考链接: 1.如何编写基于OpenAPI规范的API文档 2.瑞骋项目的api 3.Swagger使用笔记 4.Swagger-PHP 部署 5.laravel中部署 Swagger ui 2.使用教程1.简单的使用教程 因为复制的教程现在还没学到(如 在服务器中部署 Swagger,让 API 随着代码的改变而自动改变, laravel 部署 Swagger 等等)，所以先介绍简单的应用. 1.下载 Editor 的代码(也可以不下载，有个 在线的编辑器 可以生成 API JSON 文档数据) 2.编写完 API 后，就保存 JSON 文件到本地. 3.下载 Swagger UI 的代码到本地,把 上一步保存的 swagger.json 文件复制到 dist 目录中, 然后复制 dist 目录到服务器. 4.在浏览器中访问 dist/index.html 即可看到刚刚编写的 API 的文档资料.(我这里把 dist 的名字改为了 api_doc) 3.错误 1.在本地的 Editor 编写 API 中，发现执行 Excute 后会返回 TypeError: Failed to fetch . 2.本地的 Swagger-UI 的 dist/index.html 打不开 swagger.json,一直显示 Failed to load API definition 3.把 API 放到服务器去运行，结果还是一样,显示 Failed to load API definition 4.还不知道怎么解决以上的问题!!","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"Android APP基本组件","slug":"Android APP基本组件","date":"2018-07-04T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/07/04/Android APP基本组件/","link":"","permalink":"http://desirepaths.github.io/2018/07/04/Android APP基本组件/","excerpt":"Android APP基本组件 记录 APP 相关的组件及链接.","text":"Android APP基本组件 记录 APP 相关的组件及链接. 1.通用开发2.Android 所用的外部库3.Android 自带的 View 1.通用开发 2.Android 所用的外部库1.网络相关 1.异步http请求 android-async-http 1.GitHub 上的源码及使用文档 2.http://www.jianshu.com/p/2fe3e305404e 3.混淆代码: 123 #android-async-http-keep class cz.msebera.android.httpclient.** &#123; *; &#125;-keep class com.loopj.android.http.** &#123; *; &#125; 2.http 请求封装 httpmime-4.1.3.jar https://github.com/apache/httpcomponents-client http://www.jianshu.com/p/ab6a2b90ae5e 3.网络图片加载库 Fresco com.facebook.fresco:fresco:0.10.+ 1.https://github.com/facebook/fresco 2.https://www.fresco-cn.org/docs/index.html 3.http://www.jianshu.com/p/bb32bca8796b 4.官方混淆介绍 5.图片加载比例的显示效果 scaleType 1.不能用 android:scaleType ,要用 fresco:actualImageScaleType 代替. 4.okhttp 1.GitHub 地址 2.Android OkHttp的基本用法 5.Gson 1.用法1 2.用法2 3.GitHub 源代码 4.混淆代码: 12345678910111213141516#---------------Begin: proguard configuration for Gson ----------# Gson uses generic type information stored in a class file when working with fields. Proguard# removes such information by default, so configure it to keep all of it.-keepattributes Signature# For using GSON @Expose annotation-keepattributes *Annotation*# Gson specific classes-dontwarn sun.misc.**#-keep class com.google.gson.stream.** &#123; *; &#125;# Application classes that will be serialized/deserialized over Gson-keep class com.google.gson.examples.android.model.** &#123; *; &#125;# Prevent proguard from stripping interface information from TypeAdapterFactory,# JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)-keep class * implements com.google.gson.TypeAdapterFactory-keep class * implements com.google.gson.JsonSerializer-keep class * implements com.google.gson.JsonDeserializer 2.其它相关 滚动选择器(com.bigkoo.pickerview) 1.GitHub 地址 2.Android仿ios条件选择器pickerview 3.proguard 不用提供 5.一键生成 View 与 Activity 的代码链接 ‘com.jakewharton:butterknife:8.8.1’ https://github.com/JakeWharton/butterknife http://www.jianshu.com/p/390677e35048 6.简化信息订阅的方法. ‘org.greenrobot:eventbus:3.1.1’ https://github.com/greenrobot/EventBus http://www.jianshu.com/p/bd645ace4f73 8.图片的选择器 https://github.com/crazycodeboy/TakePhoto 9.Bugly Crash report 1.GitHub 地址 2.官方文档 3.Bugly技术团队博客 4.Android 个人集成的例子 5.混淆代码 12-dontwarn com.tencent.bugly.**-keep public class com.tencent.bugly.**&#123;*;&#125; 10.免 root 查看 db 信息 (facebook stetho) 1.Stetho GitHub 地址 2.个人使用心得及教程 3.混淆代码 12# Stetho-keep class com.facebook.stetho.** &#123; *; &#125; 11.自定义 Toast 显示(有 icon) 1.GitHub 地址 2.混淆代码 12# Toasty-keep class es.dmoral.toasty.** &#123; *; &#125; 12.自定义的 Logger 显示 1.orhanobut logger GitHub 地址 2.混淆代码: 12# Logger-keep class com.orhanobut.logger.** &#123; *; &#125; 13.下拉刷新控件 SmartRefreshLayout 1.GitHub 地址 2.教程 3.官方介绍说不用混淆 14.DataBase 1.Realm(以前用过，发现有坑,现在观望中) 1.官网中文文档(不是最新) 2.官网英文文档 3.怎样看待 Realm 这个移动数据库？ 4.Realm数据库 从入门到“放弃” 5.个人的简单开发分享 2.SQLite 1.sqlitebrowser(SQLite 的工具) 1.GitHub 源码 2.官网(MacOS 上会闪退，暂时运行不了) 15.Dialog 1.material-dialogs 1.作者(Aidan Follestad)是个 95 后的牛人 2.不用另外配置 proguard 的信息. 3.强大的 Dialog 第三方包,基本上所有的 Dialog 用到的功能，这里都有了!! 16.权限申请 1.RxPermissions 1.Proguard 混淆-dontwarn com.tbruyelle.rxpermissions.** 17.Android MVP Architecture Study 1.里面有用到大量的第三方库. 3.Android 自带 1.BottomNavigationView 1.Android 自带控件，类似于 ListView.但是有 List 和 Grid 的效果. 2.Android xml 字符串格式化 3.SearchView 1.SearchView的使用 2.官方文档 3.Android SearchView的高级用法，解决关于SearchView的样式与控制问题","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"自然拼读 APP 已购买项目没反应","slug":"自然拼读APP","date":"2018-06-06T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/06/06/自然拼读APP/","link":"","permalink":"http://desirepaths.github.io/2018/06/06/自然拼读APP/","excerpt":"自然拼读 APP 已购买项目没反应1.背景2.相关投诉或反馈的过程","text":"自然拼读 APP 已购买项目没反应1.背景2.相关投诉或反馈的过程 4.APP 的反馈 6.到 苹果 处投诉 8.打电话到 12315 投诉 9.加 猫老师 的微信反馈投诉. 3.相关的证据资料4.终于拿到购买的课程 20180606,终于在已购买的列表里看到了课程，猫老师 回复说是苹果的问题，不管是否真的，这次 … 真的很折腾… 1.背景 1.在微信公众号 ‘华人父母圈’ 中看到,推荐 下载 ‘自然拼读 APP’ 2018/05/17 号中午,用 iPhone 购买了该 APP(自然拼读) 的付费第二期内容(自然拼读二期),共计 118 块. 到现在(2018/06/06)为止,在已购买课程处无任何的课程，点击课程还是提示要付费购买，重新开机和重新登陆都无用，而且在 APP 内反馈没有任何的回应. 2.相关投诉或反馈的过程 1.那个推荐下载的公众号的推荐文章: 2.iOS 的购买了课程后，在已购买的列表里没有显示，以为是 iOS APP 的问题。然后试试 Android ,在 华为应用市场 和 GooglePlay 都找不到该应用,只有从他们上面提供的二维码的地址,导航到了 腾讯应用宝 去下载！！ 3.在 Android 上也没有已购买的课程的显示. 4.然后想在 APP 上反馈，但是填写发送后，没什么卵用. 5.在 AppStore 上，点击 App 支持，发现是 上海科匠信息科技有限公司 制作的产品,APP 是属于 ‘瑞骋(北京)教育咨询有限公司’ 的,估计 ‘科匠’ 只是代工的，跟 ‘科匠’ 联系也没什么用.在 ‘企查查’ 查到的相关的信息: 6.到 苹果 处投诉 1.到 iPhone 的购买记录。点击进去后到 ‘报告问题’处投诉，提交后没反应，跳转到要我们到 App 的供应商处去投诉(fully shit)。 2.根据 知乎 上面查到的，到 App Store Content Dispute 那去投诉,得到的反馈是(他们不受理这种案件): 3.根据上面的邮件提示的地址,到 Contact Support处去投诉,结果一直选择不到 iOS 的 APP,只能选到 Mac 的 APP，无奈只能选择让苹果的电话联系. 4.客服打电话过来，了解了情况后，表示只能让我们联系 APP 的主体企业解决.(Fully shit 2) 7.发邮件(5/30)到 &#39;nchai@vip.com.cn‘ 投诉,暂时没有反应. 8.打电话到 12315 投诉,因为 ‘瑞骋(北京)教育咨询有限公司’ 是属于北京的，我在广州，广州这边的 12315 表示不受理. 1.然后打电话到 01012315 北京的 12315,一直在占线中,其中的自动语音推荐我们去 “北京消费投诉APP” 或到 ‘网站’ 去投诉 . 2.尝试到 北京12315 去投诉(政府的网站，谁用谁知道，投诉的订单一直提交不成功(1.要用手机验证码登录，2.选择 ‘主题名称’ 点击后没反应,3.尝试使用 IE9 及以上的浏览器也是不行.)) 3.下载 “北京消费投诉”APP ,发现 AppStore/华为应用市场 的评价如下: 不信邪，下载了 APP ，输入信息后，果然 9.(20180603)在 自然拼读APP 上看到一个猫老师 的微信号，遂加为好友，还是心存一点点的希望. 1.猫老师 在后台(apple)没有查到我的订单的信息,然后建议我打电话给苹果(400-666-8800),说’内购了项目，但是卖方替你查了，告诉你苹果给的账单里没有你这一笔’. 2.打过去报上 APPID 和 名字后，苹果客服说 系统有你的订单的信息，而且系统既然已经发了收据给你，就一定会发订单和款项给商家的 1.(期间苹果客服好白痴，一直在问我需要怎么解决问题，但是又什么权限都没有(不能查账单是否已经提交给商家…),什么解决问题的能力也没有)，又让我找商家 … ,感觉很坑，想天真地让苹果取消订单并退钱，对不起，退款审核不通过。 3.相关的 猫老师 的截图 4.相关的微信的截图 5.GameOver , double kill !!! 3.相关的证据资料 Game over!正式放弃","categories":[{"name":"日杂","slug":"日杂","permalink":"http://desirepaths.github.io/categories/日杂/"}],"tags":[{"name":"日杂","slug":"日杂","permalink":"http://desirepaths.github.io/tags/日杂/"}]},{"title":"Laravel学习","slug":"Laravel学习","date":"2018-06-03T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/06/03/Laravel学习/","link":"","permalink":"http://desirepaths.github.io/2018/06/03/Laravel学习/","excerpt":"Laravel学习 1.记录下对 PHP 框架 Laravel 的学习。","text":"Laravel学习 1.记录下对 PHP 框架 Laravel 的学习。 1.基本的 Laravel 命令 1.Laravel 5.6 开发文档 2.相关的 Valet 的命令 3.Homestead 的相关的命令 2.Voyager 后台框架的学习 Voyager 是在 Laravel 的基础上的后台框架. 3.Composer 本地路径加载第三方扩展包 1.正确的 Composer 扩展包安装方法 4.数据的模拟插入5.数据库的迁移6.相关的 cache 清除7.邮件发送功能 1.基本的 Laravel 命令1.Laravel 5.6 开发文档* [1.中文](https://laravel-china.org/docs/laravel/5.6/installation/1352) * [2.英文](https://laravel.com/docs/5.6) 2.相关的 Valet 的命令,参考自:laravel.com:* 1.新建一个 laravel 的项目 ` laravel new project ` * 2.valet 的启动/停止 等等: ` valet start valet stop ` * 3.mysql 的启动/停止 ` brew services start mysql brew services stop mysql ` 3.Homestead 的相关的命令 1.vagrant up 启动 Homestead 2.vagrant -h 启动帮助页面. 3.解决 No input file specified 的问题 4.做 mysql 数据库的 migrate 时， .env 文件的配置为: 123456DB_CONNECTION=mysqlDB_HOST=192.168.10.10DB_PORT=3306DB_DATABASE=homesteadDB_USERNAME=homesteadDB_PASSWORD=secret 5.PhpStorm+Homestead+Xdebug调试Laravel 1.在 Chrome 上，要那图标变为绿色才表示监听中 6.本机的 Sequel Pro 连接 Homestead 数据库的配置 7.Tinker 的使用 * 1.[使用 Tinker 来调试 Laravel 应用程序的数据以及使用 Tinker 一些总结](https://laravel-china.org/articles/8575/debugging-laravel-application-data-with-tinker-and-using-some-tinker-summaries) 123456#在终端中打开 tingkerphp artisan tinker#在数据库中生成一个 User 的数据factory(App\\User::class)-&gt;create();#查看 User 表的所有数据.App\\User::all(); 8.在 Homestead 中加入 phpmyadmin ,How to setup phpmyadmin on a Laravel Homestead box? * 1.成功添加后，访问的地址为: [http://phpmyadmin.test:8000/](http://phpmyadmin.test:8000/) 9.如果之前项目的 HomeStead 开着没有关闭,又开另外一个项目的 HomeStead ,浏览器显示的还会是之前的项目的显示. 10.在 voyager 的后台主页显示 Missing storage symlink 的问题，点击了 Fix it 也没有反应. 1.原因:是因为 homestead 把 Mac 上链接文件复制到了 linux 上,但双方的路径不一样所导致的.通过 vagrant ssh 链接到主机，然后查看就知道了: 123456789101112vagrant@hooks:~/code/public$ ls -altotal 12drwxr-xr-x 1 vagrant vagrant 320 Jun 20 02:28 .drwxr-xr-x 1 vagrant vagrant 1024 Jun 20 03:25 ..drwxr-xr-x 1 vagrant vagrant 96 Jun 20 02:09 css-rw-r--r-- 1 vagrant vagrant 0 Jun 20 02:09 favicon.ico-rw-r--r-- 1 vagrant vagrant 593 Jun 20 02:09 .htaccess-rw-r--r-- 1 vagrant vagrant 1823 Jun 20 02:09 index.phpdrwxr-xr-x 1 vagrant vagrant 96 Jun 20 02:09 js-rw-r--r-- 1 vagrant vagrant 24 Jun 20 02:09 robots.txtlrwxr-xr-x 1 vagrant vagrant 79 Jun 20 02:28 storage -&gt; /Users/tianzeng/Documents/php_Workplace/GitHub/Laravel/hooks/storage/app/publicdrwxr-xr-x 1 vagrant vagrant 96 Jun 20 02:28 vendor 2.解决方法: 1.导航到 远程主机的 code 目录下,vagrant ssh -&gt; cd code 2.运行命令 sudo ln -s /home/vagrant/code/storage/app/public /home/vagrant/code/public/storage 3.查看结果，已修改成功. 12345678910111213vagrant@hooks:~/code$ ls -al public total 12drwxr-xr-x 1 vagrant vagrant 320 Jun 20 03:52 .drwxr-xr-x 1 vagrant vagrant 1024 Jun 20 03:25 ..drwxr-xr-x 1 vagrant vagrant 96 Jun 20 02:09 css-rw-r--r-- 1 vagrant vagrant 0 Jun 20 02:09 favicon.ico-rw-r--r-- 1 vagrant vagrant 593 Jun 20 02:09 .htaccess-rw-r--r-- 1 vagrant vagrant 1823 Jun 20 02:09 index.phpdrwxr-xr-x 1 vagrant vagrant 96 Jun 20 02:09 js-rw-r--r-- 1 vagrant vagrant 24 Jun 20 02:09 robots.txtlrwxr-xr-x 1 vagrant vagrant 37 Jun 20 03:52 storage -&gt; /home/vagrant/code/storage/app/publicdrwxr-xr-x 1 vagrant vagrant 96 Jun 20 02:28 vendorvagrant@hooks:~/code$ 11.多站点的支持,只需在 Homestead.yaml 文件中增加如下的站点信息,并且在 hosts 文件中增加 homestead2.test 的信息,然后运行 vagrant reload --provision 重新加载即可. 123456789101112131415 folders: - map: /Users/tianzeng/Documents/php_Workplace/FastCloud/FastCloud to: /home/vagrant/code - map: /Users/tianzeng/Documents/php_Workplace/testPHP to: /home/vagrant/code2sites: - map: homestead.test to: /home/vagrant/code/public - map: homestead2.test to: /home/vagrant/code2 2.Voyager 后台框架的学习 1.Voyager v1.1 开发文档. 4.数据的模拟插入 1.参考 Seeders , Factory 2.相关的步骤: 1.生成一个 factory,如: php artisan make:factory SparkFactory --model=Spark ,并填写相关的模拟数据的生成: 12345678910111213141516171819202122&lt;?phpuse Faker\\Generator as Faker;$factory-&gt;define(App\\Spark::class, function (Faker $faker) &#123;return [&apos;name&apos; =&gt; &apos;产品名_&apos;.str_random(10),&apos;pic&apos; =&gt; &apos;http://file.mancando.cn/resource/images/product/10020001/201609091354591425789.jpg&apos;,&apos;number&apos; =&gt; &apos;产品编号_&apos;.str_random(10),&apos;supplier_number&apos; =&gt; &apos;供应商编号_&apos;.str_random(10),&apos;category_name&apos; =&gt; &apos;产品种类_&apos;.str_random(10),&apos;brand_name&apos; =&gt; &apos;品牌名_&apos;.str_random(10),&apos;package_size&apos; =&gt; random_int(0,10),&apos;unit&apos; =&gt; &apos;支&apos;,&apos;status&apos; =&gt; random_int(0,2),&apos;description&apos; =&gt; &apos;描述_&apos;.str_random(20),&apos;sale_price&apos; =&gt; random_int(10,20),&apos;purchase_price&apos; =&gt; random_int(5,10),&apos;sales&apos; =&gt; random_int(100,200),&apos;stock&apos; =&gt; random_int(50,100),];&#125;); 2.生成一个对应的 Seeder ,如: php artisan make:seeder SparksTableSeeder ,并写入生成模拟数据的逻辑(这里为 50 条模拟数据的生成): 123456public function run() &#123; factory(App\\Spark::class,50)-&gt;create(); &#125; 3.运行 composer dump-autoload 命令，否则会有 Class XXXSeeder does not exist 发生. 4.运行命令 php artisan db:seed --class=SparksTableSeeder ,数据就已经生成了. 5.数据库的迁移 1.参考: 数据库的迁移 2.步骤: 0.生成一个 Model,如 Setting: php artisan make:Model Setting. 1.运行命令php artisan make:migration create_new_sparks_table --create=my_sparks ,将会有文件 database/migrations/2018_07_31_065118_create_new_sparks_table.php 生成. 2.往 2018_07_31_065118_create_new_sparks_table.php的 up 方法中填入数据库的字段数据, 如: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?phpuse Illuminate\\Support\\Facades\\Schema;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Database\\Migrations\\Migration;class CreateNewSparksTable extends Migration&#123; /** * Run the migrations. * * @return void */ public function up() &#123; Schema::create(&apos;my_sparks&apos;, function (Blueprint $table) &#123; $table-&gt;increments(&apos;id&apos;); $table -&gt; string(&apos;name&apos;) -&gt; nullable(); $table -&gt; string(&apos;pic&apos;)-&gt; nullable(); $table -&gt; string(&apos;number&apos;)-&gt; nullable(); $table -&gt; string(&apos;supplier_number&apos;)-&gt; nullable(); $table -&gt; string(&apos;category_name&apos;)-&gt; nullable(); $table -&gt; string(&apos;brand_name&apos;)-&gt; nullable(); $table -&gt; unsignedInteger(&apos;package_size&apos;)-&gt; nullable(); $table -&gt; string(&apos;unit&apos;)-&gt; nullable(); $table -&gt; tinyInteger(&apos;status&apos;)-&gt; nullable(); $table -&gt; text(&apos;description&apos;)-&gt; nullable(); $table -&gt; unsignedInteger(&apos;sale_price&apos;)-&gt; nullable(); $table -&gt; unsignedInteger(&apos;purchase_price&apos;)-&gt; nullable(); $table -&gt; unsignedInteger(&apos;sales&apos;)-&gt; nullable(); $table -&gt; unsignedInteger(&apos;stock&apos;)-&gt; nullable(); $table-&gt;nullabletimestamps(); $table-&gt; softDeletes()-&gt; nullable(); &#125;); &#125; /** * Reverse the migrations. * * @return void */ public function down() &#123; Schema::dropIfExists(&apos;my_sparks&apos;); &#125;&#125; 3.运行迁移 php artisan migrate. 即可生成指定字段的数据表. 4.想要在代码里删除刚刚新增的数据表(发现有错误发生!!!) 1.修改文件名,如 把 2018_07_31_065119_create_new_sparks_table.php 改为 2018_07_31_065120_create_new_sparks_table.php,只有这样在运行 php artisan migrate 时才可以运行这个文件. 2.在 up 方法中 写入 12$this-&gt;down(); return; 5.更新数据库，添加一个数据库的字段 1.先运行 php artisan make:migration update_products_table,在 migrations生成一个文件。 2.然后在 run 方法中添加所需要添加的字段，如 123Schema::table(&apos;products&apos;,function (Blueprint $table)&#123; $table-&gt;string(&apos;image_large&apos;)-&gt;nullable()-&gt;after(&apos;image&apos;); &#125;); 3.运行 php artisan migrate 即可. 6.相关的 cache 清除 1.清除 view 缓存. php artisan view:clear 1.但是在 PHP Storm 中，用这条命令清除了后，一刷新 浏览器的网页，旧的页面又出来了. 2.没有找到解决的方法!!! 1.Option to disable cache 2.How I can disable templates caching in development mode? 3.Changing blade files never change when refreshing/clearing cache 7.邮件发送功能1.用 mailtrap 去代发邮件: 1.参考(发现都没效果，从 mailtrap 后台可以看到有发送的 EMAIL 数据，但目标邮箱没收到任何的邮件): 1.How To Send Email In Laravel Tutorial 2.Laravel - Sending Email 2.用 163 邮箱去做发送邮箱.(亲测有效) 1.用 163 普通的免费邮,进去网页版，然后按 设置-&gt;客户端授权密码(设置一个密码)-开启,就可以开启 laravel 客户端登录发送邮件了. 2.发现用 163 企业邮找不到 2.在 .env中做如下的配置,163免费邮客户端设置的POP3、SMTP、IMAP地址: 12345678MAIL_DRIVER=smtpMAIL_HOST=smtp.163.comMAIL_PORT=994MAIL_USERNAME=test@163.comMAIL_PASSWORD=上一步的客户端授权码MAIL_ENCRYPTION=sslMAIL_FROM_ADDRESS= test@163.comMAIL_FROM_NAME=test 3.发送的实际代码参考: 1.使用 Laravel 基于 SMTP 驱动实现发送邮件 2.How To Send Email In Laravel Tutorial 3.Laravel - Sending Email 4.利用Laravel自带SMTP邮件组件实现发送邮件 5.Laravel5.5 新特性~Markdown 邮件模板的显示","categories":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/tags/php/"}]},{"title":"Mac 下 PATH 变量的添加","slug":"Mac下PATH变量的添加","date":"2018-06-01T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/06/01/Mac下PATH变量的添加/","link":"","permalink":"http://desirepaths.github.io/2018/06/01/Mac下PATH变量的添加/","excerpt":"Mac 下 PATH 变量的添加 记录下在终端环境下，添加 其它程序的 命令到 terminal 中，实现在任何地方都可以立刻执行程序的命令. 参考1: https://stackoverflow.com/questions/25373188/laravel-installation-how-to-place-the-composer-vendor-bin-directory-in-your 参考2: https://stackoverflow.com/questions/25373188/laravel-installation-how-to-place-the-composer-vendor-bin-directory-in-your","text":"Mac 下 PATH 变量的添加 记录下在终端环境下，添加 其它程序的 命令到 terminal 中，实现在任何地方都可以立刻执行程序的命令. 参考1: https://stackoverflow.com/questions/25373188/laravel-installation-how-to-place-the-composer-vendor-bin-directory-in-your 参考2: https://stackoverflow.com/questions/25373188/laravel-installation-how-to-place-the-composer-vendor-bin-directory-in-your 1.没添加环境变量前后对比: 1.添加前 12tianzeng$ laravel-bash: laravel: command not found 2.添加后: 1234567891011121314151617181920$ laravelLaravel Installer 2.0.1Usage: command [options] [arguments]Options: -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debugAvailable commands: help Displays help for a command list Lists commands new Create a new Laravel application.tianzeng$ 2.添加的方式 1.如添加 laravel: 12echo &apos;export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot;&apos; &gt;&gt; ~/.bashrcsource ~/.bashrc 2.如果是以 ~/.bash_profile 去执行环境变量的话 1echo &apos;export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot;&apos; &gt;&gt; ~/.bash_profile 3.查看效果 从新打开一个 terminal 即可.","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"Mac修改截图的默认文件名","slug":"Mac修改截图的默认文件名","date":"2018-06-01T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/06/01/Mac修改截图的默认文件名/","link":"","permalink":"http://desirepaths.github.io/2018/06/01/Mac修改截图的默认文件名/","excerpt":"Mac修改截图的默认文件名 1.转载自: Mac OS X EI Capitan 修改截图的默认文件名","text":"Mac修改截图的默认文件名 1.转载自: Mac OS X EI Capitan 修改截图的默认文件名 1.方法 1.方法就是在重启系统，在启动过程中，按住 ⌘R，在进入恢复界面后，选择上面菜单的 实用工具-&gt;终端，打开终端后输入 csrutil disable 关闭掉系统的 SIP 保护机制，然后重启再次进入系统，此时就可以修改系统文件了。接下来按如下步骤修改你需要的效果。 123456// 打开要修改的文件目录cd /System/Library/CoreServices/SystemUIServer.app/Contents/Resources/zh_CN.lproj// 转换文件为 xml 格式sudo plutil -convert xml1 ScreenCapture.strings// 用 vi 修改转换后的文件sudo vi ScreenCapture.strings 修改为下面的样子: 2.按上面的修改保存后，再转换文件为纯二进制的，并重启 SystemUIServer： 12sudo plutil -convert binary1 ScreenCapture.stringskillall SystemUIServer 3.如上修改完成后，我截图后文件保存的格式就是 2016-01-02_21.06.20.png 了，根据你自己的需求，你可以修改为任意其他的格式。最后别忘记，再次进入恢复模式，将 SIP 重新开起来。命令是 csrutil enable。","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"Debian中Nginx的ssl配置","slug":"Debian中Nginx的ssl配置","date":"2018-04-12T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/04/12/Debian中Nginx的ssl配置/","link":"","permalink":"http://desirepaths.github.io/2018/04/12/Debian中Nginx的ssl配置/","excerpt":"Debian 中 Nginx 的 ssl 配置 1.服务器的配置 12Linux glb-gz-debian 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2+deb8u5 (2017-09-19) x86_64nginx/1.6.2 2.参考: 1.How To Create a Self-Signed SSL Certificate for Nginx on Debian 8","text":"Debian 中 Nginx 的 ssl 配置 1.服务器的配置 12Linux glb-gz-debian 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2+deb8u5 (2017-09-19) x86_64nginx/1.6.2 2.参考: 1.How To Create a Self-Signed SSL Certificate for Nginx on Debian 8 1.GLB 公司的服务器,参考了 ‘参考1’ 后，已经可以外部 HTTPS 访问到网站(用自签名的 key ).2.用 腾讯云的 key,腾讯云提供的 ATS 页面检测.3.china Server 集成 腾讯云 的 SSL 证书. 1.申请一个 ‘域名型免费版(DV)’ 证书 2.填写的相关的内容 -&gt; 文件验证 -&gt; 按照要求，在指定的位置写入文件 3.证书审核通过，然后就开始证书的部署 4.把证书(.key 和 .crt)放到 /etc/nginx/china.tianlovezhen.site_ssl_conf 目录里面. 在 /etc/nginx/sites-available/default 中，增加了以下的代码: 123456789listen 443; server_name china.tianlovezhen.site; #Bind the host ssl on; ssl_certificate /etc/nginx/china.tianlovezhen.site_ssl_conf/1_china.tianlovezhen.site_bundle.crt; ssl_certificate_key /etc/nginx/china.tianlovezhen.site_ssl_conf/2_china.tianlovezhen.site.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #Use this Protocols Setting ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#Use this Utils Setting ssl_prefer_server_ciphers on; 6.成功在 nginx 中加入 HTTPS ！！！相关的图片: 7.(请看👇下面的 8 ,这个 7 有错误 !!!)https 访问正常，但 http 访问出现错误 400 The plain HTTP request was sent to HTTPS port 解决方法:将上面配置文中的“ ssl on ; ” 注释掉或者修改成 “ ssl off ;”，这样，Nginx就可以同时处理HTTP请求和HTTPS请求了。发现 这样做的话， https 请求不能正常返回值. 8.HTTP 请求会转为 HTTPS 请求. 1.参考How To Secure Nginx with Let’s Encrypt on Debian 8 2.下面是我的配置: 1.增加 /etc/nginx/snippets/ssl-example.com.conf 文件,内容为: 12ssl_certificate /etc/nginx/china.tianlovezhen.site_ssl_conf/1_china.tianlovezhen.site_bundle.crt;ssl_certificate_key /etc/nginx/china.tianlovezhen.site_ssl_conf/2_china.tianlovezhen.site.key; 2.增加 /etc/nginx/snippets/ssl-params.conf 文件，内容为: 123456789101112131415161718192021# from https://cipherli.st/# and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.htmlssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;ssl_ecdh_curve secp384r1;ssl_session_cache shared:SSL:10m;ssl_session_tickets off;ssl_stapling on;ssl_stapling_verify on;resolver 8.8.8.8 8.8.4.4 valid=300s;resolver_timeout 5s;# Disable preloading HSTS for now. You can use the commented out header line that includes# the &quot;preload&quot; directive if you understand the implications.#add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;add_header X-Frame-Options DENY;add_header X-Content-Type-Options nosniff;#ssl_dhparam /etc/ssl/certs/dhparam.pem; 3.修改 /etc/nginx/sites-available/default 文件，把前面的 12345678910111213server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _ # SSL configuration # #listen 443 ssl default_server; #listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 ... 修改为: 1234567891011121314151617server &#123; listen 80 default_server; listen [::]:80 default_server; server_name china.tianlovezhen.site; #Bind the host return 301 https://$server_name$request_uri;&#125;server &#123; # SSL configuration # listen 443 ssl default_server; listen [::]:443 ssl default_server; include snippets/ssl-example.com.conf; include snippets/ssl-params.conf; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 ... 3.如果需要同时支持 HTTP 和 HTTPS 的访问，只需把 default 文件改为: 123456789101112131415server &#123; listen 80 default_server; listen [::]:80 default_server; # server_name japan.tianlovezhen.site; #Bind the host #return 301 https://$server_name$request_uri;#&#125;#server &#123; # SSL configuration # listen 443 ssl default_server; listen [::]:443 ssl default_server;server_name japan.tianlovezhen.site; #Bind the host include snippets/ssl-example.com.conf; include snippets/ssl-params.conf; ...","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"Mac下apache的SSL","slug":"Mac下apache的SSL","date":"2018-04-11T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/04/11/Mac下apache的SSL/","link":"","permalink":"http://desirepaths.github.io/2018/04/11/Mac下apache的SSL/","excerpt":"Mac下apache的SSL","text":"Mac下apache的SSL 1.相关参考: 参考1: https://www.jianshu.com/p/b2a9655fe687 参考2: https://getgrav.org/blog/macos-sierra-apache-ssl 参考3: https://gist.github.com/jonathantneal/774e4b0b3d4d739cbc53 参考4: https://discussions.apple.com/thread/3184919 2.过程 1.在参照 参考1 配置无效的情况下，参照 参考2 才配置好了(Mac 的系统版本为 10.12.6 (16G29),macOS Sierra)! 2.手机，电脑 通过 https 也可以正常地访问. 3.不知道为什么，本地的电脑始终无法被外网访问 443 端口 ，明明已经做了映射. 4.参照了 参考3 后，还是不能正常地访问，而且发现了新的问题: 1.SSL 的 DocumentRoot 的路径不能被修改，已修改就会出现 Forbidden,You don&#39;t have permission to access / on this server. 5.在关闭 httpd 时，发现一些奇怪的问题: 1.运行命令 sudo apachectl -k stop , http 没反应，但 https 已经关闭了. 2.在参照了 参考4后，运行命令 sudo killall httpd,才把 http 关闭了.","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"Mac上的抓包工具分析","slug":"Mac上的抓包工具","date":"2018-03-02T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/03/02/Mac上的抓包工具/","link":"","permalink":"http://desirepaths.github.io/2018/03/02/Mac上的抓包工具/","excerpt":"1.Charles1.抓取 APP 的数据2.抓取 Mac 上的数据3.Charles 通过 Shadowsocks 去抓取被墙的网站的数据.2. Wireshark","text":"1.Charles1.抓取 APP 的数据2.抓取 Mac 上的数据3.Charles 通过 Shadowsocks 去抓取被墙的网站的数据.2. Wireshark 1.Charles 可以抓取普通的 Get,post 的数据. 1.抓取 APP 的数据 1.参考: https://www.jianshu.com/p/235bc6c3ca77 2.代理:因为原理是通过代理去抓取数据，所以 APP 可以通过判断手机的网络是否启用了代理去禁止 APP 的启动. 1.Android 判断设备 是否使用代理上网 2.抓取 Mac 上的数据 1.注意不要开通其它的代理，否则会导致抓取不到数据 2.参考: Mac上使用Charles抓包 1.开通了其它的代理设置时,抓取不到数据的情况截图: 2.正常抓取的截图: 3.Charles 通过 ShadowsocksX-NG 去抓取被墙的网站的数据. 1.参考: Charles支持通过Shadowsocks代理抓包 2.详细的步骤 1.ShadowsocksX-NG 中配置的信息 1.如我这里为 Local Socks5 Listen Address:Port 为 127.0.0.1:1086,HTTP Proxy Listen Address:Port 为 127.0.0.1:1087 2.系统中 Preferences/Network/Advanced/Proxies 中 Web Proxy(HTTP),Secure Web Proxy(HTTPS) SOCKS Proxy 都为 127.0.0.1:1086. 3.修改 Charles/Proxy 中的 SSL Proxying Setting(监听 HTTPS) 和 External Proxy Settings(配置 Charles 通过 SS 代理,配置为 127.0.0.1:1087),分别为下图: 4.手机访问 google 的效果 2. Wireshark 参考1：https://www.jianshu.com/p/62f00db7be68参考2：https://www.bo56.com/mac%E5%AE%89%E8%A3%85wireshark/ 2.1.用 wireshark 抓到的 TCP 包 的数据截图 该程序为 Android 手机与 Mac 建立的 TCP 链接，所截取的图.ip.src == 10.100.1.251 or ip.dst == 10.100.1.251ip.src == 183.232.231.173 or ip.dst == 183.232.231.173ip.src == 14.215.177.39 or ip.dst == 14.215.177.39ip.src == 42.121.17.113 or ip.dst == 42.121.17.113ip.src == 120.26.196.41 or ip.dst == 120.26.196.41 Server:https://github.com/ghzjtian/TCP_ServerAndroid:https://github.com/ghzjtian/TCP_Android 2.2截取其它 APP 的 TCP 链接数据.","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"本地端口映射","slug":"本地端口映射","date":"2018-02-21T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/02/21/本地端口映射/","link":"","permalink":"http://desirepaths.github.io/2018/02/21/本地端口映射/","excerpt":"使得外部可以访问没有固定 IP 地址的本地网络. 因为需要，要把本地没有固定 IP 地址的网络让外部可以访问.使用 ngrok.cc 提供的服务. 参考: 参考1. https://www.sunnyos.com/article-show-67.html 参考2.https://juejin.im/post/5a686d6ef265da3e484bfe8d","text":"使得外部可以访问没有固定 IP 地址的本地网络. 因为需要，要把本地没有固定 IP 地址的网络让外部可以访问.使用 ngrok.cc 提供的服务. 参考: 参考1. https://www.sunnyos.com/article-show-67.html 参考2.https://juejin.im/post/5a686d6ef265da3e484bfe8d 1.详细流程* 1.如参考 1 所示: 2.效果展示: 1.到 ngrok.cc 中开通服务 2.下载并启动映射服务(终端到指定的 sunny 下载目录) 1./sunny clientid 1403abb42894027391 3.效果展示","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"MAMP PRO 快速配置 ssl","slug":"MAMP_PRO快速配置ssl","date":"2018-02-13T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/02/13/MAMP_PRO快速配置ssl/","link":"","permalink":"http://desirepaths.github.io/2018/02/13/MAMP_PRO快速配置ssl/","excerpt":"MAMP PRO 快速配置 ssl 参考: http://documentation.mamp.info/en/MAMP-PRO-Mac/Settings/Hosts/SSL/","text":"MAMP PRO 快速配置 ssl 参考: http://documentation.mamp.info/en/MAMP-PRO-Mac/Settings/Hosts/SSL/ 1.详细的步骤2.出现的错误 1.详细的步骤: 1.增加一个 主机. 2.填写相关的信息. 3.开启 ssl. 4.验证(可以访问 ssl 的网站了) 2.出现的错误 未解决. 1.在本地的 MBP 中，用浏览器访问 127.0.0.1 和 localhost 都可以正常地访问,访问 https://localhost 也很正常，但是访问 https://127.0.0.1 就会出现下面的错误: 12ForbiddenYou don&apos;t have permission to access / on this server.","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"xdebug集成","slug":"xdebug集成","date":"2018-02-09T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/02/09/xdebug集成/","link":"","permalink":"http://desirepaths.github.io/2018/02/09/xdebug集成/","excerpt":"在 phpStorm 中集成 xdebug 参考: https://www.jianshu.com/p/8fb9ad0719c2","text":"在 phpStorm 中集成 xdebug 参考: https://www.jianshu.com/p/8fb9ad0719c2 ##有两种方法(在用第二种方法) 1.系统自带的 php + phpstorm + firefox 集成.2.MAMP + phpstorm + firefox 集成. 1.系统自带的 php + phpstorm + firefox 集成1.确定要下载的 xdebug 的版本 在 https://xdebug.org/wizard.php 中复制你的 phpinfo() 的信息进去，它就会自动判断(下面为我复制我的 PHPINFO 后，系统为我解析的结果). 12345678910111213141516171819202122232425262728293031323334SummaryXdebug installed: noServer API: CGI/FastCGIWindows: noZend Server: noPHP Version: 7.1.1Zend API nr: 320160303PHP API nr: 20160303Debug Build: noThread Safe Build: noConfiguration File Path: /Applications/MAMP/bin/php/php7.1.1/confConfiguration File: /Library/Application Support/appsolute/MAMP PRO/conf/php7.1.1.iniExtensions directory: /Applications/MAMP/bin/php/php7.1.1/lib/php/extensions/no-debug-non-zts-20160303InstructionsDownload xdebug-2.6.0.tgzUnpack the downloaded file with tar -xvzf xdebug-2.6.0.tgzRun: cd xdebug-2.6.0Run: phpize (See the FAQ if you don&apos;t have phpize.As part of its output it should show:Configuring for:...Zend Module Api No: 20160303Zend Extension Api No: 320160303If it does not, you are using the wrong phpize. Please follow this FAQ entry and skip the next step.Run: ./configureRun: makeRun: cp modules/xdebug.so /Applications/MAMP/bin/php/php7.1.1/lib/php/extensions/no-debug-non-zts-20160303Edit /Library/Application Support/appsolute/MAMP PRO/conf/php7.1.1.ini and add the linezend_extension = /Applications/MAMP/bin/php/php7.1.1/lib/php/extensions/no-debug-non-zts-20160303/xdebug.soRestart the webserverIf you like Xdebug, and thinks it saves you time and money, please have a look at the donation page. 2.下载 xdebug.3. 2.MAMP + phpstorm + firefox 集成. 参考: 1.https://www.jianshu.com/p/9de52bf4fc472.http://blog.csdn.net/LiuMiao1128/article/details/68060678 2.1 所用的软件: 1.phpstorm 2.mamp pro 3.chrome 2.2详细步骤: 1.mamp 自带 xdebug ,直接启动 http://localhost/MAMP/index.php?language=English&amp;page=phpinfo 1.2.mamp 配置的相关截图: 1.3.在 phpinfo 中,可以看到php的相关配置 2.配置项目的运行环境(实际的操作步骤请以 参考1 的步骤为准,这里只是贴出我自己的配置截图)","categories":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://desirepaths.github.io/tags/php/"}]},{"title":"Android bugly集成","slug":"bugly集成","date":"2018-02-08T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/02/08/bugly集成/","link":"","permalink":"http://desirepaths.github.io/2018/02/08/bugly集成/","excerpt":"bugly集成 根据 https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20180206175744 去集成.步骤文字很多为复制，为方便自己而已.","text":"bugly集成 根据 https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20180206175744 去集成.步骤文字很多为复制，为方便自己而已. 详细步骤 1.在Module的build.gradle文件中添加依赖和属性配置： 12//Bugly Crash report compile &apos;com.tencent.bugly:crashreport:2.6.6&apos; 2.在AndroidManifest.xml中添加权限： 12345&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt; 3.请避免混淆Bugly，在Proguard混淆文件中增加以下配置： 12-dontwarn com.tencent.bugly.**-keep public class com.tencent.bugly.**&#123;*;&#125; 4.获取APP ID并将以下代码复制到项目Application类onCreate()中，Bugly会为自动检测环境并完成配置： 1CrashReport.initCrashReport(getApplicationContext(), &quot;4ece1b11736&quot;, BuildConfig.DEBUG); 5.制造一个 Crash 12 //测试 bugly crashCrashReport.testJavaCrash(); Crash 后台收到效果截图:","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"代码混淆","slug":"Android_apk混淆","date":"2018-02-01T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/02/01/Android_apk混淆/","link":"","permalink":"http://desirepaths.github.io/2018/02/01/Android_apk混淆/","excerpt":"记录 Android Minify 代码混淆相关","text":"记录 Android Minify 代码混淆相关 Android Minify 代码混淆1.参考:2.APP 中 build.gradle 的配置.3.proguard-rules.pro 混淆的代码(cramer app)4.混淆后的反编译5.注意事项 1.参考: 1.Android Studio混淆打包 2.Android Studio Apk 打包 混淆 3.https://www.jianshu.com/p/b471db6a01af 4.官方文档: 5.https://developer.android.com/studio/build/shrink-code.html 6.http://blog.csdn.net/qq_33689414/article/details/69630673 2.APP 中 build.gradle 的配置.12345678910111213141516buildTypes &#123; release &#123; minifyEnabled true shrinkResources true proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; signingConfig signingConfigs.config &#125; //暂时测试都为 true,如果发现影响构建速度可以设置为 false debug &#123; minifyEnabled true shrinkResources true proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125; 3.proguard-rules.pro 混淆的代码(cramer APP )123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258############################################### 对于一些基本指令的添加##############################################-ignorewarnings# 代码混淆压缩比，在0~7之间，默认为5，一般不做修改-optimizationpasses 5# 混合时不使用大小写混合，混合后的类名为小写-dontusemixedcaseclassnames# 指定不去忽略非公共库的类-dontskipnonpubliclibraryclasses# 这句话能够使我们的项目混淆后产生映射文件# 包含有类名-&gt;混淆后类名的映射关系-verbose# 指定不去忽略非公共库的类成员-dontskipnonpubliclibraryclassmembers# 不做预校验，preverify是proguard的四个步骤之一，Android不需要preverify，去掉这一步能够加快混淆速度。-dontpreverify# 保留Annotation不混淆-keepattributes *Annotation*,InnerClasses# 避免混淆泛型-keepattributes Signature# 抛出异常时保留代码行号-keepattributes SourceFile,LineNumberTable# 指定混淆是采用的算法，后面的参数是一个过滤器# 这个过滤器是谷歌推荐的算法，一般不做更改-optimizations !code/simplification/cast,!field/*,!class/merging/*############################################### Android开发中一些需要保留的公共部分############################################### 保留我们使用的四大组件，自定义的Application等等这些类不被混淆# 因为这些子类都有可能被外部调用-keep public class * extends android.app.Activity-keep public class * extends android.app.Appliction-keep public class * extends android.app.Service-keep public class * extends android.content.BroadcastReceiver-keep public class * extends android.content.ContentProvider-keep public class * extends android.app.backup.BackupAgentHelper-keep public class * extends android.preference.Preference-keep public class * extends android.view.View-keep public class com.android.vending.licensing.ILicensingService# 保留support下的所有类及其内部类-keep class android.support.** &#123;*;&#125;# 保留继承的-keep public class * extends android.support.v4.**-keep public class * extends android.support.v7.**-keep public class * extends android.support.annotation.**# 保留R下面的资源-keep class **.R$* &#123;*;&#125;# 保留本地native方法不被混淆-keepclasseswithmembernames class * &#123; native &lt;methods&gt;;&#125;# 保留在Activity中的方法参数是view的方法，# 这样以来我们在layout中写的onClick就不会被影响-keepclassmembers class * extends android.app.Activity&#123; public void *(android.view.View);&#125;# 保留枚举类不被混淆-keepclassmembers enum * &#123; public static **[] values(); public static ** valueOf(java.lang.String);&#125;# 保留我们自定义控件（继承自View）不被混淆-keep public class * extends android.view.View&#123; *** get*(); void set*(***); public &lt;init&gt;(android.content.Context); public &lt;init&gt;(android.content.Context, android.util.AttributeSet); public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);&#125;# 保留Parcelable序列化类不被混淆-keep class * implements android.os.Parcelable &#123; public static final android.os.Parcelable$Creator *;&#125;# 保留Serializable序列化的类不被混淆-keepnames class * implements java.io.Serializable-keepclassmembers class * implements java.io.Serializable &#123; static final long serialVersionUID; private static final java.io.ObjectStreamField[] serialPersistentFields; !static !transient &lt;fields&gt;; !private &lt;fields&gt;; !private &lt;methods&gt;; private void writeObject(java.io.ObjectOutputStream); private void readObject(java.io.ObjectInputStream); java.lang.Object writeReplace(); java.lang.Object readResolve();&#125;# 对于带有回调函数的onXXEvent、**On*Listener的，不能被混淆-keepclassmembers class * &#123; void *(**On*Event); void *(**On*Listener);&#125;# webView处理，项目中没有使用到webView忽略即可-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123; public *;&#125;-keepclassmembers class * extends android.webkit.webViewClient &#123; public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap); public boolean *(android.webkit.WebView, java.lang.String);&#125;-keepclassmembers class * extends android.webkit.webViewClient &#123; public void *(android.webkit.webView, jav.lang.String);&#125;# 移除Log类打印各个等级日志的代码，打正式包的时候可以做为禁log使用，这里可以作为禁止log打印的功能使用# 记得proguard-android.txt中一定不要加-dontoptimize才起作用# 另外的一种实现方案是通过BuildConfig.DEBUG的变量来控制#-assumenosideeffects class android.util.Log &#123;# public static int v(...);# public static int i(...);# public static int w(...);# public static int d(...);# public static int e(...);#&#125;############################################### 项目中特殊处理部分###############################################-----------处理反射类---------------#-----------处理js交互---------------#-----------处理实体类---------------# 在开发的时候我们可以将所有的实体类放在一个包内，这样我们写一次混淆就行了。#-keep class com.blankj.data.bean.**&#123; *; &#125;#保护 Application 类-keep class com.greenworks.guide.GreenworksApplication &#123; *; &#125;#保护 HttpManage 下的 bean 类-keep class com.greenworks.guide.net.HttpManage$ResultCallback &#123; *; &#125;-keep class com.greenworks.guide.net.HttpManage$Error &#123; *; &#125;-keep class com.greenworks.guide.net.HttpManage$ErrorEntity &#123; *; &#125;# keep 其它 bean 类-keep class com.greenworks.guide.eventbus.ChargeFinishEvent &#123; *; &#125;-keep class com.greenworks.guide.upgrade.** &#123; *; &#125;#-----------处理第三方依赖库---------#项目所用到的第三方的库,不要混淆#jar 包#android-async-http-keep class com.loopj.android.http.** &#123; *; &#125;#hiflying-iots-android-smartlink-keep class com.hiflying.smartlink.** &#123; *; &#125;#httpclient, httpmime-keep class org.apache.http.entity.mime.** &#123; *; &#125;#xlink-wifi-official-sdk,云智易 wifi sdk-keep class io.xlink.wifi.sdk.** &#123; *; &#125;#自定义view#pickerview-keep class com.bigkoo.pickerview.** &#123; *; &#125;#bean,如果使用了Gson之类的工具要使被它解析的JavaBean类即实体类不被混淆。-keep class com.greenworks.guide.bean.** &#123; *; &#125;#网络自动下载 lib 包#android 包-keep class android.** &#123; *; &#125;#apache 包-keep class org.apache.http.** &#123; *; &#125;#facebook.fresco-keep class com.facebook.** &#123; *; &#125;#nordicsemi , DFU,-keep class no.nordicsemi.android.dfu.** &#123; *; &#125;#okhttp-keep class okhttp3.** &#123; *; &#125;#Event Bus# https://github.com/greenrobot/EventBus/issues/503-keepattributes *Annotation*-keepclassmembers class ** &#123; @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;&#125;-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;# Only required if you use AsyncExecutor-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123; &lt;init&gt;(java.lang.Throwable);&#125;#butterknife-keep class butterknife.** &#123; *; &#125;-dontwarn butterknife.internal.**-keep class **$$ViewBinder &#123; *; &#125;-keepclasseswithmembernames class * &#123; @butterknife.* &lt;fields&gt;;&#125;-keepclasseswithmembernames class * &#123; @butterknife.* &lt;methods&gt;;&#125;#takephoto-keep class com.jph.takephoto.** &#123; *; &#125;#google map-keep class com.google.** &#123; *; &#125;#barteksc/AndroidPdfViewer-keep class com.shockwave.**#orhanobut logger-keep class com.orhanobut.logger.** &#123; *; &#125;#nrf logger-keep class no.nordicsemi.android.log.** &#123; *; &#125; 4.混淆后的反编译 参考： https://www.jianshu.com/p/a21edfa632cf 所用到的软件的下载: 链接:https://pan.baidu.com/s/1kWySit5 密码:81u7 5.注意事项 5.1发现查看反编译的代码时,每次都需要重启 JD-GUI.app ,否则显示的还是上一次查看的结果. 5.2 要注意 bean 不能被混淆. 5.3 所有用到的第三方的 lib ,自定义的 view ，最好都添加到 -keep 里面.","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"Android nrf Toolbox 学习","slug":"Android_nrf_Toolbox学习","date":"2018-01-28T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/01/28/Android_nrf_Toolbox学习/","link":"","permalink":"http://desirepaths.github.io/2018/01/28/Android_nrf_Toolbox学习/","excerpt":"个人提升需要，所以要全部理清 APP 的架构设计和一些功能点的实现方法.","text":"个人提升需要，所以要全部理清 APP 的架构设计和一些功能点的实现方法. 1.BLE 连接模块 预览2 详细 图片模板: 图片建议使用这种格式:,因为可以缩小显示 1&lt;img src=&quot;/assets/imgs/Android/ScreenShot2017-12-27_15.41.29.png&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt; 跳转 跳转目的地址 代码块后面一定不要有缩进符，否则会显示不正常(会把后面的文字包括在代码块里面),如 正常的示例: test test2 test3 正常正常正常正常正常 不正常的示例: test test2 test3 * 不正常不正常","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"github项目上传","slug":"github项目上传","date":"2018-01-25T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/01/25/github项目上传/","link":"","permalink":"http://desirepaths.github.io/2018/01/25/github项目上传/","excerpt":"背景 本地有项目，需要上传到 github 去保存.","text":"背景 本地有项目，需要上传到 github 去保存. 详细步骤1.在本地的 project 中创建一个 git 仓库.12345git initgit remote add origin git@10.100.1.217:Tim/newProject.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin master 2.错误 及解决的方法 1.合并 pull 两个不同的项目 fatal: refusing to merge unrelated histories 解决方法 : 1git pull origin master ----allow-unrelated-histories 2.把一个 git 项目 1 复制到另外一个 git 项目 2 里面, 1234* 1.把 1 的 .git 文件删除掉* 2.运行 `git rm --cached 1`* 3.git add .* 4.git commit -m &quot;Add git1 to git2.&quot; 3.Git远程仓库的版本回退 参考1: 12345678910111213141516方式一：使用revertgit revert HEADgit push origin master12方式二：使用resetgit reset --hard HEAD^git push origin master -f12二者区别：revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。 模板方案:","categories":[{"name":"Git","slug":"Git","permalink":"http://desirepaths.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://desirepaths.github.io/tags/Git/"}]},{"title":"网络速度相关","slug":"网络速度相关","date":"2018-01-24T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/01/24/网络速度相关/","link":"","permalink":"http://desirepaths.github.io/2018/01/24/网络速度相关/","excerpt":"用各种方法测试各个服务器的速度及稳定性.","text":"用各种方法测试各个服务器的速度及稳定性. 1.用 站长工具 测试.2.奇云测3.卡卡网 1.用 站长工具 测试. http://ping.chinaz.com/ 1.ping 检测 1.1相关的图片 2.路由追踪 2.奇云测 http://ce.cloud.360.cn/ * 2.1相关的图片 3.卡卡网 3.1.路由追踪 http://www.webkaka.com/Tracert.aspx 3.2相关图片","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"Android下载文件","slug":"Android下载文件","date":"2018-01-23T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2018/01/23/Android下载文件/","link":"","permalink":"http://desirepaths.github.io/2018/01/23/Android下载文件/","excerpt":"Android下载文件 使用 Android 的 HttpURLConnection 下载文件时，要警惕下载路径的重定向问题( httpUrlConnection.getResponseCode() == 302 ),否则会出现 下载的文件的 length =0 的情况 !","text":"Android下载文件 使用 Android 的 HttpURLConnection 下载文件时，要警惕下载路径的重定向问题( httpUrlConnection.getResponseCode() == 302 ),否则会出现 下载的文件的 length =0 的情况 ! 贴上主要的代码:12345678910111213141516171819202122232425262728293031323334 public static void downLoadPdfFile(String urlStr, String savePAth, String fileName) throws Exception &#123; URL url = new URL(urlStr); HttpURLConnection httpUrlConnection = (HttpURLConnection) url.openConnection(); httpUrlConnection.setInstanceFollowRedirects(true); Log.e(TAG, &quot;httpUrlConnection.getResponseCode() :&quot; + httpUrlConnection.getResponseCode());//============ if(httpUrlConnection.getResponseCode() == 302) &#123; String location = httpUrlConnection.getHeaderField(&quot;Location&quot;); Log.e(TAG, &quot;location:&quot; + location); downLoadPdfFile(location,savePAth,fileName); return; &#125;//============ InputStream inputstream = httpUrlConnection.getInputStream(); File file = new File(savePAth, fileName); FileOutputStream outputstream = new FileOutputStream(file); byte buffer[] = new byte[512]; int byteCount = 0; //将输入流中的内容先输入到buffer中缓存，然后用输出流写到文件中 while ((byteCount = inputstream.read(buffer)) != -1) &#123; outputstream.write(buffer, 0, byteCount); &#125; Log.i(&quot;HttpUtil&quot;, &quot;file length:&quot; + file.length()); &#125; 相关的 URL 123456// downLoadUrl2 会重定向到 downLoadUrl5 . private String downLoadUrl2 = &quot;https://api2.xlink.cn:443/v2/xfile/download?id=5a614f03c5740e1f2df3cb83&amp;sign=MTAwZmEyYjAwYjYyMjgwMA==&quot;; private String downLoadUrl3 = &quot;https://avatars1.githubusercontent.com/u/8456939?s=460&amp;v=4&quot;; private String downLoadUrl4 = &quot;https://github.com/xlink-corp/android-sdk/raw/master/docs/%E9%80%8F%E4%BC%A0Demo%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.pdf&quot;; private String downLoadUrl5=&quot;http://xlink.oss-cn-hangzhou.aliyuncs.com/864564ebb604ae72a8d5b711509b5710.pdf?Expires=1516671938&amp;OSSAccessKeyId=aD26TZzvw1nBwKrs&amp;Signature=0EfiAb9dJg2DwU39iQe1MYNjGps%3D&quot;;","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"Google Map 在 google play 中不显示的问题","slug":"googleMap不显示问题","date":"2017-12-27T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2017/12/27/googleMap不显示问题/","link":"","permalink":"http://desirepaths.github.io/2017/12/27/googleMap不显示问题/","excerpt":"最近在开发 google map ,发现在本地下很正常(debug 和 release)(可以正常地显示),但是把 release 的 apk 上传到 google play 上面就一片空白，现在记录下解决的过程.","text":"最近在开发 google map ,发现在本地下很正常(debug 和 release)(可以正常地显示),但是把 release 的 apk 上传到 google play 上面就一片空白，现在记录下解决的过程. 1.这个是 google play 推出的 Google Play App Signing 服务所导致的.2.解决 1.这个是 google play 推出的 Google Play App Signing 服务所导致的. 开始发布应用时，自己手贱点击了启用Google Play App Signing 参考 1.https://stackoverflow.com/questions/44671778/published-app-on-play-store-cant-communicate-with-google-maps-api-and-facebook 2.https://support.google.com/googleplay/android-developer/answer/7384423 2.解决 1.在 google play 中 APP 的 应用签名 处查看 google 新增的 SHA1 2.把 上面中的 SHA1 添加到 google map 的 API 密钥 的管理台中，然后保存即可. 3.前后的效果对比图.","categories":[{"name":"google","slug":"google","permalink":"http://desirepaths.github.io/categories/google/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"中国移动销户过程","slug":"中国移动销户过程","date":"2017-12-26T10:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2017/12/26/中国移动销户过程/","link":"","permalink":"http://desirepaths.github.io/2017/12/26/中国移动销户过程/","excerpt":"中国移动销户过程 记录中国移动的电话卡的销户的过程","text":"中国移动销户过程 记录中国移动的电话卡的销户的过程 1.背景 1.有一张 深圳 的移动全球通卡 58/Month，现在到广州工作，办理了一张广州移动全球通 58/Month ,现在需要把 深圳 的卡给注销(怕会产生信用的影响). 2.过程 打电话给 10086 ,问清楚了整个的销户的流程. 1.全球通的卡是先消费，后缴款的. 2.如果不销户，任由欠费停机(3个月后会欠费销户)，会导致对中国移动的信用的影响，可能会对银行的信用有影响. 3.注销可以委托，需要双方的身份证的原件,委托书,(/source/assets/office_word/中国移动销户委托书.docx),到所在地( 深圳 )的营业厅去销户(销户的过程为在营业厅先缴清了欠费的金额，然后再销户).","categories":[{"name":"日杂","slug":"日杂","permalink":"http://desirepaths.github.io/categories/日杂/"}],"tags":[{"name":"日杂","slug":"日杂","permalink":"http://desirepaths.github.io/tags/日杂/"}]},{"title":"Mac相关的信息","slug":"Mac相关的信息","date":"2017-12-19T10:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2017/12/19/Mac相关的信息/","link":"","permalink":"http://desirepaths.github.io/2017/12/19/Mac相关的信息/","excerpt":"Mac相关的信息 主要记录在 Mac 相关的命令及配置的信息 .","text":"Mac相关的信息 主要记录在 Mac 相关的命令及配置的信息 . 1.修改 DNS 信息.2.Web 服务器3.Mysql 相关4.MAMP搭建5.Web(Nginx) 服务器 1.修改 DNS 信息. 修改本地的 DNS 信息,直接用 域名访问指定的 IP 地址的信息. 如访问 127.0.0.1访问局域网内的其它机器. 修改 /etc/hosts 文件. 1234567891011### Host Database## localhost is used to configure the loopback interface# when the system is booting. Do not change this entry.##127.0.0.1 localhost255.255.255.255 broadcasthost::1 localhost127.0.0.1 www.glbmac.com10.100.1.217 www.glbgz.com 2.Web 服务器 Mac(macOS Sierra,Ver 10.12.6) 自带 apache2 服务器. 1.修改 httpd.conf 目录. /private/etc/apache2/httpd.conf 12345678910111213#去除前面的#号,使得 apache2 支持 phpLoadModule php5_module libexec/apache2/libphp5.so#修改Directory&lt;Directory /&gt;AllowOverride noneRequire all granted&lt;/Directory&gt;#把目录改为自己的目录(Mac 限制了只能在 user 中的 Sites 下建立主目录)DocumentRoot &quot;/Users/tianzeng/Sites&quot;&lt;Directory &quot;/Users/tianzeng/Sites&quot;&gt;#发现也可以在 /private/etc/apache2/extra/httpd-userdir.conf 下修改主目录，但没验证 2.修改 httpd-vhosts.conf /private/etc/apache2/extra/httpd-vhosts.conf 12345678910111213#可以用域名代替 localhost&lt;VirtualHost *:80&gt;DocumentRoot &quot;/Users/tianzeng/Sites&quot;ServerName www.mysites.comErrorLog &quot;/private/var/log/apache2/sites-error_log&quot;CustomLog &quot;/private/var/log/apache2/sites-access_log&quot; common&lt;Directory /&gt;Options Indexes FollowSymLinks MultiViewsAllowOverride NoneOrder deny,allowAllow from all&lt;/Directory&gt;&lt;/VirtualHost&gt; 3.控制的命令12sudo apachectl startsudo apachectl stop 3.Mysql 相关1.相关控制命令12345#启动／停止命令On macOS Sierra &amp; OS to start/stop/restart MySQL post 5.7 from the command line:start: sudo launchctl load -F /Library/LaunchDaemons/com.oracle.oss.mysql.mysqld.pliststop: sudo launchctl unload -F /Library/LaunchDaemons/com.oracle.oss.mysql.mysqld.plist 4.MAMP搭建 详细教程: http://www.jianshu.com/p/d560ce2318c5 http://www.jianshu.com/p/a665a6372e42 Macintosh、Apache、MySQL和PHP 1.下载 MAMP 到 百度云 下载破解版(有钱请支持正版),然后 1.需要先打开 mamp 2.再运行 mamp pro 2.关闭原先系统的开发环境 1.Mysql 1sudo launchctl unload -F /Library/LaunchDaemons/com.oracle.oss.mysql.mysqld.plist 2.Apache2 1sudo apachectl stop 3.MAMP 各种文件路径1.配置文件:1/Library/Application Support/appsolute/MAMP PRO/conf 4.Mac 连接 MAMP 的内置 mysql 1.修改 mamp 的 mysql 的默认端口为 3307. 2.连接教程: https://stackoverflow.com/questions/43157632/mysql-command-line-with-mamp 1.相关的步骤: 1.Command Line 进入 ```1* 2.连接 mysql : ``` ./mysql -u root -p 5.Web(Nginx) 服务器1.参考: 1.更换 brew 镜像 2.Mac下用brew安装nginx 3.Installing Nginx in Mac OS X Maverick With Homebrew 2.步骤 1.安装 nginx brew install nginx,安装完成后会出现: 1234567891011Docroot is: /usr/local/var/wwwThe default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so thatnginx can run without sudo.nginx will load all files in /usr/local/etc/nginx/servers/.To have launchd start nginx now and restart at login: brew services start nginxOr, if you don&apos;t want/need a background service you can just run: nginx 我们从上面的返回可以看出， nginx 的配置文件在 /usr/local/etc/nginx/nginx.conf 中, 网站目录在 /usr/local/var/www 中. 2.控制的命令: 123brew services start nginxbrew services stop nginxbrew services restart nginx 以上命令可能会出现 Error: Unknown command: services, 可以以一下命令去控制: 12sudo nginxsudo nginx -s stop","categories":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://desirepaths.github.io/tags/Mac/"}]},{"title":"Android_权限的获取","slug":"Android_权限的获取","date":"2017-12-19T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2017/12/19/Android_权限的获取/","link":"","permalink":"http://desirepaths.github.io/2017/12/19/Android_权限的获取/","excerpt":"Android_权限的获取 1.Android 6.0 后，敏感的权限需要用户实时的同意才可以获取.第三方库 PermissionsDispatcher 的用法. 2.Android 官方 系统权限 的解析","text":"Android_权限的获取 1.Android 6.0 后，敏感的权限需要用户实时的同意才可以获取.第三方库 PermissionsDispatcher 的用法. 2.Android 官方 系统权限 的解析 参考: https://github.com/permissions-dispatcher/PermissionsDispatcher http://www.jianshu.com/p/64e7334cde11 1.用法（ Camera 权限）: 1.在 app module 的 build.gradle 中，加入以下的代码: 12345compile(&quot;com.github.hotchemi:permissionsdispatcher:3.1.0&quot;) &#123; // if you don&apos;t use android.app.Fragment you can exclude support for them exclude module: &quot;support-v13&quot;&#125;annotationProcessor &quot;com.github.hotchemi:permissionsdispatcher-processor:3.1.0&quot; 在 AndroidManifest.xml 中，添加以下的权限1&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt; 2.在需要获取权限的 Activity 下，添加如下的代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899package com.example.tianzeng.testpermissions;import android.Manifest;import android.content.DialogInterface;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.StringRes;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.View;import android.widget.Toast;import permissions.dispatcher.NeedsPermission;import permissions.dispatcher.OnNeverAskAgain;import permissions.dispatcher.OnPermissionDenied;import permissions.dispatcher.OnShowRationale;import permissions.dispatcher.PermissionRequest;import permissions.dispatcher.RuntimePermissions;@RuntimePermissionspublic class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.button_camera).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123;// MainActivityPermissionsDispatcher.showCameraWithPermissionCheck(MainActivity.this); &#125; &#125;); &#125; @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123; super.onRequestPermissionsResult(requestCode, permissions, grantResults); // NOTE: delegate the permission handling to generated method// MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults); &#125; @NeedsPermission(Manifest.permission.CAMERA) void showCamera() &#123; // NOTE: Perform action that requires the permission. If this is run by PermissionsDispatcher, the permission will have been granted getSupportFragmentManager().beginTransaction() .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance()) .addToBackStack(&quot;camera&quot;) .commitAllowingStateLoss(); &#125; @OnPermissionDenied(Manifest.permission.CAMERA) void onCameraDenied() &#123; // NOTE: Deal with a denied permission, e.g. by showing specific UI // or disabling certain functionality Toast.makeText(this, R.string.permission_camera_denied, Toast.LENGTH_SHORT).show(); &#125; @OnShowRationale(Manifest.permission.CAMERA) void showRationaleForCamera(PermissionRequest request) &#123; // NOTE: Show a rationale to explain why the permission is needed, e.g. with a dialog. // Call proceed() or cancel() on the provided PermissionRequest to continue or abort showRationaleDialog(R.string.permission_camera_rationale, request); &#125; @OnNeverAskAgain(Manifest.permission.CAMERA) void onCameraNeverAskAgain() &#123; Toast.makeText(this, R.string.permission_camera_never_ask_again, Toast.LENGTH_SHORT).show(); &#125; private void showRationaleDialog(@StringRes int messageResId, final PermissionRequest request) &#123; new AlertDialog.Builder(this) .setPositiveButton(R.string.button_allow, new DialogInterface.OnClickListener() &#123; @Override public void onClick(@NonNull DialogInterface dialog, int which) &#123; request.proceed(); &#125; &#125;) .setNegativeButton(R.string.button_deny, new DialogInterface.OnClickListener() &#123; @Override public void onClick(@NonNull DialogInterface dialog, int which) &#123; request.cancel(); &#125; &#125;) .setCancelable(false) .setMessage(messageResId) .show(); &#125;&#125; 3.在 Build -&gt; Make Module ** , PermissionsDispatcher 会生成 ainActivityPermissionsDispatcher(Activity Name + PermissionsDispatcher). 4.打开步骤 2 的注释的代码: 12MainActivityPermissionsDispatcher.showCameraWithPermissionCheck(MainActivity.this); MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]},{"title":"GitLab 的搭建","slug":"GitLab的搭建","date":"2017-12-19T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2017/12/19/GitLab的搭建/","link":"","permalink":"http://desirepaths.github.io/2017/12/19/GitLab的搭建/","excerpt":"GitLab 服务器的搭建 记录下公司的 GitLab 服务器的搭建过程。","text":"GitLab 服务器的搭建 记录下公司的 GitLab 服务器的搭建过程。 1.GitLab 参考2.GitLab 存储相关3.GitLab 配置4.GitLab 错误的解决 1.GitLab 参考 参考1: https://about.gitlab.com/installation/#debian 参考2: https://github.com/gitlabhq 3: http://www.jianshu.com/p/b26affeffc18 4.快速安装 GitLab 并汉化: http://www.jianshu.com/p/7a0d6917e009 2.GitLab 存储相关 1.项目文件的位置 参考1.Repository storage paths 2.项目的路径在 /var/opt/gitlab/git-data 中(项目-&gt;个人-&gt;个人的项目). 1234567891011121314151617181920212223user@glb:/home/tian# cd /var/opt/gitlab/git-datauser@glb:/var/opt/gitlab/git-data# lsrepositoriesuser@glb:/var/opt/gitlab/git-data# cd repositoriesuser@glb:/var/opt/gitlab/git-data/repositories# lsKyrie Tian_test Tim yonghui.yeuser@glb:/var/opt/gitlab/git-data/repositories# cd Tim user@glb:/var/opt/gitlab/git-data/repositories/Tim# lsAndroid_GreenGuide.git GoogleMapDev.gitAndroid_GreenGuide.wiki.git GoogleMapDev.wiki.gitCramer.git GreenGuide_Translate.gitCramer.wiki.git GreenGuide_Translate.wiki.gitEmployeePackage.git InternalProject.gitEmployeePackage.wiki.git InternalProject.wiki.gitGLB_BLE_Protocol.git newProject.gitGLB_BLE_Protocol.wiki.git newProject.wiki.gitGLB_BLE_TestApp2.git PrivateProject.gitGLB_BLE_TestApp2.wiki.git PrivateProject.wiki.gitGLB_BLE_TEST_APP.git TestProject.gitGLB_BLE_TEST_APP_iOS.git TestProject.wiki.gitGLB_BLE_TEST_APP_iOS.wiki.git ZTR_iOS.gitGLB_BLE_TEST_APP.wiki.git ZTR_iOS.wiki.gituser@glb:/var/opt/gitlab/git-data/repositories/Tim# 3.但是在项目中保存的文件应该是经过编译了的，实际的项目的文件找不到. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394user@glb:/var/opt/gitlab/git-data/repositories/Tim# cd Cramer.gituser@glb:/var/opt/gitlab/git-data/repositories/Tim/Cramer.git# lsconfig description HEAD hooks info objects refsuser@glb:/var/opt/gitlab/git-data/repositories/Tim/Cramer.git# cd objectsuser@glb:/var/opt/gitlab/git-data/repositories/Tim/Cramer.git/objects# ls01 0c 17 24 34 3f 4d 52 76 80 86 9e b1 c3 cc e0 info02 0d 1a 2c 39 45 4e 57 79 81 8a a0 b9 c8 ce e2 pack08 0e 1b 2d 3b 48 4f 6c 7b 83 8c a1 bb c9 d0 e709 0f 1c 2e 3c 4b 50 72 7e 84 9b a6 bd ca d1 ec0b 13 1f 2f 3e 4c 51 75 7f 85 9d aa c2 cb d4 fauser@glb:/var/opt/gitlab/git-data/repositories/Tim/Cramer.git/objects# du -h --max-depth=153M ./pack8.0K ./398.0K ./5720K ./758.0K ./2c8.0K ./3f12K ./ca8.0K ./0b8.0K ./3c16K ./0116K ./798.0K ./348.0K ./d08.0K ./b98.0K ./7e8.0K ./768.0K ./178.0K ./4f8.0K ./ec8.0K ./458.0K ./808.0K ./e78.0K ./fa8.0K ./098.0K ./7f8.0K ./a18.0K ./868.0K ./1f8.0K ./4d8.0K ./7b8.0K ./9d8.0K ./bd8.0K ./c98.0K ./1b8.0K ./a08.0K ./d116K ./e08.0K ./248.0K ./cc8.0K ./1c8.0K ./0e16K ./0f12K ./cb8.0K ./138.0K ./528.0K ./088.0K ./4c8.0K ./0220K ./8c12K ./9e8.0K ./a68.0K ./4e8.0K ./6c8.0K ./aa12K ./2f8.0K ./818.0K ./3b8.0K ./848.0K ./c28.0K ./info8.0K ./518.0K ./bb12K ./0c20K ./0d8.0K ./4b8.0K ./8a8.0K ./9b12K ./8312K ./b112K ./3e8.0K ./c312K ./e28.0K ./2d8.0K ./d48.0K ./ce8.0K ./2e8.0K ./1a8.0K ./c88.0K ./858.0K ./5012K ./488.0K ./7254M . 3.GitLab 的配置 1.GitLab 安装完成后，出现的提示信息. 12345678GitLab was unable to detect a valid hostname for your instance.Please configure a URL for your GitLab instance by setting `external_url`configuration in /etc/gitlab/gitlab.rb file.Then, you can start your GitLab instance by running the following command: sudo gitlab-ctl reconfigureFor a comprehensive list of configuration options please see the Omnibus GitLab readmehttps://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md 4.GitLab 错误的解决1.出现 Whoops, GitLab is taking too much time to respond.,Whoops, something went wrong on our end. 错误: 1.1.解决方法记录: 1.看到 var 目录满了，可能是这个原因: 12345678910111213141516171819202122232425# df -hFilesystem Size Used Avail Use% Mounted on/dev/sda1 8.2G 3.1G 4.7G 40% /udev 10M 0 10M 0% /devtmpfs 1.6G 49M 1.6G 4% /runtmpfs 3.9G 0 3.9G 0% /dev/shmtmpfs 5.0M 4.0K 5.0M 1% /run/locktmpfs 3.9G 0 3.9G 0% /sys/fs/cgroup/dev/sda5 2.7G 2.6G 0 100% /var/dev/sda7 360M 5.3M 332M 2% /tmp/dev/sda8 432G 698M 409G 1% /home# du -h --max-depth=1 /var16K /var/lost+found4.0K /var/local8.0K /var/www8.0K /var/tmp40K /var/mail6.0M /var/backups820K /var/spool187M /var/lib1.4G /var/cache899M /var/opt84M /var/log2.6G /var 2.所以把 var/cache和 var/opt 目录移到 home 目录中,建立软链接. 1234$ mv /var/cache /home/$ ln -s /home/cache /var/cache$ mv /var/opt /home/$ ln -s /home/opt /var/opt 3.配置 /etc/gitlab/gitlab.rb 文件,然后运行 sudo gitlab-ctl reconfigure,参考 Unicorn settings,502-Whoops, GitLab is taking too much time to respond 12unicorn[&apos;worker_processes&apos;] = 3unicorn[&apos;worker_timeout&apos;] = 60 4.重新启动服务器，问题就解决了.(重启 gitlab 也无效 !)","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"DNS服务器的搭建","slug":"dns服务器的搭建","date":"2017-12-19T09:46:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2017/12/19/dns服务器的搭建/","link":"","permalink":"http://desirepaths.github.io/2017/12/19/dns服务器的搭建/","excerpt":"DNS服务器的搭建 在 debian 中搭建 DNS 服务器.","text":"DNS服务器的搭建 在 debian 中搭建 DNS 服务器. 参考: 1.Debian下安装DNS服务器: http://blog.csdn.net/linyoujushi/article/details/66049652.https://wiki.debian.org/HowTo/dnsmasq3.Linux安装DNSmasq搭建自己的公共DNS: https://www.xiaoz.me/archives/8303 步骤: 1.安装2.添加指定的 ip 地址3.在路由器的 DNS 中添加 DNS 服务器的地址.","categories":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://desirepaths.github.io/tags/Linux/"}]},{"title":"Android 免 root 查看数据库的内容","slug":"Android_免root查看DB","date":"2017-12-15T01:32:19.000Z","updated":"2020-03-03T13:31:21.000Z","comments":true,"path":"2017/12/15/Android_免root查看DB/","link":"","permalink":"http://desirepaths.github.io/2017/12/15/Android_免root查看DB/","excerpt":"Android 免 root 查看数据库的内容 在 Android 中调试时常常需要查看 SharedPreferences , database 等等的内容，但有些手机 root 又比较麻烦，或 root 不成功,今天偶尔看到这种简单的方法.","text":"Android 免 root 查看数据库的内容 在 Android 中调试时常常需要查看 SharedPreferences , database 等等的内容，但有些手机 root 又比较麻烦，或 root 不成功,今天偶尔看到这种简单的方法. 1.步骤: 手机要先连接电脑，开启 开发者模式. 1.在 build.gradle 中添加 12345 dependencies &#123; compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;) //查看 db 信息 compile &apos;com.facebook.stetho:stetho:1.5.0&apos;&#125; 2.在应用程序的 onCreate() 中添加 如: 123456789101112public class GreenworksApplication extends Application&#123; @Override public void onCreate() &#123; super.onCreate(); //在 DEBUG 模式才可以用免 ROOT 查看的功能 。 if(BuildConfig.DEBUG) &#123; //查看 数据库.Chrome 浏览器打开 chrome://inspect/#devices 即可 Stetho.initializeWithDefaults(this); &#125; &#125;&#125; 3.在电脑的 Chrome 中打开 chrome://inspect/ 参考1: https://stackoverflow.com/questions/23635644/how-can-i-view-the-shared-preferences-file-using-android-studio 参考2: http://facebook.github.io/stetho/","categories":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://desirepaths.github.io/tags/Android/"}]}]}